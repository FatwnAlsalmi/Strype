{
    "abc": [
        {
            "acResult": "ABCMeta",
            "type": "type",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "abstractmethod",
            "type": "function",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "abstractproperty",
            "type": "type",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "abstractstaticmethod",
            "type": "function",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "abstractclassmethod",
            "type": "function",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "ABC",
            "type": "type",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "get_cache_token",
            "type": "function",
            "documentation": "",
            "version": 0
        }
    ],
    "antigravity": [],
    "array": [
        {
            "acResult": "array",
            "type": "type",
            "documentation": "",
            "version": 0
        }
    ],
    "audio": [],
    "": [
        {
            "acResult": "_SupportsTrunc",
            "type": "type",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "object",
            "type": "type",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "staticmethod",
            "type": "type",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "classmethod",
            "type": "type",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "type",
            "type": "type",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "super",
            "type": "type",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "int",
            "type": "type",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "float",
            "type": "type",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "complex",
            "type": "type",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "str",
            "type": "type",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "bytes",
            "type": "type",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "bytearray",
            "type": "type",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "memoryview",
            "type": "type",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "bool",
            "type": "type",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "slice",
            "type": "type",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "tuple",
            "type": "type",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "function",
            "type": "type",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "frozenset",
            "type": "type",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "list",
            "type": "type",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "dict",
            "type": "type",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "set",
            "type": "type",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "enumerate",
            "type": "type",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "range",
            "type": "type",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "property",
            "type": "type",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "_NotImplementedType",
            "type": "type",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "NotImplemented",
            "type": "variable",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "abs",
            "type": "function",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "all",
            "type": "function",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "any",
            "type": "function",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "bin",
            "type": "function",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "breakpoint",
            "type": "function",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "callable",
            "type": "function",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "chr",
            "type": "function",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "_PathLike",
            "type": "type",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "aiter",
            "type": "function",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "delattr",
            "type": "function",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "dir",
            "type": "function",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "divmod",
            "type": "function",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "eval",
            "type": "function",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "exec",
            "type": "function",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "filter",
            "type": "type",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "getattr",
            "type": "function",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "globals",
            "type": "function",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "hasattr",
            "type": "function",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "hash",
            "type": "function",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "help",
            "type": "function",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "hex",
            "type": "function",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "id",
            "type": "function",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "input",
            "type": "function",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "iter",
            "type": "function",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "isinstance",
            "type": "function",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "issubclass",
            "type": "function",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "len",
            "type": "function",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "locals",
            "type": "function",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "map",
            "type": "type",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "max",
            "type": "function",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "min",
            "type": "function",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "next",
            "type": "function",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "oct",
            "type": "function",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "open",
            "type": "function",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "ord",
            "type": "function",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "print",
            "type": "function",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "_SupportsPow2",
            "type": "type",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "_SupportsPow3",
            "type": "type",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "pow",
            "type": "function",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "reversed",
            "type": "type",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "repr",
            "type": "function",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "round",
            "type": "function",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "setattr",
            "type": "function",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "sorted",
            "type": "function",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "sum",
            "type": "function",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "zip",
            "type": "type",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "__import__",
            "type": "function",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "ellipsis",
            "type": "type",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "Ellipsis",
            "type": "variable",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "BaseException",
            "type": "type",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "GeneratorExit",
            "type": "type",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "KeyboardInterrupt",
            "type": "type",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "SystemExit",
            "type": "type",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "Exception",
            "type": "type",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "StopIteration",
            "type": "type",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "OSError",
            "type": "type",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "ArithmeticError",
            "type": "type",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "AssertionError",
            "type": "type",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "AttributeError",
            "type": "type",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "EOFError",
            "type": "type",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "ImportError",
            "type": "type",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "LookupError",
            "type": "type",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "MemoryError",
            "type": "type",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "NameError",
            "type": "type",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "RuntimeError",
            "type": "type",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "StopAsyncIteration",
            "type": "type",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "SyntaxError",
            "type": "type",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "TypeError",
            "type": "type",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "ValueError",
            "type": "type",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "FloatingPointError",
            "type": "type",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "OverflowError",
            "type": "type",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "ZeroDivisionError",
            "type": "type",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "IndexError",
            "type": "type",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "KeyError",
            "type": "type",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "NotImplementedError",
            "type": "type",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "IndentationError",
            "type": "type",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "TabError",
            "type": "type",
            "documentation": "",
            "version": 0
        }
    ],
    "collections": [
        {
            "acResult": "namedtuple",
            "type": "function",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "_OrderedDictKeysView",
            "type": "type",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "_OrderedDictItemsView",
            "type": "type",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "_OrderedDictValuesView",
            "type": "type",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "OrderedDict",
            "type": "type",
            "documentation": "",
            "version": 0
        }
    ],
    "errno": [
        {
            "acResult": "errorcode",
            "type": "variable",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "EACCES",
            "type": "variable",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "EADDRINUSE",
            "type": "variable",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "EAGAIN",
            "type": "variable",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "EALREADY",
            "type": "variable",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "EBADF",
            "type": "variable",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "ECONNABORTED",
            "type": "variable",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "ECONNREFUSED",
            "type": "variable",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "ECONNRESET",
            "type": "variable",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "EEXIST",
            "type": "variable",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "EHOSTUNREACH",
            "type": "variable",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "EINPROGRESS",
            "type": "variable",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "EINVAL",
            "type": "variable",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "EIO",
            "type": "variable",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "EISDIR",
            "type": "variable",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "ENOBUFS",
            "type": "variable",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "ENODEV",
            "type": "variable",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "ENOENT",
            "type": "variable",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "ENOMEM",
            "type": "variable",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "ENOTCONN",
            "type": "variable",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "EOPNOTSUPP",
            "type": "variable",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "EPERM",
            "type": "variable",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "ETIMEDOUT",
            "type": "variable",
            "documentation": "",
            "version": 0
        }
    ],
    "gc": [
        {
            "acResult": "enable",
            "type": "function",
            "documentation": "Enable automatic garbage collection.",
            "version": 0
        },
        {
            "acResult": "disable",
            "type": "function",
            "documentation": "Disable automatic garbage collection.\n\nHeap memory can still be allocated,\nand garbage collection can still be initiated manually using ``gc.collect``.",
            "version": 0
        },
        {
            "acResult": "collect",
            "type": "function",
            "documentation": "Run a garbage collection.",
            "version": 0
        },
        {
            "acResult": "mem_alloc",
            "type": "function",
            "documentation": "Get the number of bytes of heap RAM that are allocated.\n\n:return: The number of bytes allocated.\n\nThis function is MicroPython extension.",
            "version": 0
        },
        {
            "acResult": "mem_free",
            "type": "function",
            "documentation": "Get the number of bytes of available heap RAM, or -1 if this amount is not known.\n\n:return: The number of bytes free.\n\nThis function is MicroPython extension.",
            "version": 0
        },
        {
            "acResult": "threshold",
            "type": "function",
            "documentation": "Set the additional GC allocation threshold.\n\nNormally, a collection is triggered only when a new allocation\ncannot be satisfied, i.e. on an  out-of-memory (OOM) condition.\nIf this function is called, in addition to OOM, a collection\nwill be triggered each time after ``amount`` bytes have been\nallocated (in total, since the previous time such an amount of bytes\nhave been allocated). ``amount`` is usually specified as less than the\nfull heap size, with the intention to trigger a collection earlier than when the\nheap becomes exhausted, and in the hope that an early collection will prevent\nexcessive memory fragmentation. This is a heuristic measure, the effect\nof which will vary from application to application, as well as\nthe optimal value of the ``amount`` parameter.\n\nA value of -1 means a disabled allocation threshold.\n\nThis function is a MicroPython extension. CPython has a similar\nfunction - ``set_threshold()``, but due to different GC\nimplementations, its signature and semantics are different.\n\n:param amount: The number of bytes after which a garbage collection should be triggered.",
            "version": 0
        }
    ],
    "log": [
        {
            "acResult": "set_labels",
            "type": "function",
            "documentation": "Set up the log file header.\n\nExample: ``log.set_labels('X', 'Y', 'Z', timestamp=log.MINUTES)``\n\nIdeally this function should be called a single time, before any data is\nlogged, to configure the data table header once.\n\nIf a log file already exists when the program starts, or if this function\nis called multiple times, it will check the labels already defined in the\nlog file. If this function call contains any new labels not already\npresent, it will generate a new header row with the additional columns.\n\nBy default the first column contains a timestamp for each row. The time\nunit can be selected via the timestamp argument.\n\n:param *labels: Any number of positional arguments, each corresponding to an entry in the log header.\n:param timestamp: Select the timestamp unit that will be automatically added as the first column in every row. Timestamp values can be one of ``log.MILLISECONDS``, ``log.SECONDS``, ``log.MINUTES``, ``log.HOURS``, ``log.DAYS`` or ``None`` to disable the timestamp. The default value is ``log.SECONDS``.",
            "version": 0
        },
        {
            "acResult": "add",
            "type": "function",
            "documentation": "Add a data row to the log using keyword arguments.\n\nExample: ``log.add(temp=temperature())``\n\nEach call to this function adds a row to the log.\n\nNew labels not previously specified via the set_labels function, or by a\nprevious call to this function, will trigger a new header entry to be added\nto the log with the extra labels.\n\nLabels previously specified and not present in a call to this function will\nbe skipped with an empty value in the log row.",
            "version": 0
        },
        {
            "acResult": "delete",
            "type": "function",
            "documentation": "Deletes the contents of the log, including headers.\n\nExample: ``log.delete()``\n\nTo add the log headers again the ``set_labels`` function should to be called after this function.\n\nThere are two erase modes; \u201cfull\u201d completely removes the data from the physical storage,\nand \u201cfast\u201d invalidates the data without removing it.\n\n:param full: ``True`` selects a \u201cfull\u201d erase and ``False`` selects the \u201cfast\u201d erase method.",
            "version": 0
        },
        {
            "acResult": "set_mirroring",
            "type": "function",
            "documentation": "Configure mirroring of the data logging activity to the serial output.\n\nExample: ``log.set_mirroring(True)``\n\nSerial mirroring is disabled by default. When enabled, it will print to serial each row logged into the log file.\n\n:param serial: ``True`` enables mirroring data to the serial output.",
            "version": 0
        }
    ],
    "love": [
        {
            "acResult": "badaboom",
            "type": "function",
            "documentation": "",
            "version": 0
        }
    ],
    "machine": [
        {
            "acResult": "unique_id",
            "type": "function",
            "documentation": "Get a byte string with a unique identifier of a board.\n\nExample: ``machine.unique_id()``\n\n:return: An identifier that varies from one board instance to another.",
            "version": 0
        },
        {
            "acResult": "reset",
            "type": "function",
            "documentation": "Reset the device in a manner similar to pushing the external RESET button.\n\nExample: ``machine.reset()``",
            "version": 0
        },
        {
            "acResult": "freq",
            "type": "function",
            "documentation": "Get the CPU frequency in hertz.\n\nExample: ``machine.freq()``\n\n:return: The CPU frequency.",
            "version": 0
        },
        {
            "acResult": "disable_irq",
            "type": "function",
            "documentation": "Disable interrupt requests.\n\nExample: ``interrupt_state = machine.disable_irq()``\n\n:return: the previous IRQ state which should be considered an opaque value\n\nThe return value should be passed to the ``enable_irq`` function to restore\ninterrupts to their original state.",
            "version": 0
        },
        {
            "acResult": "enable_irq",
            "type": "function",
            "documentation": "Re-enable interrupt requests.\n\nExample: ``machine.enable_irq(interrupt_state)``\n\n:param state: The value that was returned from the most recent call to the ``disable_irq`` function.",
            "version": 0
        },
        {
            "acResult": "time_pulse_us",
            "type": "function",
            "documentation": "Time a pulse on a pin.\n\nExample: ``time_pulse_us(pin0, 1)``\n\nIf the current input value of the pin is different to ``pulse_level``, the\nfunction first waits until the pin input becomes equal to\n``pulse_level``, then times the duration that the pin is equal to\n``pulse_level``. If the pin is already equal to ``pulse_level`` then timing\nstarts straight away.\n\n:param pin: The pin to use\n:param pulse_level: 0 to time a low pulse or 1 to time a high pulse\n:param timeout_us: A microsecond timeout\n:return: The duration of the pulse in microseconds, or -1 for a timeout waiting for the level to match ``pulse_level``, or -2 on timeout waiting for the pulse to end",
            "version": 0
        },
        {
            "acResult": "mem",
            "type": "type",
            "documentation": "The class for the ``mem8``, ``mem16`` and ``mem32`` memory views.",
            "version": 0
        },
        {
            "acResult": "mem8",
            "type": "variable",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "mem16",
            "type": "variable",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "mem32",
            "type": "variable",
            "documentation": "",
            "version": 0
        }
    ],
    "math": [
        {
            "acResult": "acos",
            "type": "function",
            "documentation": "Calculate the inverse cosine.\n\nExample: ``math.acos(1)``\n\n:param x: A number\n:return: The inverse cosine of ``x``",
            "version": 0
        },
        {
            "acResult": "asin",
            "type": "function",
            "documentation": "Calculate the inverse sine.\n\nExample: ``math.asin(0)``\n\n:param x: A number\n:return: The inverse sine of ``x``",
            "version": 0
        },
        {
            "acResult": "atan",
            "type": "function",
            "documentation": "Calculate the inverse tangent.\n\nExample: ``math.atan(0)``\n\n:param x: A number\n:return: The inverse tangent of ``x``",
            "version": 0
        },
        {
            "acResult": "atan2",
            "type": "function",
            "documentation": "Calculate the principal value of the inverse tangent of ``y/x``.\n\nExample: ``math.atan2(0, -1)``\n\n:param y: A number\n:param x: A number\n:return: The principal value of the inverse tangent of ``y/x``",
            "version": 0
        },
        {
            "acResult": "ceil",
            "type": "function",
            "documentation": "Round a number towards positive infinity.\n\nExample: ``math.ceil(0.1)``\n\n:param x: A number\n:return: ``x`` rounded towards positive infinity.",
            "version": 0
        },
        {
            "acResult": "copysign",
            "type": "function",
            "documentation": "Calculate ``x`` with the sign of ``y``.\n\nExample: ``math.copysign(1, -1)``\n\n:param x: A number\n:param y: The source of the sign for the return value\n:return: ``x`` with the sign of ``y``",
            "version": 0
        },
        {
            "acResult": "cos",
            "type": "function",
            "documentation": "Calculate the cosine of ``x``.\n\nExample: ``math.cos(0)``\n\n:param x: A number\n:return: The cosine of ``x``",
            "version": 0
        },
        {
            "acResult": "degrees",
            "type": "function",
            "documentation": "Convert radians to degrees.\n\nExample: ``math.degrees(2 * math.pi)``\n\n:param x: A value in radians\n:return: The value converted to degrees",
            "version": 0
        },
        {
            "acResult": "exp",
            "type": "function",
            "documentation": "Calculate the exponential of ``x``.\n\nExample: ``math.exp(1)``\n\n:param x: A number\n:return: The exponential of ``x``.",
            "version": 0
        },
        {
            "acResult": "fabs",
            "type": "function",
            "documentation": "Return the absolute value of ``x``.\n\nExample: ``math.fabs(-0.1)``\n\n:param x: A number\n:return: The absolute value of ``x``",
            "version": 0
        },
        {
            "acResult": "floor",
            "type": "function",
            "documentation": "Round a number towards negative infinity.\n\nExample: ``math.floor(0.9)``\n\n:param x: A number\n:return: ``x`` rounded towards negative infinity.",
            "version": 0
        },
        {
            "acResult": "fmod",
            "type": "function",
            "documentation": "Calculate the remainder of ``x/y``.\n\nExample: ``math.fmod(10, 3)``\n\n:param x: The numerator\n:param y: The denominator",
            "version": 0
        },
        {
            "acResult": "frexp",
            "type": "function",
            "documentation": "Decomposes a floating-point number into its mantissa and exponent.\n\nExample: ``mantissa, exponent = math.frexp(2)``\n\nThe returned value is the tuple ``(m, e)`` such that ``x == m * 2**e``\nexactly.  If ``x == 0`` then the function returns ``(0.0, 0)``, otherwise\nthe relation ``0.5 <= abs(m) < 1`` holds.\n\n:param x: A floating-point number\n:return: A tuple of length two containing its mantissa then exponent",
            "version": 0
        },
        {
            "acResult": "isfinite",
            "type": "function",
            "documentation": "Check if a value is finite.\n\nExample: ``math.isfinite(float('inf'))``\n\n:param x: A number.\n:return: ``True`` if ``x`` is finite, ``False`` otherwise.",
            "version": 0
        },
        {
            "acResult": "isinf",
            "type": "function",
            "documentation": "Check if a value is infinite.\n\nExample: ``math.isinf(float('-inf'))``\n\n:param x: A number.\n:return: ``True`` if ``x`` is infinite, ``False`` otherwise.",
            "version": 0
        },
        {
            "acResult": "isnan",
            "type": "function",
            "documentation": "Check if a value is not-a-number (NaN).\n\nExample: ``math.isnan(float('nan'))``\n\n:param x: A number\n:return: ``True`` if ``x`` is not-a-number (NaN), ``False`` otherwise.",
            "version": 0
        },
        {
            "acResult": "ldexp",
            "type": "function",
            "documentation": "Calculate ``x * (2**exp)``.\n\nExample: ``math.ldexp(0.5, 2)``\n\n:param x: A number\n:param exp: Integer exponent\n:return: ``x * (2**exp)``",
            "version": 0
        },
        {
            "acResult": "log",
            "type": "function",
            "documentation": "Calculate the logarithm of ``x`` to the given base (defaults to natural logorithm).\n\nExample: ``math.log(math.e)``\n\nWith one argument, return the natural logarithm of x (to base e).\n\nWith two arguments, return the logarithm of x to the given base, calculated as ``log(x)/log(base)``.\n\n:param x: A number\n:param base: The base to use\n:return: The natural logarithm of ``x``",
            "version": 0
        },
        {
            "acResult": "modf",
            "type": "function",
            "documentation": "Calculate the fractional and integral parts of ``x``.\n\nExample: ``fractional, integral = math.modf(1.5)``\n\n:param x: A number\n:return: A tuple of two floats representing the fractional then integral parts of ``x``.\n\nBoth the fractional and integral values have the same sign as ``x``.",
            "version": 0
        },
        {
            "acResult": "pow",
            "type": "function",
            "documentation": "Returns ``x`` to the power of ``y``.\n\nExample: ``math.pow(4, 0.5)``\n\n:param x: A number\n:param y: The exponent\n:return: ``x`` to the power of ``y``",
            "version": 0
        },
        {
            "acResult": "radians",
            "type": "function",
            "documentation": "Convert a degrees to radians.\n\nExample: ``math.radians(360)``\n\n:param x: A value in degrees\n:return: The value converted to radians",
            "version": 0
        },
        {
            "acResult": "sin",
            "type": "function",
            "documentation": "Calculate the sine of ``x``.\n\nExample: ``math.sin(math.pi/2)``\n\n:param x: A number\n:return: The sine of ``x``",
            "version": 0
        },
        {
            "acResult": "sqrt",
            "type": "function",
            "documentation": "Calculate the square root of ``x``.\n\nExample: ``math.sqrt(4)``\n\n:param x: A number\n:return: The square root of ``x``",
            "version": 0
        },
        {
            "acResult": "tan",
            "type": "function",
            "documentation": "Calculate the tangent of ``x``.\n\nExample: ``math.tan(0)``\n\n:param x: A number\n:return: The tangent of ``x``.",
            "version": 0
        },
        {
            "acResult": "trunc",
            "type": "function",
            "documentation": "Round a number towards 0.\n\nExample: ``math.trunc(-0.9)``\n\n:param x: A number\n:return: ``x`` rounded towards zero.",
            "version": 0
        },
        {
            "acResult": "e",
            "type": "variable",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "pi",
            "type": "variable",
            "documentation": "",
            "version": 0
        }
    ],
    "microbit.accelerometer": [
        {
            "acResult": "get_x",
            "type": "function",
            "documentation": "Get the acceleration measurement in the ``x`` axis in milli-g.\n\nExample: ``accelerometer.get_x()``\n\n:return: A positive or negative integer depending on direction in the range +/- 2000mg.",
            "version": 0
        },
        {
            "acResult": "get_y",
            "type": "function",
            "documentation": "Get the acceleration measurement in the ``y`` axis in milli-g.\n\nExample: ``accelerometer.get_y()``\n\n:return: A positive or negative integer depending on direction in the range +/- 2000mg.",
            "version": 0
        },
        {
            "acResult": "get_z",
            "type": "function",
            "documentation": "Get the acceleration measurement in the ``z`` axis in milli-g.\n\nExample: ``accelerometer.get_z()``\n\n:return: A positive or negative integer depending on direction in the range +/- 2000mg.",
            "version": 0
        },
        {
            "acResult": "get_values",
            "type": "function",
            "documentation": "Get the acceleration measurements in all axes at once as a tuple.\n\nExample: ``x, y, z = accelerometer.get_values()``\n\n:return: a three-element tuple of integers ordered as X, Y, Z, each value a positive or negative integer depending on direction in the range +/- 2000mg",
            "version": 0
        },
        {
            "acResult": "get_strength",
            "type": "function",
            "documentation": "Get the acceleration measurement of all axes combined, as a positive integer. This is the Pythagorean sum of the X, Y and Z axes.\n\nExample: ``accelerometer.get_strength()``\n\n:return: The combined acceleration strength of all the axes, in milli-g.",
            "version": 0
        },
        {
            "acResult": "current_gesture",
            "type": "function",
            "documentation": "Get the name of the current gesture.\n\nExample: ``accelerometer.current_gesture()``\n\nMicroPython understands the following gesture names: ``\"up\"``, ``\"down\"``,\n``\"left\"``, ``\"right\"``, ``\"face up\"``, ``\"face down\"``, ``\"freefall\"``,\n``\"3g\"``, ``\"6g\"``, ``\"8g\"``, ``\"shake\"``. Gestures are always\nrepresented as strings.\n\n:return: The current gesture",
            "version": 0
        },
        {
            "acResult": "is_gesture",
            "type": "function",
            "documentation": "Check if the named gesture is currently active.\n\nExample: ``accelerometer.is_gesture('shake')``\n\nMicroPython understands the following gesture names: ``\"up\"``, ``\"down\"``,\n``\"left\"``, ``\"right\"``, ``\"face up\"``, ``\"face down\"``, ``\"freefall\"``,\n``\"3g\"``, ``\"6g\"``, ``\"8g\"``, ``\"shake\"``. Gestures are always\nrepresented as strings.\n\n:param name: The gesture name.\n:return: ``True`` if the gesture is active, ``False`` otherwise.",
            "version": 0
        },
        {
            "acResult": "was_gesture",
            "type": "function",
            "documentation": "Check if the named gesture was active since the last call.\n\nExample: ``accelerometer.was_gesture('shake')``\n\nMicroPython understands the following gesture names: ``\"up\"``, ``\"down\"``,\n``\"left\"``, ``\"right\"``, ``\"face up\"``, ``\"face down\"``, ``\"freefall\"``,\n``\"3g\"``, ``\"6g\"``, ``\"8g\"``, ``\"shake\"``. Gestures are always\nrepresented as strings.\n\n:param name: The gesture name.\n:return: ``True`` if the gesture was active since the last call, ``False`` otherwise.",
            "version": 0
        },
        {
            "acResult": "get_gestures",
            "type": "function",
            "documentation": "Return a tuple of the gesture history.\n\nExample: ``accelerometer.get_gestures()``\n\nClears the gesture history before returning.\n\nGestures are not updated in the background so there needs to be constant\ncalls to some accelerometer method to do the gesture detection. Usually\ngestures can be detected using a loop with a small :func:`microbit.sleep` delay.\n\n:return: The history as a tuple, most recent last.",
            "version": 0
        },
        {
            "acResult": "set_range",
            "type": "function",
            "documentation": "Set the accelerometer sensitivity range, in g (standard gravity), to the closest values supported by the hardware, so it rounds to either ``2``, ``4``, or ``8`` g.\n\nExample: ``accelerometer.set_range(8)``\n\n:param value: New range for the accelerometer, an integer in ``g``.",
            "version": 0
        }
    ],
    "microbit.audio": [
        {
            "acResult": "play",
            "type": "function",
            "documentation": "Play a built-in sound, sound effect or custom audio frames.\n\nExample: ``audio.play(Sound.GIGGLE)``\n\n:param source: A built-in ``Sound`` such as ``Sound.GIGGLE``, a ``SoundEffect`` or sample data as an iterable of ``AudioFrame`` objects.\n:param wait: If ``wait`` is ``True``, this function will block until the sound is complete.\n:param pin: An optional argument to specify the output pin can be used to  override the default of ``pin0``. If we do not want any sound to play we can use ``pin=None``.\n:param return_pin: Specifies a differential edge connector pin to connect to an external speaker instead of ground. This is ignored for the **V2** revision.",
            "version": 0
        },
        {
            "acResult": "is_playing",
            "type": "function",
            "documentation": "Check whether a sound is playing.\n\nExample: ``audio.is_playing()``\n\n:return: ``True`` if audio is playing, otherwise ``False``.",
            "version": 0
        },
        {
            "acResult": "stop",
            "type": "function",
            "documentation": "Stop all audio playback.\n\nExample: ``audio.stop()``",
            "version": 0
        },
        {
            "acResult": "SoundEffect",
            "type": "type",
            "documentation": "A sound effect, composed by a set of parameters configured via the constructor or attributes.",
            "version": 0
        },
        {
            "acResult": "AudioFrame",
            "type": "type",
            "documentation": "An ``AudioFrame`` object is a list of 32 samples each of which is a unsigned byte\n(whole number between 0 and 255).\n\nIt takes just over 4 ms to play a single frame.\n\nExample::\n\n    frame = AudioFrame()\n    for i in range(len(frame)):\n        frame[i] = 252 - i * 8",
            "version": 0
        }
    ],
    "microbit.compass": [
        {
            "acResult": "calibrate",
            "type": "function",
            "documentation": "Starts the calibration process.\n\nExample: ``compass.calibrate()``\n\nAn instructive message will be scrolled to the user after which they will need\nto rotate the device in order to draw a circle on the LED display.",
            "version": 0
        },
        {
            "acResult": "is_calibrated",
            "type": "function",
            "documentation": "Check is the compass is calibrated.\n\nExample: ``compass.is_calibrated()``\n\n:return: ``True`` if the compass has been successfully calibrated, ``False`` otherwise.",
            "version": 0
        },
        {
            "acResult": "clear_calibration",
            "type": "function",
            "documentation": "Undoes the calibration, making the compass uncalibrated again.\n\nExample: ``compass.clear_calibration()``",
            "version": 0
        },
        {
            "acResult": "get_x",
            "type": "function",
            "documentation": "Get the magnetic field strength on the ``x`` axis.\n\nExample: ``compass.get_x()``\n\nCall ``calibrate`` first or the results will be inaccurate.\n\n:return: A positive or negative integer in nano tesla representing the magnitude and direction of the field.",
            "version": 0
        },
        {
            "acResult": "get_y",
            "type": "function",
            "documentation": "Get the magnetic field strength on the ``y`` axis.\n\nExample: ``compass.get_y()``\n\nCall ``calibrate`` first or the results will be inaccurate.\n\n:return: A positive or negative integer in nano tesla representing the magnitude and direction of the field.",
            "version": 0
        },
        {
            "acResult": "get_z",
            "type": "function",
            "documentation": "Get the magnetic field strength on the ``z`` axis.\n\nExample: ``compass.get_z()``\n\nCall ``calibrate`` first or the results will be inaccurate.\n\n:return: A positive or negative integer in nano tesla representing the magnitude and direction of the field.",
            "version": 0
        },
        {
            "acResult": "heading",
            "type": "function",
            "documentation": "Get the compass heading.\n\nExample: ``compass.heading()``\n\n:return: An integer in the range from 0 to 360, representing the angle in degrees, clockwise, with north as 0.",
            "version": 0
        },
        {
            "acResult": "get_field_strength",
            "type": "function",
            "documentation": "Get the magnitude of the magnetic field around the device.\n\nExample: ``compass.get_field_strength()``\n\n:return: An integer indication of the magnitude of the magnetic field in nano tesla.",
            "version": 0
        }
    ],
    "microbit.display": [
        {
            "acResult": "get_pixel",
            "type": "function",
            "documentation": "Get the brightness of the LED at column ``x`` and row ``y``.\n\nExample: ``display.get_pixel(0, 0)``\n\n:param x: The display column (0..4)\n:param y: The display row (0..4)\n:return: A number between 0 (off) and 9 (bright)",
            "version": 0
        },
        {
            "acResult": "set_pixel",
            "type": "function",
            "documentation": "Set the brightness of the LED at column ``x`` and row ``y``.\n\nExample: ``display.set_pixel(0, 0, 9)``\n\n:param x: The display column (0..4)\n:param y: The display row (0..4)\n:param value: The brightness between 0 (off) and 9 (bright)",
            "version": 0
        },
        {
            "acResult": "clear",
            "type": "function",
            "documentation": "Set the brightness of all LEDs to 0 (off).\n\nExample: ``display.clear()``",
            "version": 0
        },
        {
            "acResult": "show",
            "type": "function",
            "documentation": "Shows images, letters or digits on the LED display.\n\nExample: ``display.show(Image.HEART)``\n\nWhen ``image`` is an image or a list of images then each image is displayed in turn.\nIf ``image`` is a string or number, each letter or digit is displayed in turn.\n\n:param image: A string, number, image or list of images to show.\n:param delay: Each letter, digit or image is shown with ``delay`` milliseconds between them.\n:param wait: If ``wait`` is ``True``, this function will block until the animation is finished, otherwise the animation will happen in the background.\n:param loop: If ``loop`` is ``True``, the animation will repeat forever.\n:param clear: If ``clear`` is ``True``, the display will be cleared after the sequence has finished.\n\nThe ``wait``, ``loop`` and ``clear`` arguments must be specified using their keyword.",
            "version": 0
        },
        {
            "acResult": "scroll",
            "type": "function",
            "documentation": "Scrolls a number or text on the LED display.\n\nExample: ``display.scroll('micro:bit')``\n\n:param text: The string to scroll. If ``text`` is an integer or float it is first converted to a string using ``str()``.\n:param delay: The ``delay`` parameter controls how fast the text is scrolling.\n:param wait: If ``wait`` is ``True``, this function will block until the animation is finished, otherwise the animation will happen in the background.\n:param loop: If ``loop`` is ``True``, the animation will repeat forever.\n:param monospace: If ``monospace`` is ``True``, the characters will all take up 5 pixel-columns in width, otherwise there will be exactly 1 blank pixel-column between each character as they scroll.\n\nThe ``wait``, ``loop`` and ``monospace`` arguments must be specified\nusing their keyword.",
            "version": 0
        },
        {
            "acResult": "on",
            "type": "function",
            "documentation": "Turn on the LED display.\n\nExample: ``display.on()``",
            "version": 0
        },
        {
            "acResult": "off",
            "type": "function",
            "documentation": "Turn off the LED display (disabling the display allows you to re-use the GPIO pins for other purposes).\n\nExample: ``display.off()``",
            "version": 0
        },
        {
            "acResult": "is_on",
            "type": "function",
            "documentation": "Check whether the LED display is enabled.\n\nExample: ``display.is_on()``\n\n:return: ``True`` if the display is on, otherwise returns ``False``.",
            "version": 0
        },
        {
            "acResult": "read_light_level",
            "type": "function",
            "documentation": "Read the light level.\n\nExample: ``display.read_light_level()``\n\nUses the display's LEDs in reverse-bias mode to sense the amount of light\nfalling on the display.\n\n:return: An integer between 0 and 255 representing the light level, with larger meaning more light.",
            "version": 0
        }
    ],
    "microbit.i2c": [
        {
            "acResult": "init",
            "type": "function",
            "documentation": "Re-initialize a peripheral.\n\nExample: ``i2c.init()``\n\n:param freq: clock frequency\n:param sda: ``sda`` pin (default 20)\n:param scl: ``scl`` pin (default 19)\n\nOn a micro:bit V1 board, changing the I\u00b2C pins from defaults will make\nthe accelerometer and compass stop working, as they are connected\ninternally to those pins. This warning does not apply to the **V2**\nrevision of the micro:bit as this has `separate I\u00b2C lines <https://tech.microbit.org/hardware/i2c/>`_\nfor the motion sensors and the edge connector.",
            "version": 0
        },
        {
            "acResult": "scan",
            "type": "function",
            "documentation": "Scan the bus for devices.\n\nExample: ``i2c.scan()``\n\n:return: A list of 7-bit addresses corresponding to those devices that responded to the scan.",
            "version": 0
        },
        {
            "acResult": "read",
            "type": "function",
            "documentation": "Read bytes from a device.\n\nExample: ``i2c.read(0x50, 64)``\n\n:param addr: The 7-bit address of the device\n:param n: The number of bytes to read\n:param repeat: If ``True``, no stop bit will be sent\n:return: The bytes read",
            "version": 0
        },
        {
            "acResult": "write",
            "type": "function",
            "documentation": "Write bytes to a device.\n\nExample: ``i2c.write(0x50, bytes([1, 2, 3]))``\n\n:param addr: The 7-bit address of the device\n:param buf: A buffer containing the bytes to write\n:param repeat: If ``True``, no stop bit will be sent",
            "version": 0
        }
    ],
    "microbit.microphone": [
        {
            "acResult": "current_event",
            "type": "function",
            "documentation": "Get the last recorded sound event\n\nExample: ``microphone.current_event()``\n\n:return: The event, ``SoundEvent('loud')`` or ``SoundEvent('quiet')``.",
            "version": 0
        },
        {
            "acResult": "was_event",
            "type": "function",
            "documentation": "Check if a sound was heard at least once since the last call.\n\nExample: ``microphone.was_event(SoundEvent.LOUD)``\n\nThis call clears the sound history before returning.\n\n:param event: The event to check for,  such as ``SoundEvent.LOUD`` or ``SoundEvent.QUIET``\n:return: ``True`` if sound was heard at least once since the last call, otherwise ``False``.",
            "version": 0
        },
        {
            "acResult": "is_event",
            "type": "function",
            "documentation": "Check the most recent sound event detected.\n\nExample: ``microphone.is_event(SoundEvent.LOUD)``\n\nThis call does not clear the sound event history.\n\n:param event: The event to check for,  such as ``SoundEvent.LOUD`` or ``SoundEvent.QUIET``\n:return: ``True`` if sound was the most recent heard, ``False`` otherwise.",
            "version": 0
        },
        {
            "acResult": "get_events",
            "type": "function",
            "documentation": "Get the sound event history as a tuple.\n\nExample: ``microphone.get_events()``\n\nThis call clears the sound history before returning.\n\n:return: A tuple of the event history with the most recent event last.",
            "version": 0
        },
        {
            "acResult": "set_threshold",
            "type": "function",
            "documentation": "Set the threshold for a sound event.\n\nExample: ``microphone.set_threshold(SoundEvent.LOUD, 250)``\n\nA high threshold means the event will only trigger if the sound is very loud (>= 250 in the example).\n\n:param event: A sound event, such as ``SoundEvent.LOUD`` or ``SoundEvent.QUIET``.\n:param value: The threshold level in the range 0-255.",
            "version": 0
        },
        {
            "acResult": "sound_level",
            "type": "function",
            "documentation": "Get the sound pressure level.\n\nExample: ``microphone.sound_level()``\n\n:return: A representation of the sound pressure level in the range 0 to 255.",
            "version": 0
        }
    ],
    "microbit.speaker": [
        {
            "acResult": "off",
            "type": "function",
            "documentation": "Turn the speaker off.\n\nExample: ``speaker.off()``\n\nThis does not disable sound output to an edge connector pin.",
            "version": 0
        },
        {
            "acResult": "on",
            "type": "function",
            "documentation": "Turn the speaker on.\n\nExample: ``speaker.on()``",
            "version": 0
        }
    ],
    "microbit.spi": [
        {
            "acResult": "init",
            "type": "function",
            "documentation": "Initialize SPI communication.\n\nExample: ``spi.init()``\n\nFor correct communication, the parameters have to be the same on both communicating devices.\n\n:param baudrate: The speed of communication.\n:param bits: The width in bits of each transfer. Currently only ``bits=8`` is supported. However, this may change in the future.\n:param mode: Determines the combination of clock polarity and phase - `see online table <https://microbit-micropython.readthedocs.io/en/v2-docs/spi.html#microbit.spi.init>`_.\n:param sclk: sclk pin (default 13)\n:param mosi: mosi pin (default 15)\n:param miso: miso pin (default 14)",
            "version": 0
        },
        {
            "acResult": "read",
            "type": "function",
            "documentation": "Read bytes.\n\nExample: ``spi.read(64)``\n\n:param nbytes: Maximum number of bytes to read.\n:return: The bytes read.",
            "version": 0
        },
        {
            "acResult": "write",
            "type": "function",
            "documentation": "Write bytes to the bus.\n\nExample: ``spi.write(bytes([1, 2, 3]))``\n\n:param buffer: A buffer to read data from.",
            "version": 0
        },
        {
            "acResult": "write_readinto",
            "type": "function",
            "documentation": "Write the ``out`` buffer to the bus and read any response into the ``in_`` buffer.\n\nExample: ``spi.write_readinto(out_buffer, in_buffer)``\n\nThe length of the buffers should be the same. The buffers can be the same object.\n\n:param out: The buffer to write any response to.\n:param in_: The buffer to read data from.",
            "version": 0
        }
    ],
    "microbit.uart": [
        {
            "acResult": "ODD",
            "type": "variable",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "EVEN",
            "type": "variable",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "init",
            "type": "function",
            "documentation": "Initialize serial communication.\n\nExample: ``uart.init(115200, tx=pin0, rx=pin1)``\n\n:param baudrate: The speed of communication.\n:param bits: The size of bytes being transmitted. micro:bit only supports 8.\n:param parity: How parity is checked, ``None``, ``uart.ODD`` or ``uart.EVEN``.\n:param stop: The number of stop bits, has to be 1 for micro:bit.\n:param tx: Transmitting pin.\n:param rx: Receiving pin.\n\nInitializing the UART on external pins will cause the Python console on\nUSB to become unaccessible, as it uses the same hardware. To bring the\nconsole back you must reinitialize the UART without passing anything for\n``tx`` or ``rx`` (or passing ``None`` to these arguments).  This means\nthat calling ``uart.init(115200)`` is enough to restore the Python console.\n\nFor more details see `the online documentation <https://microbit-micropython.readthedocs.io/en/v2-docs/uart.html>`_.",
            "version": 0
        },
        {
            "acResult": "any",
            "type": "function",
            "documentation": "Check if any data is waiting.\n\nExample: ``uart.any()``\n\n:return: ``True`` if any data is waiting, else ``False``.",
            "version": 0
        },
        {
            "acResult": "read",
            "type": "function",
            "documentation": "Read bytes.\n\nExample: ``uart.read()``\n\n:param nbytes: If ``nbytes`` is specified then read at most that many bytes, otherwise read as many bytes as possible\n:return: A bytes object or ``None`` on timeout",
            "version": 0
        },
        {
            "acResult": "readinto",
            "type": "function",
            "documentation": "Read bytes into the ``buf``.\n\nExample: ``uart.readinto(input_buffer)``\n\n:param buf: The buffer to write to.\n:param nbytes: If ``nbytes`` is specified then read at most that many bytes, otherwise read ``len(buf)`` bytes.\n:return: number of bytes read and stored into ``buf`` or ``None`` on timeout.",
            "version": 0
        },
        {
            "acResult": "readline",
            "type": "function",
            "documentation": "Read a line, ending in a newline character.\n\nExample: ``uart.readline()``\n\n:return: The line read or ``None`` on timeout. The newline character is included in the returned bytes.",
            "version": 0
        },
        {
            "acResult": "write",
            "type": "function",
            "documentation": "Write a buffer to the bus.\n\nExample: ``uart.write('hello world')``\n\n:param buf: A bytes object or a string.\n:return: The number of bytes written, or ``None`` on timeout.\n\nExamples::\n\n    uart.write('hello world')\n    uart.write(b'hello world')\n    uart.write(bytes([1, 2, 3]))",
            "version": 0
        }
    ],
    "microbit": [
        {
            "acResult": "accelerometer",
            "type": "module",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "audio",
            "type": "module",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "compass",
            "type": "module",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "display",
            "type": "module",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "i2c",
            "type": "module",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "microphone",
            "type": "module",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "speaker",
            "type": "module",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "spi",
            "type": "module",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "uart",
            "type": "module",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "run_every",
            "type": "function",
            "documentation": "Schedule to run a function at the interval specified by the time arguments **V2 only**.\n\nExample: ``run_every(my_logging, min=5)``\n\n``run_every`` can be used in two ways:\n\nAs a Decorator - placed on top of the function to schedule. For example::\n\n    @run_every(h=1, min=20, s=30, ms=50)\n    def my_function():\n        # Do something here\n\nAs a Function - passing the callback as a positional argument. For example::\n\n    def my_function():\n        # Do something here\n    run_every(my_function, s=30)\n\nEach argument corresponds to a different time unit and they are additive.\nSo ``run_every(min=1, s=30)`` schedules the callback every minute and a half.\n\nWhen an exception is thrown inside the callback function it deschedules the\nfunction. To avoid this you can catch exceptions with ``try/except``.\n\n:param callback: Function to call at the provided interval. Omit when using as a decorator.\n:param days: Sets the day mark for the scheduling.\n:param h: Sets the hour mark for the scheduling.\n:param min: Sets the minute mark for the scheduling.\n:param s: Sets the second mark for the scheduling.\n:param ms: Sets the millisecond mark for the scheduling.",
            "version": 0
        },
        {
            "acResult": "panic",
            "type": "function",
            "documentation": "Enter a panic mode.\n\nExample: ``panic(127)``\n\n:param n: An arbitrary integer <= 255 to indicate a status.\n\nRequires restart.",
            "version": 0
        },
        {
            "acResult": "reset",
            "type": "function",
            "documentation": "Restart the board.",
            "version": 0
        },
        {
            "acResult": "scale",
            "type": "function",
            "documentation": "Converts a value from a range to a floating point range.\n\nExample: ``temp_fahrenheit = scale(30, from_=(0.0, 100.0), to=(32.0, 212.0))``\n\nFor example, to convert temperature from a Celsius scale to Fahrenheit.\n\nIf one of the numbers in the ``to`` parameter is a floating point\n(i.e a decimal number like ``10.0``), this function will return a\nfloating point number.\nIf they are both integers (i.e ``10``), it will return an integer::\n\n    returns_int = scale(accelerometer.get_x(), from_=(-2000, 2000), to=(0, 255))\n\n:param value: A number to convert.\n:param from_: A tuple to define the range to convert from.\n:param to: A tuple to define the range to convert to.\n:return: The ``value`` converted to the ``to`` range.",
            "version": 0
        },
        {
            "acResult": "sleep",
            "type": "function",
            "documentation": "Wait for ``n`` milliseconds.\n\nExample: ``sleep(1000)``\n\n:param n: The number of milliseconds to wait\n\nOne second is 1000 milliseconds, so::\n\n    microbit.sleep(1000)\n\nwill pause the execution for one second.",
            "version": 0
        },
        {
            "acResult": "running_time",
            "type": "function",
            "documentation": "Get the running time of the board.\n\n:return: The number of milliseconds since the board was switched on or restarted.",
            "version": 0
        },
        {
            "acResult": "temperature",
            "type": "function",
            "documentation": "Get the temperature of the micro:bit in degrees Celsius.",
            "version": 0
        },
        {
            "acResult": "set_volume",
            "type": "function",
            "documentation": "Sets the volume.\n\nExample: ``set_volume(127)``\n\n:param v: a value between 0 (low) and 255 (high).\n\nOut of range values will be clamped to 0 or 255.\n\n**V2** only.",
            "version": 0
        },
        {
            "acResult": "Button",
            "type": "type",
            "documentation": "The class for the buttons ``button_a`` and ``button_b``.",
            "version": 0
        },
        {
            "acResult": "button_a",
            "type": "variable",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "button_b",
            "type": "variable",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "MicroBitDigitalPin",
            "type": "type",
            "documentation": "A digital pin.\n\nSome pins support analog and touch features using the ``MicroBitAnalogDigitalPin`` and ``MicroBitTouchPin`` subclasses.",
            "version": 0
        },
        {
            "acResult": "MicroBitAnalogDigitalPin",
            "type": "type",
            "documentation": "A pin with analog and digital features.",
            "version": 0
        },
        {
            "acResult": "MicroBitTouchPin",
            "type": "type",
            "documentation": "A pin with analog, digital and touch features.",
            "version": 0
        },
        {
            "acResult": "pin0",
            "type": "variable",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "pin1",
            "type": "variable",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "pin2",
            "type": "variable",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "pin3",
            "type": "variable",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "pin4",
            "type": "variable",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "pin5",
            "type": "variable",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "pin6",
            "type": "variable",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "pin7",
            "type": "variable",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "pin8",
            "type": "variable",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "pin9",
            "type": "variable",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "pin10",
            "type": "variable",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "pin11",
            "type": "variable",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "pin12",
            "type": "variable",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "pin13",
            "type": "variable",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "pin14",
            "type": "variable",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "pin15",
            "type": "variable",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "pin16",
            "type": "variable",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "pin19",
            "type": "variable",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "pin20",
            "type": "variable",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "pin_logo",
            "type": "variable",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "pin_speaker",
            "type": "variable",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "Image",
            "type": "type",
            "documentation": "An image to show on the micro:bit LED display.\n\nGiven an image object it's possible to display it via the ``display`` API::\n\n    display.show(Image.HAPPY)",
            "version": 0
        },
        {
            "acResult": "SoundEvent",
            "type": "type",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "Sound",
            "type": "type",
            "documentation": "The built-in sounds can be called using ``audio.play(Sound.NAME)``.",
            "version": 0
        },
        {
            "acResult": "__doc__",
            "type": "module",
            "documentation": "Pins, images, sounds, temperature and volume.",
            "version": 0
        }
    ],
    "micropython": [
        {
            "acResult": "const",
            "type": "function",
            "documentation": "Used to declare that the expression is a constant so that the compiler can\noptimise it.\n\nThe use of this function should be as follows::\n\n    from micropython import const\n    CONST_X = const(123)\n    CONST_Y = const(2 * CONST_X + 1)\n\nConstants declared this way are still accessible as global variables from\noutside the module they are declared in. On the other hand, if a constant\nbegins with an underscore then it is hidden, it is not available as a\nglobal variable, and does not take up any memory during execution.\n\n:param expr: A constant expression.",
            "version": 0
        },
        {
            "acResult": "opt_level",
            "type": "function",
            "documentation": "Sets the optimisation level for subsequent compilation of scripts.\n\nExample: ``micropython.opt_level(1)``\n\nThe optimisation level controls the following compilation features:\n\n- Assertions: at level 0 assertion statements are enabled and compiled\n  into the bytecode; at levels 1 and higher assertions are not compiled.\n\n- Built-in ``__debug__`` variable: at level 0 this variable expands to\n  True; at levels 1 and higher it expands to False.\n\n- Source-code line numbers: at levels 0, 1 and 2 source-code line number\n  are stored along with the bytecode so that exceptions can report the\n  line number they occurred at; at levels 3 and higher line numbers are\n  not stored.\n\nThe default optimisation level is usually level 0.\n\n:param level: An integer optimisation level.",
            "version": 0
        },
        {
            "acResult": "mem_info",
            "type": "function",
            "documentation": "Print information about currently used memory.\n\nExample: ``micropython.mem_info()``\n\n:param verbose: If the ``verbose`` argument is given then extra information is printed.",
            "version": 0
        },
        {
            "acResult": "qstr_info",
            "type": "function",
            "documentation": "Print information about currently interned strings.\n\nExample: ``micropython.qstr_info()``\n\n:param verbose: If the ``verbose`` argument is given then extra information is printed.\n\nThe information that is printed is implementation dependent, but currently\nincludes the number of interned strings and the amount of RAM they use.  In\nverbose mode it prints out the names of all RAM-interned strings.",
            "version": 0
        },
        {
            "acResult": "stack_use",
            "type": "function",
            "documentation": "Return an integer representing the current amount of stack that is being\nused.\n\nExample: ``micropython.stack_use()``\n\nThe absolute value of this is not particularly useful, rather it\nshould be used to compute differences in stack usage at different points.\n\n:return: An integer representing current stack use.",
            "version": 0
        },
        {
            "acResult": "heap_lock",
            "type": "function",
            "documentation": "Lock the heap.\n\nExample: ``micropython.heap_lock()``\n\nWhen locked no memory allocation can occur and a ``MemoryError`` will be\nraised if any heap allocation is attempted.",
            "version": 0
        },
        {
            "acResult": "heap_unlock",
            "type": "function",
            "documentation": "Unlock the heap.\n\nExample: ``micropython.heap_unlock()``\n\nWhen locked no memory allocation can occur and a ``MemoryError`` will be\nraised if any heap allocation is attempted.",
            "version": 0
        },
        {
            "acResult": "kbd_intr",
            "type": "function",
            "documentation": "Set the character that will raise a ``KeyboardInterrupt`` exception.\n\nExample: ``micropython.kbd_intr(-1)``\n\n:param chr: Character code to raise the interrupt or -1 to disable capture of Ctrl-C.\n\nBy default this is set to 3 during script execution, corresponding to Ctrl-C.\nPassing -1 to this function will disable capture of Ctrl-C, and passing 3\nwill restore it.\n\nThis function can be used to prevent the capturing of Ctrl-C on the\nincoming stream of characters that is usually used for the REPL, in case\nthat stream is used for other purposes.",
            "version": 0
        }
    ],
    "music": [
        {
            "acResult": "DADADADUM",
            "type": "variable",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "ENTERTAINER",
            "type": "variable",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "PRELUDE",
            "type": "variable",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "ODE",
            "type": "variable",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "NYAN",
            "type": "variable",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "RINGTONE",
            "type": "variable",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "FUNK",
            "type": "variable",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "BLUES",
            "type": "variable",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "BIRTHDAY",
            "type": "variable",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "WEDDING",
            "type": "variable",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "FUNERAL",
            "type": "variable",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "PUNCHLINE",
            "type": "variable",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "PYTHON",
            "type": "variable",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "BADDY",
            "type": "variable",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "CHASE",
            "type": "variable",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "BA_DING",
            "type": "variable",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "WAWAWAWAA",
            "type": "variable",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "JUMP_UP",
            "type": "variable",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "JUMP_DOWN",
            "type": "variable",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "POWER_UP",
            "type": "variable",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "POWER_DOWN",
            "type": "variable",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "set_tempo",
            "type": "function",
            "documentation": "Sets the approximate tempo for playback.\n\nExample: ``music.set_tempo(bpm=120)``\n\n:param ticks: The number of ticks constituting a beat.\n:param bpm: An integer determining how many beats per minute.\n\nSuggested default values allow the following useful behaviour:\n\n- music.set_tempo() \u2013 reset the tempo to default of ticks = 4, bpm = 120\n- music.set_tempo(ticks=8) \u2013 change the \u201cdefinition\u201d of a beat\n- music.set_tempo(bpm=180) \u2013 just change the tempo\n\nTo work out the length of a tick in milliseconds is very simple arithmetic:\n60000/bpm/ticks_per_beat. For the default values that\u2019s\n60000/120/4 = 125 milliseconds or 1 beat = 500 milliseconds.",
            "version": 0
        },
        {
            "acResult": "get_tempo",
            "type": "function",
            "documentation": "Gets the current tempo as a tuple of integers: ``(ticks, bpm)``.\n\nExample: ``ticks, beats = music.get_tempo()``\n\n:return: The temp as a tuple with two integer values, the ticks then the beats per minute.",
            "version": 0
        },
        {
            "acResult": "play",
            "type": "function",
            "documentation": "Plays music.\n\nExample: ``music.play(music.NYAN)``\n\n:param music: music specified in `a special notation <https://microbit-micropython.readthedocs.io/en/v2-docs/music.html#musical-notation>`_\n:param pin: the output pin for use with an external speaker (default ``pin0``), ``None`` for no sound.\n:param wait: If ``wait`` is set to ``True``, this function is blocking.\n:param loop: If ``loop`` is set to ``True``, the tune repeats until ``stop`` is called or the blocking call is interrupted.\n\nMany built-in melodies are defined in this module.",
            "version": 0
        },
        {
            "acResult": "pitch",
            "type": "function",
            "documentation": "Play a note.\n\nExample: ``music.pitch(185, 1000)``\n\n:param frequency: An integer frequency\n:param duration: A millisecond duration. If negative then sound is continuous until the next call or a call to ``stop``.\n:param pin: Optional output pin (default ``pin0``).\n:param wait: If ``wait`` is set to ``True``, this function is blocking.\n\nFor example, if the frequency is set to 440 and the length to\n1000 then we hear a standard concert A for one second.\n\nYou can only play one pitch on one pin at any one time.",
            "version": 0
        },
        {
            "acResult": "stop",
            "type": "function",
            "documentation": "Stops all music playback on the built-in speaker and any pin outputting sound.\n\nExample: ``music.stop()``\n\n:param pin: An optional argument can be provided to specify a pin, e.g. ``music.stop(pin1)``.",
            "version": 0
        },
        {
            "acResult": "reset",
            "type": "function",
            "documentation": "Resets ticks, bpm, duration and octave to their default values.\n\nExample: ``music.reset()``\n\nValues:\n- ``ticks = 4``\n- ``bpm = 120``\n- ``duration = 4``\n- ``octave = 4``",
            "version": 0
        }
    ],
    "neopixel": [
        {
            "acResult": "NeoPixel",
            "type": "type",
            "documentation": "",
            "version": 0
        }
    ],
    "os": [
        {
            "acResult": "listdir",
            "type": "function",
            "documentation": "List files.\n\nExample: ``os.listdir()``\n\n:return: A list of the names of all the files contained within the local\npersistent on-device file system.",
            "version": 0
        },
        {
            "acResult": "remove",
            "type": "function",
            "documentation": "Remove (delete) a file.\n\nExample: ``os.remove('data.txt')``\n\n:param filename: The file to delete.\n\nIf the file does not exist an ``OSError`` exception will occur.",
            "version": 0
        },
        {
            "acResult": "size",
            "type": "function",
            "documentation": "Returns the size of a file.\n\nExample: ``os.size('data.txt')``\n\n:param filename: The file\n:return: The size in bytes.\n\nIf the file does not exist an ``OSError`` exception will occur.",
            "version": 0
        },
        {
            "acResult": "uname_result",
            "type": "type",
            "documentation": "Result of ``os.uname()``",
            "version": 0
        },
        {
            "acResult": "uname",
            "type": "function",
            "documentation": "Returns information identifying the current operating system.\n\nExample: ``os.uname()``\n\nThe return value is an object with five attributes:\n\n- ``sysname`` - operating system name\n- ``nodename`` - name of machine on network (implementation-defined)\n- ``release`` - operating system release\n- ``version`` - operating system version\n- ``machine`` - hardware identifier\n\nThere is no underlying operating system in MicroPython. As a result the\ninformation returned by the ``uname`` function is mostly useful for\nversioning details.",
            "version": 0
        }
    ],
    "power": [
        {
            "acResult": "off",
            "type": "function",
            "documentation": "Power down the board to the lowest possible power mode.\n\nExample: ``power.off()``\n\nThis is the equivalent to pressing the reset button for a few seconds,\nto set the board in \"Off mode\".\n\nThe micro:bit will only wake up if the reset button is pressed or,\nif on battery power, when a USB cable is connected.\n\nWhen the board wakes up it will start for a reset state, so your program\nwill start running from the beginning.",
            "version": 0
        },
        {
            "acResult": "deep_sleep",
            "type": "function",
            "documentation": "Set the micro:bit into a low power mode where it can wake up and continue operation.\n\nExample: ``power.deep_sleep(wake_on=(button_a, button_b))``\n\nThe program state is preserved and when it wakes up it will resume\noperation where it left off.\n\nDeep Sleep mode will consume more battery power than Off mode.\n\nThe wake up sources are configured via arguments.\n\nThe board will always wake up when receiving UART data, when the reset\nbutton is pressed (which resets the board) or, in battery power,\nwhen the USB cable is inserted.\n\nWhen the ``run_every`` parameter is set to ``True`` (the default), any\nfunction scheduled with ``run_every`` will momentarily wake up the board\nto run and when it finishes it will go back to sleep.\n\n:param ms: A time in milliseconds to wait before it wakes up.\n:param wake_on: A single instance or a tuple of pins and/or buttons to wake up the board, e.g. ``deep_sleep(wake_on=button_a)`` or ``deep_sleep(wake_on=(pin0, pin2, button_b))``.\n:param run_every: A boolean to configure if the functions scheduled with ``microbit.run_every`` will continue to run while it sleeps.",
            "version": 0
        }
    ],
    "radio": [
        {
            "acResult": "RATE_1MBIT",
            "type": "variable",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "RATE_2MBIT",
            "type": "variable",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "on",
            "type": "function",
            "documentation": "Turns the radio on.\n\nExample: ``radio.on()``\n\nThis needs to be explicitly called since the radio draws power and takes\nup memory that you may otherwise need.",
            "version": 0
        },
        {
            "acResult": "off",
            "type": "function",
            "documentation": "Turns off the radio, saving power and memory.\n\nExample: ``radio.off()``",
            "version": 0
        },
        {
            "acResult": "config",
            "type": "function",
            "documentation": "Configures the radio.\n\nExample: ``radio.config(group=42)``\n\nThe default configuration is suitable for most use.\n\n:param length: (default=32) defines the maximum length, in bytes, of a message sent via the radio.\nIt can be up to 251 bytes long (254 - 3 bytes for S0, LENGTH and S1 preamble).\n:param queue: (default=3) specifies the number of messages that can be stored on the incoming message queue.\nIf there are no spaces left on the queue for incoming messages, then the incoming message is dropped.\n:param channel: (default=7) an integer value from 0 to 83 (inclusive) that defines an arbitrary \"channel\" to which the radio is tuned.\nMessages will be sent via this channel and only messages received via this channel will be put onto the incoming message queue. Each step is 1MHz wide, based at 2400MHz.\n:param power: (default=6) is an integer value from 0 to 7 (inclusive) to indicate the strength of signal used when broadcasting a message.\nThe higher the value the stronger the signal, but the more power is consumed by the device. The numbering translates to positions in the following list of dBm (decibel milliwatt) values: -30, -20, -16, -12, -8, -4, 0, 4.\n:param address: (default=0x75626974) an arbitrary name, expressed as a 32-bit address, that's used to filter incoming packets at the hardware level, keeping only those that match the address you set.\nThe default used by other micro:bit related platforms is the default setting used here.\n:param group: (default=0) an 8-bit value (0-255) used with the ``address`` when filtering messages.\nConceptually, \"address\" is like a house/office address and \"group\" is like the person at that address to which you want to send your message.\n:param data_rate: (default=``radio.RATE_1MBIT``) indicates the speed at which data throughput takes place.\nCan be one of the following constants defined in the ``radio`` module: ``RATE_250KBIT``, ``RATE_1MBIT`` or ``RATE_2MBIT``.\n\nIf ``config`` is not called then the defaults described above are assumed.",
            "version": 0
        },
        {
            "acResult": "reset",
            "type": "function",
            "documentation": "Reset the settings to their default values.\n\nExample: ``radio.reset()``\n\nThe defaults as as per the ``config`` function above.",
            "version": 0
        },
        {
            "acResult": "send_bytes",
            "type": "function",
            "documentation": "Sends a message containing bytes.\n\nExample: ``radio.send_bytes(b'hello')``\n\n:param message: The bytes to send.",
            "version": 0
        },
        {
            "acResult": "receive_bytes",
            "type": "function",
            "documentation": "Receive the next incoming message on the message queue.\n\nExample: ``radio.receive_bytes()``\n\n:return: The message bytes if any, otherwise ``None``.",
            "version": 0
        },
        {
            "acResult": "receive_bytes_into",
            "type": "function",
            "documentation": "Copy the next incoming message on the message queue into a buffer.\n\nExample: ``radio.receive_bytes_info(buffer)``\n\n:param buffer: The target buffer. The message is truncated if larger than the buffer.\n:return: ``None`` if there are no pending messages, otherwise it returns the length of the message (which might be more than the length of the buffer).",
            "version": 0
        },
        {
            "acResult": "send",
            "type": "function",
            "documentation": "Sends a message string.\n\nExample: ``radio.send('hello')``\n\nThis is the equivalent of ``radio.send_bytes(bytes(message, 'utf8'))`` but with ``b'\u0001\u0000\u0001'``\nprepended to the front (to make it compatible with other platforms that target the micro:bit).\n\n:param message: The string to send.",
            "version": 0
        },
        {
            "acResult": "receive",
            "type": "function",
            "documentation": "Works in exactly the same way as ``receive_bytes`` but returns whatever was sent.\n\nExample: ``radio.receive()``\n\nEquivalent to ``str(receive_bytes(), 'utf8')`` but with a check that the the first\nthree bytes are ``b'\u0001\u0000\u0001'`` (to make it compatible with other platforms that\nmay target the micro:bit).\n\n:return: The message with the prepended bytes stripped and converted to a string.\n\nA ``ValueError`` exception is raised if conversion to string fails.",
            "version": 0
        },
        {
            "acResult": "receive_full",
            "type": "function",
            "documentation": "Returns a tuple containing three values representing the next incoming message on the message queue.\n\nExample: ``radio.receive_full()``\n\nIf there are no pending messages then ``None`` is returned.\n\nThe three values in the tuple represent:\n\n- the next incoming message on the message queue as bytes.\n- the RSSI (signal strength): a value between 0 (strongest) and -255 (weakest) as measured in dBm.\n- a microsecond timestamp: the value returned by ``time.ticks_us()`` when the message was received.\n\nFor example::\n\n    details = radio.receive_full()\n    if details:\n        msg, rssi, timestamp = details\n\nThis function is useful for providing information needed for triangulation\nand/or trilateration with other micro:bit devices.\n\n:return: ``None`` if there is no message, otherwise a tuple of length three with the bytes, strength and timestamp values.",
            "version": 0
        }
    ],
    "random": [
        {
            "acResult": "getrandbits",
            "type": "function",
            "documentation": "Generate an integer with ``n`` random bits.\n\nExample: ``random.getrandbits(1)``\n\n:param n: A value between 1-30 (inclusive).",
            "version": 0
        },
        {
            "acResult": "seed",
            "type": "function",
            "documentation": "Initialize the random number generator.\n\nExample: ``random.seed(0)``\n\n:param n: The integer seed\n\nThis will give you reproducibly deterministic randomness from a given starting\nstate (``n``).",
            "version": 0
        },
        {
            "acResult": "randint",
            "type": "function",
            "documentation": "Choose a random integer between ``a`` and ``b`` inclusive.\n\nExample: ``random.randint(0, 9)``\n\n:param a: Start value for the range (inclusive)\n:param b: End value for the range (inclusive)\n\nAlias for ``randrange(a, b + 1)``.",
            "version": 0
        },
        {
            "acResult": "randrange",
            "type": "function",
            "documentation": "Choose a randomly selected element from ``range(start, stop, step)``.\n\nExample: ``random.randrange(0, 10)``\n\n:param start: The start of the range (inclusive)\n:param stop: The end of the range (exclusive)\n:param step: The step.",
            "version": 0
        },
        {
            "acResult": "choice",
            "type": "function",
            "documentation": "Choose a random element from the non-empty sequence ``seq``.\n\nExample: ``random.choice([Image.HAPPY, Image.SAD])``\n\n:param seq: A sequence.\n\nIf ``seq`` is  empty, raises ``IndexError``.",
            "version": 0
        },
        {
            "acResult": "random",
            "type": "function",
            "documentation": "Generate a random floating point number in the range [0.0, 1.0).\n\nExample: ``random.random()``\n\n:return: The random floating point number",
            "version": 0
        },
        {
            "acResult": "uniform",
            "type": "function",
            "documentation": "Return a random floating point number between ``a`` and ``b`` inclusive.\n\nExample: ``random.uniform(0, 9)``\n\n:param a: Start value for the range (inclusive)\n:param b: End value for the range (inclusive)",
            "version": 0
        }
    ],
    "speech": [
        {
            "acResult": "translate",
            "type": "function",
            "documentation": "Translate English words to phonemes.\n\nExample: ``speech.translate('hello world')``\n\n:param words: A string of English words.\n:return: A string containing a best guess at the appropriate phonemes to pronounce.\nThe output is generated from this `text to phoneme translation table <https://github.com/s-macke/SAM/wiki/Text-to-phoneme-translation-table>`_.\n\nThis function should be used to generate a first approximation of phonemes\nthat can be further hand-edited to improve accuracy, inflection and\nemphasis.\n\nSee `the online documentation <https://microbit-micropython.readthedocs.io/en/v2-docs/speech.html>`_ for detailed information.",
            "version": 0
        },
        {
            "acResult": "pronounce",
            "type": "function",
            "documentation": "Pronounce phonemes.\n\nExample: ``speech.pronounce(' /HEHLOW WERLD')``\n\n:param phonemes: The string of phonemes to pronounce\n:param pitch: A number representing the pitch of the voice\n:param speed: A number representing the speed of the voice\n:param mouth: A number representing the mouth of the voice\n:param throat: A number representing the throat of the voice\n:param pin: Optional argument to specify the output pin can be used to override the default of ``pin0``.\nIf we do not want any sound to play out of the pins can use ``pin=None``. micro:bit V2 only.\n\nOverride the optional pitch, speed, mouth and throat settings to change the\ntimbre (quality) of the voice.\n\nSee `the online documentation <https://microbit-micropython.readthedocs.io/en/v2-docs/speech.html>`_ for detailed information.",
            "version": 0
        },
        {
            "acResult": "say",
            "type": "function",
            "documentation": "Say English words.\n\nExample: ``speech.say('hello world')``\n\n:param words: The string of words to say.\n:param pitch: A number representing the pitch of the voice\n:param speed: A number representing the speed of the voice\n:param mouth: A number representing the mouth of the voice\n:param throat: A number representing the throat of the voice\n:param pin: Optional argument to specify the output pin can be used to override the default of ``pin0``.\nIf we do not want any sound to play out of the pins can use ``pin=None``. micro:bit V2 only.\n\nThe result is semi-accurate for English. Override the optional pitch, speed,\nmouth and throat settings to change the timbre (quality) of the voice.\n\nThis is a short-hand equivalent of:\n``speech.pronounce(speech.translate(words))``\n\nSee `the online documentation <https://microbit-micropython.readthedocs.io/en/v2-docs/speech.html>`_ for detailed information.",
            "version": 0
        },
        {
            "acResult": "sing",
            "type": "function",
            "documentation": "Sing phonemes.\n\nExample: ``speech.sing(' /HEHLOW WERLD')``\n\n:param phonemes: The string of words to sing.\n:param pitch: A number representing the pitch of the voice\n:param speed: A number representing the speed of the voice\n:param mouth: A number representing the mouth of the voice\n:param throat: A number representing the throat of the voice\n:param pin: Optional argument to specify the output pin can be used to override the default of ``pin0``.\nIf we do not want any sound to play out of the pins can use ``pin=None``. micro:bit V2 only.\n\nOverride the optional pitch, speed, mouth and throat settings to change\nthe timbre (quality) of the voice.\n\nSee `the online documentation <https://microbit-micropython.readthedocs.io/en/v2-docs/speech.html>`_ for detailed information.",
            "version": 0
        }
    ],
    "struct": [
        {
            "acResult": "calcsize",
            "type": "function",
            "documentation": "Get the number of bytes needed to store the given ``fmt``.\n\nExample: ``struct.calcsize('hf')``\n\n:param fmt: A format string.\n:return The number of bytes needed to store such a value.",
            "version": 0
        },
        {
            "acResult": "pack",
            "type": "function",
            "documentation": "Pack values according to a format string.\n\nExample: ``struct.pack('hf', 1, 3.1415)``\n\n:param fmt: The format string.\n:param v1: The first value.\n:param *vn: The remaining values.\n:return A bytes object encoding the values.",
            "version": 0
        },
        {
            "acResult": "pack_into",
            "type": "function",
            "documentation": "Pack values according to a format string.\n\nExample: ``struct.pack_info('hf', buffer, 1, 3.1415)``\n\n:param fmt: The format string.\n:param buffer: The target buffer to write into.\n:param offset: The offset into the buffer. May be negative to count from the end of the buffer.\n:param v1: The first value.\n:param *vn: The remaining values.",
            "version": 0
        },
        {
            "acResult": "unpack",
            "type": "function",
            "documentation": "Unpack data according to a format string.\n\nExample: ``v1, v2 = struct.unpack('hf', buffer)``\n\n:param fmt: The format string.\n:param data: The data.\n:return: A tuple of the unpacked values.",
            "version": 0
        },
        {
            "acResult": "unpack_from",
            "type": "function",
            "documentation": "Unpack data from a buffer according to a format string.\n\nExample: ``v1, v2 = struct.unpack_from('hf', buffer)``\n\n:param fmt: The format string.\n:param buffer: The source buffer to read from.\n:param offset: The offset into the buffer. May be negative to count from the end of the buffer.\n:return: A tuple of the unpacked values.",
            "version": 0
        }
    ],
    "sys": [
        {
            "acResult": "exit",
            "type": "function",
            "documentation": "Terminate current program with a given exit code.\n\nExample: ``sys.exit(1)``\n\nThis function raises a ``SystemExit`` exception. If an argument is given, its\nvalue given as an argument to ``SystemExit``.\n\n:param retval: The exit code or message.",
            "version": 0
        },
        {
            "acResult": "print_exception",
            "type": "function",
            "documentation": "Print an exception with a traceback.\n\nExample: ``sys.print_exception(e)``\n\n:param exc: The exception to print\n\nThis is simplified version of a function which appears in the\n``traceback`` module in CPython.",
            "version": 0
        },
        {
            "acResult": "argv",
            "type": "variable",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "byteorder",
            "type": "variable",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "_implementation",
            "type": "type",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "implementation",
            "type": "variable",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "maxsize",
            "type": "variable",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "modules",
            "type": "variable",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "path",
            "type": "variable",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "platform",
            "type": "variable",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "version",
            "type": "variable",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "version_info",
            "type": "variable",
            "documentation": "",
            "version": 0
        }
    ],
    "this": [
        {
            "acResult": "authors",
            "type": "function",
            "documentation": "",
            "version": 0
        }
    ],
    "time": [
        {
            "acResult": "sleep",
            "type": "function",
            "documentation": "Delay a number of seconds.\n\nExample: ``time.sleep(1)``\n\n:param seconds: The number of seconds to sleep for.\nUse a floating-point number to sleep for a fractional number of seconds.",
            "version": 0
        },
        {
            "acResult": "sleep_ms",
            "type": "function",
            "documentation": "Delay for given number of milliseconds.\n\nExample: ``time.sleep_ms(1_000_000)``\n\n:param ms: The number of milliseconds delay (>= 0).",
            "version": 0
        },
        {
            "acResult": "sleep_us",
            "type": "function",
            "documentation": "Delay for given number of microseconds.\n\nExample: ``time.sleep_us(1000)``\n\n:param us: The number of microseconds delay (>= 0).",
            "version": 0
        },
        {
            "acResult": "ticks_ms",
            "type": "function",
            "documentation": "Get an increasing, millisecond counter with an arbitrary reference point,\nthat wraps around after some value.\n\nExample: ``time.ticks_ms()``\n\n:return: The counter value in milliseconds.",
            "version": 0
        },
        {
            "acResult": "ticks_us",
            "type": "function",
            "documentation": "Get an increasing, microsecond counter with an arbitrary reference point,\nthat wraps around after some value.\n\nExample: ``time.ticks_us()``\n\n:return: The counter value in microseconds.",
            "version": 0
        },
        {
            "acResult": "ticks_add",
            "type": "function",
            "documentation": "Offset ticks value by a given number, which can be either positive or\nnegative.\n\nExample: ``time.ticks_add(time.ticks_ms(), 200)``\n\nGiven a ticks value, this function allows to calculate ticks\nvalue delta ticks before or after it, following modular-arithmetic\ndefinition of tick values.\n\n:param ticks: A ticks value\n:param delta: An integer offset\n\nExample::\n\n    # Find out what ticks value there was 100ms ago\n    print(ticks_add(time.ticks_ms(), -100))\n\n    # Calculate deadline for operation and test for it\n    deadline = ticks_add(time.ticks_ms(), 200)\n    while ticks_diff(deadline, time.ticks_ms()) > 0:\n        do_a_little_of_something()\n\n    # Find out TICKS_MAX used by this port\n    print(ticks_add(0, -1))",
            "version": 0
        },
        {
            "acResult": "ticks_diff",
            "type": "function",
            "documentation": "Measure ticks difference between values returned from\n``time.ticks_ms()`` or ``ticks_us()``, as a signed value\nwhich may wrap around.\n\nExample: ``time.ticks_diff(scheduled_time, now)``\n\n:param ticks1: The value to subtract from\n:param ticks2: The value to subtract\n\nThe argument order is the same as for subtraction operator,\n``ticks_diff(ticks1, ticks2)`` has the same meaning as ``ticks1 - ticks2``.\n\n``ticks_diff()`` is designed to accommodate various usage\npatterns, among them:\n\nPolling with timeout. In this case, the order of events is known, and you\nwill deal only with positive results of :func:`time.ticks_diff()`::\n\n    # Wait for GPIO pin to be asserted, but at most 500us\n    start = time.ticks_us()\n    while pin.value() == 0:\n        if time.ticks_diff(time.ticks_us(), start) > 500:\n            raise TimeoutError\n\n\nScheduling events. In this case, :func:`time.ticks_diff()` result may be\nnegative if an event is overdue::\n\n    # This code snippet is not optimized\n    now = time.ticks_ms()\n    scheduled_time = task.scheduled_time()\n    if ticks_diff(scheduled_time, now) > 0:\n        print(\"Too early, let's nap\")\n        sleep_ms(ticks_diff(scheduled_time, now))\n        task.run()\n    elif ticks_diff(scheduled_time, now) == 0:\n        print(\"Right at time!\")\n        task.run()\n    elif ticks_diff(scheduled_time, now) < 0:\n        print(\"Oops, running late, tell task to run faster!\")\n        task.run(run_faster=True)",
            "version": 0
        }
    ],
    "types": [
        {
            "acResult": "_Cell",
            "type": "type",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "FunctionType",
            "type": "type",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "CodeType",
            "type": "type",
            "documentation": "Create a code object.  Not for the faint of heart.",
            "version": 0
        },
        {
            "acResult": "MappingProxyType",
            "type": "type",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "SimpleNamespace",
            "type": "type",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "ModuleType",
            "type": "type",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "GeneratorType",
            "type": "type",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "AsyncGeneratorType",
            "type": "type",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "CoroutineType",
            "type": "type",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "_StaticFunctionType",
            "type": "type",
            "documentation": "Fictional type to correct the type of MethodType.__func__.\n\nFunctionType is a descriptor, so mypy follows the descriptor protocol and\nconverts MethodType.__func__ back to MethodType (the return type of\nFunctionType.__get__). But this is actually a special case; MethodType is\nimplemented in C and its attribute access doesn't go through\n__getattribute__.\n\nBy wrapping FunctionType in _StaticFunctionType, we get the right result;\nsimilar to wrapping a function in staticmethod() at runtime to prevent it\nbeing bound as a method.",
            "version": 0
        },
        {
            "acResult": "MethodType",
            "type": "type",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "BuiltinFunctionType",
            "type": "type",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "WrapperDescriptorType",
            "type": "type",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "MethodWrapperType",
            "type": "type",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "MethodDescriptorType",
            "type": "type",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "ClassMethodDescriptorType",
            "type": "type",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "TracebackType",
            "type": "type",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "FrameType",
            "type": "type",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "GetSetDescriptorType",
            "type": "type",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "MemberDescriptorType",
            "type": "type",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "new_class",
            "type": "function",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "resolve_bases",
            "type": "function",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "prepare_class",
            "type": "function",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "coroutine",
            "type": "function",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "GenericAlias",
            "type": "type",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "NoneType",
            "type": "type",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "UnionType",
            "type": "type",
            "documentation": "",
            "version": 0
        }
    ],
    "typing": [
        {
            "acResult": "TypeVar",
            "type": "type",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "_SpecialForm",
            "type": "type",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "overload",
            "type": "function",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "Union",
            "type": "variable",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "Optional",
            "type": "variable",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "Tuple",
            "type": "variable",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "Generic",
            "type": "variable",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "Protocol",
            "type": "variable",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "Callable",
            "type": "variable",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "Type",
            "type": "variable",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "ClassVar",
            "type": "variable",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "Final",
            "type": "variable",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "final",
            "type": "function",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "Literal",
            "type": "variable",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "TypedDict",
            "type": "variable",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "GenericMeta",
            "type": "type",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "ParamSpecArgs",
            "type": "type",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "ParamSpecKwargs",
            "type": "type",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "ParamSpec",
            "type": "type",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "Concatenate",
            "type": "variable",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "TypeAlias",
            "type": "variable",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "TypeGuard",
            "type": "variable",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "no_type_check",
            "type": "function",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "no_type_check_decorator",
            "type": "function",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "_Alias",
            "type": "type",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "Annotated",
            "type": "variable",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "runtime_checkable",
            "type": "function",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "SupportsInt",
            "type": "type",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "SupportsFloat",
            "type": "type",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "SupportsComplex",
            "type": "type",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "SupportsBytes",
            "type": "type",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "SupportsIndex",
            "type": "type",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "SupportsAbs",
            "type": "type",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "SupportsRound",
            "type": "type",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "Sized",
            "type": "type",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "Hashable",
            "type": "type",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "Iterable",
            "type": "type",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "Iterator",
            "type": "type",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "Reversible",
            "type": "type",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "Generator",
            "type": "type",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "Awaitable",
            "type": "type",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "Coroutine",
            "type": "type",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "AwaitableGenerator",
            "type": "type",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "AsyncIterable",
            "type": "type",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "AsyncIterator",
            "type": "type",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "AsyncGenerator",
            "type": "type",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "Container",
            "type": "type",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "Collection",
            "type": "type",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "Sequence",
            "type": "type",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "MutableSequence",
            "type": "type",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "AbstractSet",
            "type": "type",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "MutableSet",
            "type": "type",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "MappingView",
            "type": "type",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "ItemsView",
            "type": "type",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "KeysView",
            "type": "type",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "ValuesView",
            "type": "type",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "ContextManager",
            "type": "type",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "AsyncContextManager",
            "type": "type",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "Mapping",
            "type": "type",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "MutableMapping",
            "type": "type",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "IO",
            "type": "type",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "BinaryIO",
            "type": "type",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "TextIO",
            "type": "type",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "ByteString",
            "type": "type",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "Match",
            "type": "type",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "Pattern",
            "type": "type",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "get_type_hints",
            "type": "function",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "get_origin",
            "type": "function",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "get_args",
            "type": "function",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "cast",
            "type": "function",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "NamedTuple",
            "type": "type",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "_TypedDict",
            "type": "type",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "NewType",
            "type": "function",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "type_check_only",
            "type": "function",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "ForwardRef",
            "type": "type",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "is_typeddict",
            "type": "function",
            "documentation": "",
            "version": 0
        }
    ],
    "typing_extensions": [
        {
            "acResult": "_SpecialForm",
            "type": "type",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "runtime_checkable",
            "type": "function",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "Protocol",
            "type": "variable",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "Final",
            "type": "variable",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "final",
            "type": "function",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "Literal",
            "type": "variable",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "IntVar",
            "type": "function",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "_TypedDict",
            "type": "type",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "TypedDict",
            "type": "variable",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "get_type_hints",
            "type": "function",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "get_args",
            "type": "function",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "get_origin",
            "type": "function",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "Annotated",
            "type": "variable",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "_AnnotatedAlias",
            "type": "variable",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "SupportsIndex",
            "type": "type",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "ParamSpecArgs",
            "type": "type",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "ParamSpecKwargs",
            "type": "type",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "ParamSpec",
            "type": "type",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "Concatenate",
            "type": "variable",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "TypeAlias",
            "type": "variable",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "TypeGuard",
            "type": "variable",
            "documentation": "",
            "version": 0
        }
    ],
    "uarray": [],
    "ucollections": [],
    "uerrno": [],
    "urandom": [],
    "ustruct": [],
    "usys": [],
    "utime": [],
    "_typeshed": [
        {
            "acResult": "IdentityFunction",
            "type": "type",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "SupportsLessThan",
            "type": "type",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "SupportsDivMod",
            "type": "type",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "SupportsRDivMod",
            "type": "type",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "SupportsLenAndGetItem",
            "type": "type",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "SupportsItems",
            "type": "type",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "SupportsKeysAndGetItem",
            "type": "type",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "SupportsGetItem",
            "type": "type",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "SupportsItemAccess",
            "type": "type",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "HasFileno",
            "type": "type",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "SupportsRead",
            "type": "type",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "SupportsReadline",
            "type": "type",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "SupportsNoArgReadline",
            "type": "type",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "SupportsWrite",
            "type": "type",
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "NoneType",
            "type": "type",
            "documentation": "",
            "version": 0
        }
    ]
}