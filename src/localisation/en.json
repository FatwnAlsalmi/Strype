{
    "messageBannerMessage": {
        "deleteLargeCode": "You just deleted a large piece of code. If you didn't mean to, you can:",
        "uploadSuccessMicrobit": "Upload to micro:bit completed.",
        "uploadFailureMicrobit": "Upload to micro:bit failed with error \"{errorMsg}\"",
        "noUndo" : "There is no undo action avaialble.",
        "noRedo": "There is no redo action available.",
        "uploadEditorFileError": "Something wrong happened during editor file upload: {errorMsg}. Your code has not changed.",
        "uploadEditorFileNotSupported": "This file format is not supported. Expected file extension: {list}. Your code has not changed.",
        "uploadEditorFileSuccess": "The editor file upload is successful. Your code has been loaded.",
        "forbiddenFrameMove": "The selected frame(s) cannot be moved because it results in illegal code.",
        "functionFrameCantDelete": "A function definition frame cannot be deleted from its body."
    },
    "buttonLabel":{
        "undo": "Undo",
        "yes": "Yes",
        "no": "No",
        "ok": "OK",
        "uploadToMicrobit": "Upload to micro:bit",
        "sendToMicrobit": "Send to micro:bit",
        "downloadHex": "Convert to Hex file",
        "downloadPython": "Convert to Python file",
        "skipTutorial": "Skip Tutorial",
        "next": "Next",
        "startCoding": "Start Coding!",
        "addFrame": "&larr; Add frame",
        "insertInFrame": "&larr; Insert in frame" 
    },
    "action": {
        "uploadingToMicrobit": "Uploading to micro:bit ..."
    },
    "errorMessage": {
        "wrongDataFormat": "the data format cannot be interpreted by Strype",
        "stateDataIntegrity" : "the data doesn't have integrity to be interpreted by Strype",
        "dataNotObject" : "the data doesn't describe an object",
        "emptyEditableSlot": "Input slot cannot be empty",
        "emptyFrameBody": "Body cannot be empty",
        "noValidChildFrameBody": "Body needs to have at least one enabled / non-comment frame ",
        "errorTitle": "Error!",
        "errorUserDefinedFuncMsg": "User-defined function\nthis function definition contains errors",
        "errorUserDefinedVarMsg": "User-defined variable\none of this variable assignment contains errors"
    },
    "appMessage": {
        "editorFileUpload": "Uploading your file to the editor...",
        "editorConfirmChangeCode": "Current editor's content will be permanently lost.\nDo you want to continue?",
        "editorFileUploadWrongVersion": "This code has been produced with a different version of the editor.\nImporting may result in errors.\n\nDo you still want to continue?",
        "enableInnerDisabledFrameConfirm": "This action will enable the complete group of disabled frames in which this frame belongs.\nDo you want to continue?",
        "importsContainer": "Imports:",
        "funcDefsContainer": "Function definitions:",
        "mainContainer": "My code:",
        "preCompiledErrorNeedFix": "Please fix existing errors first.",
        "noWebUSB": "This browser does not support webUSB connections. Please use a browser such as Google Chrome.",
        "emptyCodeError" : "The code cannot be empty."
    },
    "contextMenu": {
        "cut": "Cut",
        "copy": "Copy",
        "duplicate": "Duplicate Frame",
        "paste": "Paste Frame",
        "enable": "Enable Frame",
        "disable": "Disable Frame",
        "undo": "Undo Frame",
        "redo": "Redo Frame",
        "delete": "Delete Frame"
    },
    "appMenu": {
        "defaultProjName": "My project",
        "loadProject": "Load project",
        "saveProject": "Save project",
        "prefs": "Preferences",
        "lang": "Language: "
    },
    "tutorialExplanation": {
        "commands": "Here you can find all the frames with their keyboard shortcut!",
        "codeEditor": "This is where you write your code",
        "editorCaret": "The blue cursor indicates where you are editing now",
        "editorMenus": "More options for your project"
    },

    "autoCompletion": {
        "myFunctions": "My Functions",
        "myVariables": "My Variables"
    },

    "apidiscovery" : {
        "generatedColdeLabel": "Code: ",
        "microbitAPI": {
            "led_label": "LED display",
            "led_doc": "The 5x5 LED display of the micro:bit.",
            "ledScroll_label":"Scroll text on the display",
            "ledScroll_doc":"Scrolls <b>value</b> horizontally on the display. If <b>value</b> is an integer or float it is first converted to a string using <i>str()</i>. The <b>delay</b> parameter controls how fast the text is scrolling.<br/>If <b>wait</b> is <i>True</i>, this function will block until the animation is finished, otherwise the animation will happen in the background.<br/>If <b>loop</b> is <i>True</i>, the animation will repeat forever.<br/>If <b>monospace</b> is <i>True</i>, the characters will all take up 5 pixel-columns in width, otherwise there will be exactly 1 blank pixel-column between each character as they scroll.<br/>Note that the <b>wait</b>, <b>loop</b> and <b>monospace</b> arguments must be specified using their keyword.",
            "ledShowIm_label":"Display an image",
            "ledShowIm_doc":"Display the image passed as parameter.",
            "ledShowImTxt_label":"Display a text or an image",
            "ledShowImTxt_doc":"If <b>value</b> is a string, float or integer, display letters/digits in sequence. Otherwise, if <b>value</b> is an iterable sequence of images, display these images in sequence. Each letter, digit or image is shown with delay milliseconds between them.<br/>If <b>wait</b> is <i>True</i>, this function will block until the animation is finished, otherwise the animation will happen in the background.<br/>If <b>loop</b> is <i>True</i>, the animation will repeat forever.<br/>If <b>clear</b> is <i>True</i>, the display will be cleared after the iterable has finished.<br/>Note that the <b>wait</b>, <b>loop</b> and <b>clear</b> arguments must be specified using their keyword.",
            "ledGetPix_label": "Get a LED brightness",
            "ledGetPix_doc": "Return the brightness of the LED at column <b>x</b> and row <b>y</b> as an integer between 0 (off) and 9 (bright).",
            "ledSetPix_label": "Set a LED brightness",
            "ledSetPix_doc": "Set the brightness of the LED at column <b>x</b> and row <b>y</b> to value, which has to be an integer between 0 and 9.",
            "ledClear_label": "Clear all LEDs off",
            "ledClear_doc": "Set the brightness of all LEDs to 0 (off).",	
            "ledOn_label":"Turn the display on",
            "ledOn_doc":"",
            "ledOff_label": "Turn the display off",
            "ledOff_doc": "Use <i>off()</i> to turn off the display (thus allowing you to re-use the GPIO pins associated with the display for other purposes).",
            "ledIsOn_label": "Check if the display is turned on",
            "ledIsOn_doc": "Returns <i>True</i> if the display is on, otherwise returns <i>False</i>.",
            "ledReadLight_label": "Get the light level on the display",
            "ledReadLight_doc": "Use the display’s LEDs in reverse-bias mode to sense the amount of light falling on the display. Returns an integer between 0 and 255 representing the light level, with larger meaning more light.",  
            "Img_label": "Image",
            "Img_doc": "Image on the display.",
            "ImgNew_label": "Create new image",
            "ImgNew_doc": "Self-definied images creation functionalities",
            "ImgEx_label": "Manipulate image",
            "ImgEx_doc": "Built-in images library and functionality on existing images",
            "ImgStr_label": "Create an image (from a text value)",
            "ImgStr_doc": "If string is used, it has to consist of digits 0-9 arranged into lines, describing the image, for example:<br/><i>image = Image(\"90009:09090:00900:09090:90009\")</i><br/>will create a 5×5 image of an X. The end of a line is indicated by a colon. It’s also possible to use a newline (\\n) to indicate the end of a line like this:<br/><i>image = Image(\"90009\\n09090\\n00900\\n09090\\n90009\")</i>",
            "ImgParam_label": "Create an image (from parameter values)",
            "ImgParam_doc": "This other form creates an empty image with <b>width</b> columns and <b>height</b> rows. Optionally <b>buffer</b> can be an array of <b>width</b> x <b>height</b> integers in range 0-9 to initialize the image:<br/><i>Image(2, 2, b'\\x08\\x08\\x08\\x08')</i><br/>or:<br/><i>Image(2, 2, bytearray([9,9,9,9]))</i><br/>Will create a 2 x 2 pixel image at full brightness.",
            "ImgBuiltin_label": "Built-in images library",
            "ImgBuiltin_doc": "All the built-in images provided by micro:bit",
            "Img01_label": "Heart",
            "Img02_label": "Small heart",
            "Img03_label": "Happy face",
            "Img04_label": "Smiley face",
            "Img05_label": "Sad face",
            "Img06_label": "Confused face",
            "Img07_label": "Angry face",
            "Img08_label": "Sleepy face",
            "Img09_label": "Suprised face",
            "Img10_label": "Silly face",
            "Img11_label": "Fabulous face",
            "Img12_label": "Meh face",
            "Img13_label": "Yes tick",
            "Img14_label": "No cross",
            "Img15_label": "12 o'clock",
            "Img16_label": "11 o'clock",
            "Img17_label": "10 o'clock",
            "Img18_label": "9 o'clock",
            "Img19_label": "8 o'clock",
            "Img20_label": "7 o'clock",
            "Img21_label": "6 o'clock",
            "Img22_label": "5 o'clock",
            "Img23_label": "4 o'clock",
            "Img24_label": "3 o'clock",
            "Img25_label": "2 o'clock",
            "Img26_label": "1 o'clock",
            "Img27_label": "North arrow",
            "Img28_label": "North East arrow",
            "Img29_label": "East arrow",
            "Img30_label": "South East arrow",
            "Img31_label": "South arrow",
            "Img32_label": "South West arrow",
            "Img33_label": "West arrow",
            "Img34_label": "North West arrow",
            "Img35_label": "Triangle",
            "Img36_label": "Left triangle",
            "Img37_label": "Chessboard",
            "Img38_label": "Diamond",
            "Img39_label": "Small diamond",
            "Img40_label": "Square",
            "Img41_label": "Small square",
            "Img42_label": "Rabbit",
            "Img43_label": "Cow",
            "Img44_label": "Music crotchet",
            "Img45_label": "Music quaver",
            "Img46_label": "Music quavers",
            "Img47_label": "Fork",
            "Img48_label": "Xmas",
            "Img49_label": "PacMan",
            "Img50_label": "Target",
            "Img51_label": "T-shirt",
            "Img52_label": "Rollerskate",
            "Img53_label": "Duck",
            "Img54_label": "House",
            "Img55_label": "Tortoise",
            "Img56_label": "Butterfly",
            "Img57_label": "Stick man",
            "Img58_label": "Ghost",
            "Img59_label": "Sword",
            "Img60_label": "Giraffe",
            "Img61_label": "Skull",
            "Img62_label": "Umbrella",
            "Img63_label": "Snake",
            "ImgClocks_label": "All clock images",
            "ImgArrows_label": "All arrow images",
            "ImgClocks_doc": "A collection of images containing all the clock images.",
            "ImgArrows_doc": "A collection of images containing all the arrow images.",
            "Img01_doc": "",
            "Img02_doc": "",
            "Img03_doc": "",
            "Img04_doc": "",
            "Img05_doc": "",
            "Img06_doc": "",
            "Img07_doc": "",
            "Img08_doc": "",
            "Img09_doc": "",
            "Img10_doc": "",
            "Img11_doc": "",
            "Img12_doc": "",
            "Img13_doc": "",
            "Img14_doc": "",
            "Img15_doc": "",
            "Img16_doc": "",
            "Img17_doc": "",
            "Img18_doc": "",
            "Img19_doc": "",
            "Img20_doc": "",
            "Img21_doc": "",
            "Img22_doc": "",
            "Img23_doc": "",
            "Img24_doc": "",
            "Img25_doc": "",
            "Img26_doc": "",
            "Img27_doc": "",
            "Img28_doc": "",
            "Img29_doc": "",
            "Img30_doc": "",
            "Img31_doc": "",
            "Img32_doc": "",
            "Img33_doc": "",
            "Img34_doc": "",
            "Img35_doc": "",
            "Img36_doc": "",
            "Img37_doc": "",
            "Img38_doc": "",
            "Img39_doc": "",
            "Img40_doc": "",
            "Img41_doc": "",
            "Img42_doc": "",
            "Img43_doc": "",
            "Img44_doc": "",
            "Img45_doc": "",
            "Img46_doc": "",
            "Img47_doc": "",
            "Img48_doc": "",
            "Img49_doc": "",
            "Img50_doc": "",
            "Img51_doc": "",
            "Img52_doc": "",
            "Img53_doc": "",
            "Img54_doc": "",
            "Img55_doc": "",
            "Img56_doc": "",
            "Img57_doc": "",
            "Img58_doc": "",
            "Img59_doc": "",
            "Img60_doc": "",
            "Img61_doc": "",
            "Img62_doc": "",
            "Img63_doc": "",
            "ImgW_label": "Get image width",
            "ImgW_doc": "Return the number of columns in the image.", 
            "ImgH_label": "Get image height",
            "ImgH_doc": "Return the numbers of rows in the image",
            "ImgSetPix_label": "Set the brightness value of a pixel in the image",
            "ImgSetPix_doc": "Set the brightness of the pixel at column <b>x</b> and row <b>y</b> to the value, which has to be between 0 (dark) and 9 (bright). This method will raise an exception when called on any of the built-in read-only images, like Image.HEART.",
            "ImgGetPix_label": "Get the brightness value of a pixel in the image",
            "ImgGetPix_doc": "Return the brightness of pixel at column <b>x</b> and row <b>y</b> as an integer between 0 and 9.",
            "ImgCpy_label": "Copy the image",
            "ImgCpy_doc": "Return an exact copy of the image.",
            "imgInv_label": "Invert the image's brightness",
            "imgInv_doc": "Return a new image by inverting the brightness of the pixels in the source image.",
            "ImgLeft_label": "Shift image to the left",
            "ImgLeft_doc": "Return a new image created by shifting the picture left by <b>n</b> columns.",
            "ImgRight_label": "Shift image to the right",
            "ImgRight_doc": "Return a new image created by shifting the picture right by <b>n</b> columns",
            "ImgUp_label": "Shift image upwards",
            "ImgUp_doc": "Return a new image created by shifting the picture up by <b>n</b> rows.",
            "imgDown_label": "Shift image downwards",
            "imgDown_doc": "Return a new image created by shifting the picture down by <b>n</b> rows.",
            "ImgCrop_label": "Crop image",
            "ImgCrop_doc": "Return a new image by cropping the picture to a width of <b>w</b> and a height of <b>h</b>, starting with the pixel at column <b>x</b> and row <b>y</b>.",
            "ImgFill_label": "Fill image",
            "ImgFill_doc": "Set the brightness of all the pixels in the image to the value, which has to be between 0 (dark) and 9 (bright). This method will raise an exception when called on any of the built-in read-only images, like Image.HEART.",
            "button_label": "Button",    
            "button_doc": "There are two buttons on the board, called <i>button_a</i> (left button) and <i>button_b</i> (right button). The example here are for <i>button_a</i>, but they are valid for <i>button_b</i> as well. You may replace <i>button_a</i> by <i>button_b</i> in your code.",
            "buttonIsPress_label": "Know if a button is presssed",
            "buttonIsPress_doc": "Returns <i>True</i> if the specified button button is currently being held down, and <i>False</i> otherwise.",
            "buttonWasPress_label": "Know if a button was pressed",
            "buttonWasPress_doc": "Returns <i>True</i> or <i>False</i> to indicate if the button was pressed (went from up to down) since the device started or the last time this method was called. Calling this method will clear the press state so that the button must be pressed again before this method will return <i>True</i> again.",
            "buttonGetPress_label": "Get the number of button presses",
            "buttonGetPress_doc": "Returns the running total of button presses, and resets this total to zero before returning.",
            "audio_label": "Audio (module)",
            "audio_doc": "This module allows you play sounds from a speaker attached to the Microbit. In order to use the audio module you will need to provide a sound source.<br/><br/>A sound source is an iterable (sequence, like list or tuple, or a generator) of frames, each of 32 samples. The audio modules plays samples at the rate of 7812.5 samples per second, which means that it can reproduce frequencies up to 3.9kHz.",
            "audioPlay_label": "Play some audio",
            "audioPlay_doc": "Play the source to completion.<br/><b>source</b> is an iterable, each element of which must be an <b>AudioFrame</b>.<br/>If <b>wait</b> is <i>True</i>, this function will block until the source is exhausted.<br/><b>pin</b> specifies which pin the speaker is connected to.<br/><b>return_pin</b> specifies a differential pin to connect to the speaker instead of ground.",
            "audioFrame_label": "Get the audio frame object containing the audio samples",
            "audioFrame_doc": "An AudioFrame object is a list of 32 samples each of which is a signed byte (whole number between -128 and 127).<br/>It takes just over 4 ms to play a single frame.",
            "acc_label": "Accelerometer",
            "acc_doc": "This object gives you access to the on-board accelerometer. The accelerometer also provides convenience functions for detecting gestures. The recognised gestures are: <i>up</i>, <i>down</i>, <i>left</i>, <i>right</i>, <i>face up</i>, <i>face down</i>, <i>freefall</i>, <i>3g</i>, <i>6g</i>, <i>8g</i>, <i>shake</i>.<br/>By default MicroPython sets the accelerometer range to +/- 2g, changing the accelerometer range is currently not possible in MicroPython. The accelerometer returns a value in the range 0..1024 for each axis, which is then scaled accordingly.",
            "accGest_label": "Get the current gesture",
            "accGest_doc": "Return the name of the current gesture (one these values: <i>up</i>, <i>down</i>, <i>left</i>, <i>right</i>, <i>face up</i>, <i>face down</i>, <i>freefall</i>, <i>3g</i>, <i>6g</i>, <i>8g</i>, <i>shake</i>).",
            "accXYZ_label": "Get the acceleration measurements",
            "accXYZ_doc": "Get the acceleration measurements in all axes at once, as a three-element tuple of integers ordered as X, Y, Z. By default the accelerometer is configured with a range of +/- 2g, and so X, Y, and Z will be within the range of +/-2000mg.",
            "accX_label": "Get X axis acceleration value",
            "accX_doc": "Get the acceleration measurement in the X axis, as a positive or negative integer, depending on the direction. The measurement is given in milli-g. By default the accelerometer is configured with a range of +/- 2g, and so this method will return within the range of +/- 2000mg.",
            "accY_label": "Get Y axis acceleration value",
            "accY_doc": "Get the acceleration measurement in the Y axis, as a positive or negative integer, depending on the direction. The measurement is given in milli-g. By default the accelerometer is configured with a range of +/- 2g, and so this method will return within the range of +/- 2000mg.",
            "accZ_label": "Get Z axis acceleration value",
            "accZ_doc": "Get the acceleration measurement in the Z axis, as a positive or negative integer, depending on the direction. The measurement is given in milli-g. By default the accelerometer is configured with a range of +/- 2g, and so this method will return within the range of +/- 2000mg.",
            "comp_label": "Compass",
            "comp_doc": "This module lets you access the built-in electronic compass. Before using, the compass should be calibrated, otherwise the readings may be wrong.",
            "compHead_label": "Get heading",
            "compHead_doc": "Gives the compass heading, calculated from the above readings, as an integer in the range from 0 to 360, representing the angle in degrees, clockwise, with north as 0.",
            "compIsCalib_label": "Know if the compass is calibrated",
            "compIsCalib_doc": "Returns <i>True</i> if the compass has been successfully calibrated, and returns <i>False</i> otherwise.",
            "compCalib_label": "Calibrate the compass",
            "compCalib_doc": "Starts the calibration process. An instructive message will be scrolled to the user after which they will need to rotate the device in order to draw a circle on the LED display.",
            "compClear_label": "Clear the current compass calibration",
            "compClear_doc": "Undoes the calibration, making the compass uncalibrated again.",
            "compGetX_label": "Get X axis magnetic field value",
            "compGetX_doc": "Gives the reading of the magnetic field strength on the X axis in nano tesla, as a positive or negative integer, depending on the direction of the field.",
            "compGetY_label": "Get Y axis magnetic field value",
            "compGetY_doc": "Gives the reading of the magnetic field strength on the Y axis in nano tesla, as a positive or negative integer, depending on the direction of the field.",
            "compGetZ_label": "Get Z axis magnetic field value",
            "compGetZ_doc": "Gives the reading of the magnetic field strength on the Z axis in nano tesla, as a positive or negative integer, depending on the direction of the field.",
            "comGetField_label": "Get magnetic field strength value",
            "comGetField_doc": "Returns an integer indication of the magnitude of the magnetic field around the device in nano tesla.",
            "music_label": "Music (module)",
            "music_doc": "You can use the music module to play simple tunes, provided that you connect a speaker to your board (for micro:bit v1).",
            "musicPlay_label": "Play melody",
            "musicPlay_doc": "Plays music containing the musical DSL defined in the <a class=\"api-link\" class=\"api-link\" target=\"_blank\" href=\"https://microbit-micropython.readthedocs.io/en/v1.0.1/music.html\">online documentation</a>.<br/>If <b>music</b> is a string it is expected to be a single note such as <i>'c1:4'</i>.<br/>If <b>music</b> is specified as a list of notes (as defined in the section on the musical DSL, see the <a class=\"api-link\" target=\"_blank\" href=\"https://microbit-micropython.readthedocs.io/en/v1.0.1/music.html\">online documentation</a>) then they are played one after the other to perform a melody.<br/>In both cases, the <b>duration</b> and <b>octave</b> values are reset to their defaults before the music (whatever it may be) is played.<br/>An optional argument to specify the output pin (<b>pin</b>) can be used to override the default of <i>microbit.pin0</i>.<br/>If <b>wait</b> is set to <i>True</i>, this function is blocking.<br/>If <b>loop</b> is set to <i>True</i>, the tune repeats until stop is called or the blocking call is interrupted.",
            "musicSetTempo_label": "Set tempo",
            "musicSetTempo_doc": "Sets the approximate tempo for playback.<br/>A number of <b>ticks</b> (expressed as an integer) constitute a beat. Each beat is to be played at a certain frequency per minute (expressed as the more familiar <b>bpm</b> - beats per minute - also as an integer).<br/>Suggested default values allow the following useful behaviour:<br/><i>music.set_tempo()</i> - reset the tempo to default of ticks = 4, bpm = 120<br/><i>music.set_tempo(ticks=8)</i> - change the \"definition\" of a beat<br/></i>music.set_tempo(bpm=180)</i> - just change the tempo<br/>To work out the length of a tick in milliseconds is very simple arithmetic: 60000/bpm/ticks_per_beat . For the default values that’s 60000/120/4 = 125 milliseconds or 1 beat = 500 milliseconds.",
            "musicGetTempo_label": "Get current tempo",
            "musicGetTempo_doc": "Gets the current tempo as a tuple of integers: <i>(ticks, bpm)</i>.",
            "musicStop_label": "Stop music",
            "musicStop_doc": "Stops all music playback on a given pin, eg. <i>music.stop(pin1)</i>. If no pin is given, eg. <i>music.stop()</i>, <i>pin0</i> is assumed.",
            "musicPitch_label": "Play pitch",
            "musicPitch_doc": "Plays a pitch at the integer frequency given for the specified number of milliseconds. For example, if the <b>frequency</b> is set to 440 and the length (<b>duration</b>) to 1000 then we hear a standard concert A for one second.<br/>Note that you can only play one pitch on one <b>pin</b> at any one time.<br/>If <b>wait</b> is set to <i>True</i>, this function is blocking.<br/>If <b>duration</b> is negative the pitch is played continuously until either the blocking call is interrupted or, in the case of a background call, a new frequency is set or stop is called.",
            "musicReset_label": "Reset music settings",
            "musicReset_doc": "Resets the state of the following attributes in the following way:<br/><i>ticks = 4<br/>bpm = 120<br/>duration = 4<br/>octave = 4</i>",
            "pin_label": "Pin",
            "pin_doc": "The pins are your board’s way to communicate with external devices connected to it. There are 19 pins for your disposal, numbered 0-16 and 19-20. Pins 17 and 18 are not available. The pins are of 3 types: digital, analog or touch. Analog pins are used for numerical values between 0 and 1023. Digital pins are used for binary values (0 or 1). Touch pins are used for boolean values indicating if the pin is touched with a finger. Note that analog pins gets the functionalities of the digital pins too, and that touch pins get the functionalities of analog and digital functionalities too.",
            "pinDig_label": "A digital pin",
            "pinDig_doc": "The digital pins are pins 5 to 9, 11 to 16 and 19 to 20. The example here are for pin 5, but they are valid for other pins as well. You may replace <i>pin5</i> by <i>pin6</i>, for example, in your code.",
            "pinDigR_label": "Read digital input",
            "pinDigR_doc": "Return 1 if the pin is high, and 0 if it’s low.",
            "pintDigW_label": "Write digital output",
            "pintDigW_doc": "Set the pin to high if <b>value</b> is 1, or to low, if it is 0.",
            "pinAna_label": "An analog pin",
            "pinAna_doc": "The analog pins are pins 3, 4 and 10. The example here are for pin 3, but they are valid for other pins as well. You may replace <i>pin3</i> by <i>pin4</i>, for example, in your code.",
            "pinAnaR_label": "Read analog input",
            "pinAnaR_doc": "Read the voltage applied to the pin, and return it as an integer between 0 (meaning 0V) and 1023 (meaning 3.3V).",
            "pinAnaW_label": "Write analog output",
            "pinAnaW_doc": "Output a PWM signal on the pin, with the duty cycle proportional to the provided <b>value</b>. The <b>value</b> may be either an integer or a floating point number between 0 (0% duty cycle) and 1023 (100% duty).",
            "pinAnaTMls_label": "Set millisecond period",
            "pinAnaTMls_doc": "Set the period of the PWM signal being output to <b>period</b> in milliseconds. The minimum valid value is 1ms.",
            "pinAnaTMcs_label": "Set microsecond period",
            "pinAnaTMcs_doc": "Set the period of the PWM signal being output to <b>period</b> in microseconds. The minimum valid value is 256µs.",
            "pinAnaRD_label": "Read digital input",
            "pinAnaRD_doc": "Return 1 if the pin is high, and 0 if it’s low.",
            "pinAnaWD_label": "Write digital output",
            "pinAnaWD_doc": "Set the pin to high if <b>value</b> is 1, or to low, if it is 0.",
            "pinTou_label": "A touch pin",
            "pinTou_doc": "The touch pins are pins 0 to 2. The example here are for pin 0, but they are valid for other pins as well. You may replace <i>pin0</i> by <i>pin1</i>, for example, in your code.",
            "pinTouR_label": "Know if the pin is touched",
            "pinTouR_doc": "Return <i>True</i> if the pin is being touched with a finger, otherwise return <i>False</i>.<br/>This test is done by measuring how much resistance there is between the pin and ground. A low resistance gives a reading of True. To get a reliable reading using a finger you may need to touch the ground pin with another part of your body, for example your other hand.",
            "pinTouRA_label": "Read analog input",
            "pinTouRA_doc": "Read the voltage applied to the pin, and return it as an integer between 0 (meaning 0V) and 1023 (meaning 3.3V).",
            "pinTouWA_label": "Write analog output",
            "pinTouWA_doc": "Output a PWM signal on the pin, with the duty cycle proportional to the provided <b>value</b>. The <b>value</b> may be either an integer or a floating point number between 0 (0% duty cycle) and 1023 (100% duty).",
            "pinTouTMls_label": "Set millisecond period",
            "pinTouTMls_doc": "Set the period of the PWM signal being output to <b>period</b> in milliseconds. The minimum valid value is 1ms.",
            "pinTouTMcs_label": "Set microsecond period",
            "pinTouTMcs_doc": "Set the period of the PWM signal being output to <b>period</b> in microseconds. The minimum valid value is 256µs.",
            "pinTouRD_label": "Read digital input",
            "pinTouRD_doc": "Return 1 if the pin is high, and 0 if it’s low.",
            "pintTouWD_label": "Write digital output",
            "pintTouWD_doc": "Set the pin to high if <b>value</b> is 1, or to low, if it is 0.",
            "speech_label": "Talking and singing (speech module)",
            "speech_doc": "<u>WARNING! This is still work in progress</u>.<br/>The quality of the speech is not great, merely \"good enough\". Given the constraints of the device you may encounter memory errors and / or unexpected extra sounds during playback. This module makes microbit talk, sing and make other speech like sounds provided that you connect a speaker to your board as shown in <a class=\"api-link\" target=\"_blank\" href=\"https://microbit-micropython.readthedocs.io/en/v1.0.1/speech.html\">this page</a>. The speech synthesiser can produce around 2.5 seconds worth of sound from up to 255 characters of textual input. To access this module you need to:<br/><i>import speech</i>",
            "speechSay_label": "Say words",
            "speechSay_doc": "Say the English words in the string <b>words</b>. The result is semi-accurate for English. Override the optional <b>pitch</b>, <b>speed</b>, <b>mouth</b> and <b>throat</b> settings to change the timbre (quality) of the voice. This is a short-hand equivalent of: <i>speech.pronounce(speech.translate(words))</i><br/>Look at the <a class=\"api-link\" href=\"https://microbit-micropython.readthedocs.io/en/v1.0.1/speech.html\" target=\"_blank\">online documentation</a> for a detailed explanation on how to use these parameters.",
            "speechSing_label": "Sing something",
            "speechSing_doc": "Sing the phonemes contained in the string <b>phonemes</b>. Override the optional <b>pitch</b>, <b>speed</b>, <b>mouth</b> and <b>throat</b> settings to change the timbre (quality) of the voice. Look at the <a class=\"api-link\" href=\"https://microbit-micropython.readthedocs.io/en/v1.0.1/speech.html\" target=\"_blank\">online documentation</a> for a detailed explanation on how to use these parameters.",
            "speechT_label": "Translate words to phonemes",
            "speechT_doc": "Given English words in the string <b>words</b>, return a string containing a best guess at the appropriate phonemes to pronounce. The output is generated from <a class=\"api-link\" href=\"https://microbit-micropython.readthedocs.io/en/v1.0.1/speech.html#phonemes\" target=\"_blank\">this text to phoneme translation table</a>.<br/>This function should be used to generate a first approximation of phonemes that can be further hand-edited to improve accuracy, inflection and emphasis.",
            "speechP_label": "Pronounce phonemes",
            "speechP_doc": "Pronounce the phonemes in the string <b>phonemes</b>. See <a class=\"api-link\" href=\"https://microbit-micropython.readthedocs.io/en/v1.0.1/speech.html#phonemes\" target=\"_blank\">this</a> for details of how to use phonemes to finely control the output of the speech synthesiser. Override the optional <b>pitch</b>, <b>speed</b>, <b>mouth</b> and <b>throat</b> settings to change the timbre (quality) of the voice. Look at the <a class=\"api-link\" href=\"https://microbit-micropython.readthedocs.io/en/v1.0.1/speech.html\" target=\"_blank\">online documentation</a> for a detailed explanation on how to use these parameters."
        }
    },
    "commandTabs": {
        "0": "Add Frame",
        "1": "Explore micro:bit"
    }
}