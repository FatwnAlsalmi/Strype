{
    "audio": [],
    "random": [
        {
            "acResult": "getrandbits",
            "type": [
                "function"
            ],
            "documentation": "Generate an integer with ``n`` random bits.\n\nExample: ``random.getrandbits(1)``\n\n:param n: A value between 1-30 (inclusive).",
            "version": 0,
            "params": [
                {
                    "name": "n"
                }
            ]
        },
        {
            "acResult": "seed",
            "type": [
                "function"
            ],
            "documentation": "Initialize the random number generator.\n\nExample: ``random.seed(0)``\n\n:param n: The integer seed\n\nThis will give you reproducibly deterministic randomness from a given starting\nstate (``n``).",
            "version": 0,
            "params": [
                {
                    "name": "n"
                }
            ]
        },
        {
            "acResult": "randint",
            "type": [
                "function"
            ],
            "documentation": "Choose a random integer between ``a`` and ``b`` inclusive.\n\nExample: ``random.randint(0, 9)``\n\n:param a: Start value for the range (inclusive)\n:param b: End value for the range (inclusive)\n\nAlias for ``randrange(a, b + 1)``.",
            "version": 0,
            "params": [
                {
                    "name": "a"
                },
                {
                    "name": "b"
                }
            ]
        },
        {
            "acResult": "randrange",
            "type": [
                "function",
                "function"
            ],
            "documentation": "Choose a randomly selected integer between zero and up to (but not\nincluding) ``stop``.\n\nExample: ``random.randrange(10)``\n\n:param stop: End value for the range (exclusive)",
            "version": 0,
            "params": [
                {
                    "name": "stop"
                }
            ]
        },
        {
            "acResult": "choice",
            "type": [
                "function"
            ],
            "documentation": "Choose a random element from the non-empty sequence ``seq``.\n\nExample: ``random.choice([Image.HAPPY, Image.SAD])``\n\n:param seq: A sequence.\n\nIf ``seq`` is  empty, raises ``IndexError``.",
            "version": 0,
            "params": [
                {
                    "name": "seq"
                }
            ]
        },
        {
            "acResult": "random",
            "type": [
                "function"
            ],
            "documentation": "Generate a random floating point number in the range [0.0, 1.0).\n\nExample: ``random.random()``\n\n:return: The random floating point number",
            "version": 0,
            "params": [
                {
                    "name": "self"
                }
            ]
        },
        {
            "acResult": "uniform",
            "type": [
                "function"
            ],
            "documentation": "Return a random floating point number between ``a`` and ``b`` inclusive.\n\nExample: ``random.uniform(0, 9)``\n\n:param a: Start value for the range (inclusive)\n:param b: End value for the range (inclusive)",
            "version": 0,
            "params": [
                {
                    "name": "a"
                },
                {
                    "name": "b"
                }
            ]
        }
    ],
    "math": [
        {
            "acResult": "acos",
            "type": [
                "function"
            ],
            "documentation": "Calculate the inverse cosine.\n\nExample: ``math.acos(1)``\n\n:param x: A number\n:return: The inverse cosine of ``x``",
            "version": 0,
            "params": [
                {
                    "name": "x"
                }
            ]
        },
        {
            "acResult": "asin",
            "type": [
                "function"
            ],
            "documentation": "Calculate the inverse sine.\n\nExample: ``math.asin(0)``\n\n:param x: A number\n:return: The inverse sine of ``x``",
            "version": 0,
            "params": [
                {
                    "name": "x"
                }
            ]
        },
        {
            "acResult": "atan",
            "type": [
                "function"
            ],
            "documentation": "Calculate the inverse tangent.\n\nExample: ``math.atan(0)``\n\n:param x: A number\n:return: The inverse tangent of ``x``",
            "version": 0,
            "params": [
                {
                    "name": "x"
                }
            ]
        },
        {
            "acResult": "atan2",
            "type": [
                "function"
            ],
            "documentation": "Calculate the principal value of the inverse tangent of ``y/x``.\n\nExample: ``math.atan2(0, -1)``\n\n:param y: A number\n:param x: A number\n:return: The principal value of the inverse tangent of ``y/x``",
            "version": 0,
            "params": [
                {
                    "name": "y"
                },
                {
                    "name": "x"
                }
            ]
        },
        {
            "acResult": "ceil",
            "type": [
                "function"
            ],
            "documentation": "Round a number towards positive infinity.\n\nExample: ``math.ceil(0.1)``\n\n:param x: A number\n:return: ``x`` rounded towards positive infinity.",
            "version": 0,
            "params": [
                {
                    "name": "x"
                }
            ]
        },
        {
            "acResult": "copysign",
            "type": [
                "function"
            ],
            "documentation": "Calculate ``x`` with the sign of ``y``.\n\nExample: ``math.copysign(1, -1)``\n\n:param x: A number\n:param y: The source of the sign for the return value\n:return: ``x`` with the sign of ``y``",
            "version": 0,
            "params": [
                {
                    "name": "x"
                },
                {
                    "name": "y"
                }
            ]
        },
        {
            "acResult": "cos",
            "type": [
                "function"
            ],
            "documentation": "Calculate the cosine of ``x``.\n\nExample: ``math.cos(0)``\n\n:param x: A number\n:return: The cosine of ``x``",
            "version": 0,
            "params": [
                {
                    "name": "x"
                }
            ]
        },
        {
            "acResult": "degrees",
            "type": [
                "function"
            ],
            "documentation": "Convert radians to degrees.\n\nExample: ``math.degrees(2 * math.pi)``\n\n:param x: A value in radians\n:return: The value converted to degrees",
            "version": 0,
            "params": [
                {
                    "name": "x"
                }
            ]
        },
        {
            "acResult": "exp",
            "type": [
                "function"
            ],
            "documentation": "Calculate the exponential of ``x``.\n\nExample: ``math.exp(1)``\n\n:param x: A number\n:return: The exponential of ``x``.",
            "version": 0,
            "params": [
                {
                    "name": "x"
                }
            ]
        },
        {
            "acResult": "fabs",
            "type": [
                "function"
            ],
            "documentation": "Return the absolute value of ``x``.\n\nExample: ``math.fabs(-0.1)``\n\n:param x: A number\n:return: The absolute value of ``x``",
            "version": 0,
            "params": [
                {
                    "name": "x"
                }
            ]
        },
        {
            "acResult": "floor",
            "type": [
                "function"
            ],
            "documentation": "Round a number towards negative infinity.\n\nExample: ``math.floor(0.9)``\n\n:param x: A number\n:return: ``x`` rounded towards negative infinity.",
            "version": 0,
            "params": [
                {
                    "name": "x"
                }
            ]
        },
        {
            "acResult": "fmod",
            "type": [
                "function"
            ],
            "documentation": "Calculate the remainder of ``x/y``.\n\nExample: ``math.fmod(10, 3)``\n\n:param x: The numerator\n:param y: The denominator",
            "version": 0,
            "params": [
                {
                    "name": "x"
                },
                {
                    "name": "y"
                }
            ]
        },
        {
            "acResult": "frexp",
            "type": [
                "function"
            ],
            "documentation": "Decomposes a floating-point number into its mantissa and exponent.\n\nExample: ``mantissa, exponent = math.frexp(2)``\n\nThe returned value is the tuple ``(m, e)`` such that ``x == m * 2**e``\nexactly.  If ``x == 0`` then the function returns ``(0.0, 0)``, otherwise\nthe relation ``0.5 <= abs(m) < 1`` holds.\n\n:param x: A floating-point number\n:return: A tuple of length two containing its mantissa then exponent",
            "version": 0,
            "params": [
                {
                    "name": "x"
                }
            ]
        },
        {
            "acResult": "isfinite",
            "type": [
                "function"
            ],
            "documentation": "Check if a value is finite.\n\nExample: ``math.isfinite(float('inf'))``\n\n:param x: A number.\n:return: ``True`` if ``x`` is finite, ``False`` otherwise.",
            "version": 0,
            "params": [
                {
                    "name": "x"
                }
            ]
        },
        {
            "acResult": "isinf",
            "type": [
                "function"
            ],
            "documentation": "Check if a value is infinite.\n\nExample: ``math.isinf(float('-inf'))``\n\n:param x: A number.\n:return: ``True`` if ``x`` is infinite, ``False`` otherwise.",
            "version": 0,
            "params": [
                {
                    "name": "x"
                }
            ]
        },
        {
            "acResult": "isnan",
            "type": [
                "function"
            ],
            "documentation": "Check if a value is not-a-number (NaN).\n\nExample: ``math.isnan(float('nan'))``\n\n:param x: A number\n:return: ``True`` if ``x`` is not-a-number (NaN), ``False`` otherwise.",
            "version": 0,
            "params": [
                {
                    "name": "x"
                }
            ]
        },
        {
            "acResult": "ldexp",
            "type": [
                "function"
            ],
            "documentation": "Calculate ``x * (2**exp)``.\n\nExample: ``math.ldexp(0.5, 2)``\n\n:param x: A number\n:param exp: Integer exponent\n:return: ``x * (2**exp)``",
            "version": 0,
            "params": [
                {
                    "name": "x"
                },
                {
                    "name": "exp"
                }
            ]
        },
        {
            "acResult": "log",
            "type": [
                "function"
            ],
            "documentation": "Calculate the logarithm of ``x`` to the given base (defaults to natural logorithm).\n\nExample: ``math.log(math.e)``\n\nWith one argument, return the natural logarithm of x (to base e).\n\nWith two arguments, return the logarithm of x to the given base, calculated as ``log(x)/log(base)``.\n\n:param x: A number\n:param base: The base to use\n:return: The natural logarithm of ``x``",
            "version": 0,
            "params": [
                {
                    "name": "x"
                },
                {
                    "name": "base"
                }
            ]
        },
        {
            "acResult": "modf",
            "type": [
                "function"
            ],
            "documentation": "Calculate the fractional and integral parts of ``x``.\n\nExample: ``fractional, integral = math.modf(1.5)``\n\n:param x: A number\n:return: A tuple of two floats representing the fractional then integral parts of ``x``.\n\nBoth the fractional and integral values have the same sign as ``x``.",
            "version": 0,
            "params": [
                {
                    "name": "x"
                }
            ]
        },
        {
            "acResult": "pow",
            "type": [
                "function"
            ],
            "documentation": "Returns ``x`` to the power of ``y``.\n\nExample: ``math.pow(4, 0.5)``\n\n:param x: A number\n:param y: The exponent\n:return: ``x`` to the power of ``y``",
            "version": 0,
            "params": [
                {
                    "name": "x"
                },
                {
                    "name": "y"
                }
            ]
        },
        {
            "acResult": "radians",
            "type": [
                "function"
            ],
            "documentation": "Convert a degrees to radians.\n\nExample: ``math.radians(360)``\n\n:param x: A value in degrees\n:return: The value converted to radians",
            "version": 0,
            "params": [
                {
                    "name": "x"
                }
            ]
        },
        {
            "acResult": "sin",
            "type": [
                "function"
            ],
            "documentation": "Calculate the sine of ``x``.\n\nExample: ``math.sin(math.pi/2)``\n\n:param x: A number\n:return: The sine of ``x``",
            "version": 0,
            "params": [
                {
                    "name": "x"
                }
            ]
        },
        {
            "acResult": "sqrt",
            "type": [
                "function"
            ],
            "documentation": "Calculate the square root of ``x``.\n\nExample: ``math.sqrt(4)``\n\n:param x: A number\n:return: The square root of ``x``",
            "version": 0,
            "params": [
                {
                    "name": "x"
                }
            ]
        },
        {
            "acResult": "tan",
            "type": [
                "function"
            ],
            "documentation": "Calculate the tangent of ``x``.\n\nExample: ``math.tan(0)``\n\n:param x: A number\n:return: The tangent of ``x``.",
            "version": 0,
            "params": [
                {
                    "name": "x"
                }
            ]
        },
        {
            "acResult": "trunc",
            "type": [
                "function"
            ],
            "documentation": "Round a number towards 0.\n\nExample: ``math.trunc(-0.9)``\n\n:param x: A number\n:return: ``x`` rounded towards zero.",
            "version": 0,
            "params": [
                {
                    "name": "x"
                }
            ]
        },
        {
            "acResult": "e",
            "type": [
                "variable"
            ],
            "documentation": "Convert a string or number to a floating point number, if possible.",
            "version": 0
        },
        {
            "acResult": "pi",
            "type": [
                "variable"
            ],
            "documentation": "Convert a string or number to a floating point number, if possible.",
            "version": 0
        }
    ],
    "": [
        {
            "acResult": "_SupportsTrunc",
            "type": [
                "type",
                "function"
            ],
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "object",
            "type": [
                "type",
                "function"
            ],
            "documentation": "The base class of the class hierarchy.\n\nWhen called, it accepts no arguments and returns a new featureless\ninstance that has no instance attributes and cannot be given any.",
            "version": 0
        },
        {
            "acResult": "staticmethod",
            "type": [
                "type",
                "function"
            ],
            "documentation": "Convert a function to be a static method.\n\nA static method does not receive an implicit first argument.\nTo declare a static method, use this idiom:\n\n     class C:\n         @staticmethod\n         def f(arg1, arg2, ...):\n             ...\n\nIt can be called either on the class (e.g. C.f()) or on an instance\n(e.g. C().f()). Both the class and the instance are ignored, and\nneither is passed implicitly as the first argument to the method.\n\nStatic methods in Python are similar to those found in Java or C++.\nFor a more advanced concept, see the classmethod builtin.",
            "version": 0
        },
        {
            "acResult": "classmethod",
            "type": [
                "type",
                "function"
            ],
            "documentation": "Convert a function to be a class method.\n\nA class method receives the class as implicit first argument,\njust like an instance method receives the instance.\nTo declare a class method, use this idiom:\n\n  class C:\n      @classmethod\n      def f(cls, arg1, arg2, ...):\n          ...\n\nIt can be called either on the class (e.g. C.f()) or on an instance\n(e.g. C().f()).  The instance is ignored except for its class.\nIf a class method is called for a derived class, the derived class\nobject is passed as the implied first argument.\n\nClass methods are different than C++ or Java static methods.\nIf you want those, see the staticmethod builtin.",
            "version": 0
        },
        {
            "acResult": "type",
            "type": [
                "type",
                "function"
            ],
            "documentation": "type(object_or_name, bases, dict)\ntype(object) -> the object's type\ntype(name, bases, dict) -> a new type",
            "version": 0
        },
        {
            "acResult": "super",
            "type": [
                "type",
                "function"
            ],
            "documentation": "super() -> same as super(__class__, <first argument>)\nsuper(type) -> unbound super object\nsuper(type, obj) -> bound super object; requires isinstance(obj, type)\nsuper(type, type2) -> bound super object; requires issubclass(type2, type)\nTypical use to call a cooperative superclass method:\nclass C(B):\n    def meth(self, arg):\n        super().meth(arg)\nThis works for class methods too:\nclass C(B):\n    @classmethod\n    def cmeth(cls, arg):\n        super().cmeth(arg)",
            "version": 0
        },
        {
            "acResult": "int",
            "type": [
                "type",
                "function"
            ],
            "documentation": "Convert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "version": 0
        },
        {
            "acResult": "float",
            "type": [
                "type",
                "function"
            ],
            "documentation": "Convert a string or number to a floating point number, if possible.",
            "version": 0,
            "params": [
                {
                    "name": "x",
                    "defaultValue": "0"
                }
            ]
        },
        {
            "acResult": "complex",
            "type": [
                "type",
                "function"
            ],
            "documentation": "Create a complex number from a real part and an optional imaginary part.\n\nThis is equivalent to (real + imag*1j) where imag defaults to 0.",
            "version": 0,
            "params": [
                {
                    "name": "real",
                    "defaultValue": "0"
                },
                {
                    "name": "imag",
                    "defaultValue": "0"
                }
            ]
        },
        {
            "acResult": "str",
            "type": [
                "type",
                "function"
            ],
            "documentation": "Create a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.",
            "version": 0
        },
        {
            "acResult": "bytes",
            "type": [
                "type",
                "function"
            ],
            "documentation": "Construct an immutable array of bytes from:\n  - an iterable yielding integers in range(256)\n  - a text string encoded using the specified encoding\n  - any object implementing the buffer API.\n  - an integer",
            "version": 0
        },
        {
            "acResult": "bytearray",
            "type": [
                "type",
                "function"
            ],
            "documentation": "Construct a mutable bytearray object from:\n  - an iterable yielding integers in range(256)\n  - a text string encoded using the specified encoding\n  - a bytes or a buffer object\n  - any object implementing the buffer API.\n  - an integer",
            "version": 0
        },
        {
            "acResult": "memoryview",
            "type": [
                "type",
                "function"
            ],
            "documentation": "Create a new memoryview object which references the given object.",
            "version": 0,
            "params": [
                {
                    "name": "object"
                }
            ]
        },
        {
            "acResult": "bool",
            "type": [
                "type",
                "function"
            ],
            "documentation": "Returns True when the argument x is true, False otherwise.\nThe builtins True and False are the only two instances of the class bool.\nThe class bool is a subclass of the class int, and cannot be subclassed.",
            "version": 0
        },
        {
            "acResult": "slice",
            "type": [
                "type",
                "function"
            ],
            "documentation": "Create a slice object.  This is used for extended slicing (e.g. a[0:10:2]).",
            "version": 0
        },
        {
            "acResult": "tuple",
            "type": [
                "type",
                "function"
            ],
            "documentation": "Built-in immutable sequence.\n\nIf no argument is given, the constructor returns an empty tuple.\nIf iterable is specified the tuple is initialized from iterable's items.\n\nIf the argument is a tuple, the return value is the same object.",
            "version": 0,
            "params": [
                {
                    "name": "iterable",
                    "defaultValue": "()"
                }
            ]
        },
        {
            "acResult": "function",
            "type": [
                "type",
                "function"
            ],
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "frozenset",
            "type": [
                "type",
                "function"
            ],
            "documentation": "Build an immutable unordered collection of unique elements.",
            "version": 0
        },
        {
            "acResult": "list",
            "type": [
                "type",
                "function"
            ],
            "documentation": "Built-in mutable sequence.\n\nIf no argument is given, the constructor creates a new empty list.\nThe argument must be an iterable if specified.",
            "version": 0,
            "params": [
                {
                    "name": "iterable",
                    "defaultValue": "()"
                }
            ]
        },
        {
            "acResult": "dict",
            "type": [
                "type",
                "function"
            ],
            "documentation": "dict() -> new empty dictionary\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs\ndict(iterable) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in iterable:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)",
            "version": 0
        },
        {
            "acResult": "set",
            "type": [
                "type",
                "function"
            ],
            "documentation": "Build an unordered collection of unique elements.",
            "version": 0
        },
        {
            "acResult": "enumerate",
            "type": [
                "type",
                "function"
            ],
            "documentation": "Return an enumerate object.\n\n  iterable\n    an object supporting iteration\n\nThe enumerate object yields pairs containing a count (from start, which\ndefaults to zero) and a value yielded by the iterable argument.\n\nenumerate is useful for obtaining an indexed list:\n    (0, seq[0]), (1, seq[1]), (2, seq[2]), ...",
            "version": 0,
            "params": [
                {
                    "name": "iterable"
                },
                {
                    "name": "start",
                    "defaultValue": "0"
                }
            ]
        },
        {
            "acResult": "range",
            "type": [
                "type",
                "function"
            ],
            "documentation": "Return an object that produces a sequence of integers from start (inclusive)\nto stop (exclusive) by step.  range(i, j) produces i, i+1, i+2, ..., j-1.\nstart defaults to 0, and stop is omitted!  range(4) produces 0, 1, 2, 3.\nThese are exactly the valid indices for a list of 4 elements.\nWhen step is given, it specifies the increment (or decrement).",
            "version": 0
        },
        {
            "acResult": "property",
            "type": [
                "type",
                "function"
            ],
            "documentation": "Property attribute.\n\n  fget\n    function to be used for getting an attribute value\n  fset\n    function to be used for setting an attribute value\n  fdel\n    function to be used for del'ing an attribute\n  doc\n    docstring\n\nTypical use is to define a managed attribute x:\n\nclass C(object):\n    def getx(self): return self._x\n    def setx(self, value): self._x = value\n    def delx(self): del self._x\n    x = property(getx, setx, delx, \"I'm the 'x' property.\")\n\nDecorators make defining new properties or modifying existing ones easy:\n\nclass C(object):\n    @property\n    def x(self):\n        \"I am the 'x' property.\"\n        return self._x\n    @x.setter\n    def x(self, value):\n        self._x = value\n    @x.deleter\n    def x(self):\n        del self._x",
            "version": 0,
            "params": [
                {
                    "name": "fget",
                    "defaultValue": "None"
                },
                {
                    "name": "fset",
                    "defaultValue": "None"
                },
                {
                    "name": "fdel",
                    "defaultValue": "None"
                },
                {
                    "name": "doc",
                    "defaultValue": "None"
                }
            ]
        },
        {
            "acResult": "_NotImplementedType",
            "type": [
                "type",
                "function"
            ],
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "NotImplemented",
            "type": [
                "variable"
            ],
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "abs",
            "type": [
                "function"
            ],
            "documentation": "Return the absolute value of the argument.",
            "version": 0,
            "params": [
                {
                    "name": "x"
                }
            ]
        },
        {
            "acResult": "all",
            "type": [
                "function"
            ],
            "documentation": "Return True if bool(x) is True for all values x in the iterable.\n\nIf the iterable is empty, return True.",
            "version": 0,
            "params": [
                {
                    "name": "iterable"
                }
            ]
        },
        {
            "acResult": "any",
            "type": [
                "function"
            ],
            "documentation": "Return True if bool(x) is True for any x in the iterable.\n\nIf the iterable is empty, return False.",
            "version": 0,
            "params": [
                {
                    "name": "iterable"
                }
            ]
        },
        {
            "acResult": "bin",
            "type": [
                "function"
            ],
            "documentation": "Return the binary representation of an integer.\n\n>>> bin(2796202)\n'0b1010101010101010101010'",
            "version": 0,
            "params": [
                {
                    "name": "number"
                }
            ]
        },
        {
            "acResult": "breakpoint",
            "type": [
                "function"
            ],
            "documentation": "Call sys.breakpointhook(*args, **kws).  sys.breakpointhook() must accept\nwhatever arguments are passed.\n\nBy default, this drops you into the pdb debugger.",
            "version": 0
        },
        {
            "acResult": "callable",
            "type": [
                "function"
            ],
            "documentation": "Return whether the object is callable (i.e., some kind of function).\n\nNote that classes are callable, as are instances of classes with a\n__call__() method.",
            "version": 0,
            "params": [
                {
                    "name": "obj"
                }
            ]
        },
        {
            "acResult": "chr",
            "type": [
                "function"
            ],
            "documentation": "Return a Unicode string of one character with ordinal i; 0 <= i <= 0x10ffff.",
            "version": 0,
            "params": [
                {
                    "name": "i"
                }
            ]
        },
        {
            "acResult": "_PathLike",
            "type": [
                "type",
                "function"
            ],
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "aiter",
            "type": [
                "function"
            ],
            "documentation": "",
            "version": 0,
            "params": [
                {
                    "name": "iterable"
                }
            ]
        },
        {
            "acResult": "delattr",
            "type": [
                "function"
            ],
            "documentation": "Deletes the named attribute from the given object.\n\ndelattr(x, 'y') is equivalent to ``del x.y''",
            "version": 0,
            "params": [
                {
                    "name": "obj"
                },
                {
                    "name": "name"
                }
            ]
        },
        {
            "acResult": "dir",
            "type": [
                "function"
            ],
            "documentation": "If called without an argument, return the names in the current scope.\nElse, return an alphabetized list of names comprising (some of) the attributes\nof the given object, and of attributes reachable from it.\nIf the object supplies a method named __dir__, it will be used; otherwise\nthe default dir() logic is used and returns:\n  for a module object: the module's attributes.\n  for a class object:  its attributes, and recursively the attributes\n    of its bases.\n  for any other object: its attributes, its class's attributes, and\n    recursively the attributes of its class's base classes.",
            "version": 0,
            "params": [
                {
                    "name": "o",
                    "defaultValue": "Ellipsis"
                }
            ]
        },
        {
            "acResult": "divmod",
            "type": [
                "function",
                "function"
            ],
            "documentation": "Return the tuple (x//y, x%y).  Invariant: div*y + mod == x.",
            "version": 0,
            "params": [
                {
                    "name": "x"
                },
                {
                    "name": "y"
                }
            ]
        },
        {
            "acResult": "eval",
            "type": [
                "function"
            ],
            "documentation": "Evaluate the given source in the context of globals and locals.\n\nThe source may be a string representing a Python expression\nor a code object as returned by compile().\nThe globals must be a dictionary and locals can be any mapping,\ndefaulting to the current globals and locals.\nIf only globals is given, locals defaults to it.",
            "version": 0,
            "params": [
                {
                    "name": "source"
                },
                {
                    "name": "globals",
                    "defaultValue": "Ellipsis"
                },
                {
                    "name": "locals",
                    "defaultValue": "Ellipsis"
                }
            ]
        },
        {
            "acResult": "exec",
            "type": [
                "function"
            ],
            "documentation": "Execute the given source in the context of globals and locals.\n\nThe source may be a string representing one or more Python statements\nor a code object as returned by compile().\nThe globals must be a dictionary and locals can be any mapping,\ndefaulting to the current globals and locals.\nIf only globals is given, locals defaults to it.",
            "version": 0,
            "params": [
                {
                    "name": "source"
                },
                {
                    "name": "globals",
                    "defaultValue": "Ellipsis"
                },
                {
                    "name": "locals",
                    "defaultValue": "Ellipsis"
                }
            ]
        },
        {
            "acResult": "filter",
            "type": [
                "type",
                "function"
            ],
            "documentation": "Return an iterator yielding those items of iterable for which function(item)\nis true. If function is None, return the items that are true.",
            "version": 0
        },
        {
            "acResult": "getattr",
            "type": [
                "function",
                "function",
                "function",
                "function"
            ],
            "documentation": "Get a named attribute from an object; getattr(x, 'y') is equivalent to x.y.\nWhen a default argument is given, it is returned when the attribute doesn't\nexist; without it, an exception is raised in that case.",
            "version": 0,
            "params": [
                {
                    "name": "o"
                },
                {
                    "name": "name"
                }
            ]
        },
        {
            "acResult": "globals",
            "type": [
                "function"
            ],
            "documentation": "Return the dictionary containing the current scope's global variables.\n\nNOTE: Updates to this dictionary *will* affect name lookups in the current\nglobal scope and vice-versa.",
            "version": 0
        },
        {
            "acResult": "hasattr",
            "type": [
                "function"
            ],
            "documentation": "Return whether the object has an attribute with the given name.\n\nThis is done by calling getattr(obj, name) and catching AttributeError.",
            "version": 0,
            "params": [
                {
                    "name": "obj"
                },
                {
                    "name": "name"
                }
            ]
        },
        {
            "acResult": "hash",
            "type": [
                "function"
            ],
            "documentation": "Return the hash value for the given object.\n\nTwo objects that compare equal must also have the same hash value, but the\nreverse is not necessarily true.",
            "version": 0,
            "params": [
                {
                    "name": "obj"
                }
            ]
        },
        {
            "acResult": "help",
            "type": [
                "function"
            ],
            "documentation": "Define the builtin 'help'.\n\nThis is a wrapper around pydoc.help that provides a helpful message\nwhen 'help' is typed at the Python interactive prompt.\n\nCalling help() at the Python prompt starts an interactive help session.\nCalling help(thing) prints help for the python object 'thing'.",
            "version": 0,
            "params": [
                {
                    "name": "self"
                }
            ]
        },
        {
            "acResult": "hex",
            "type": [
                "function"
            ],
            "documentation": "Return the hexadecimal representation of an integer.\n\n>>> hex(12648430)\n'0xc0ffee'",
            "version": 0,
            "params": [
                {
                    "name": "number"
                }
            ]
        },
        {
            "acResult": "id",
            "type": [
                "function"
            ],
            "documentation": "Return the identity of an object.\n\nThis is guaranteed to be unique among simultaneously existing objects.\n(CPython uses the object's memory address.)",
            "version": 0,
            "params": [
                {
                    "name": "obj"
                }
            ]
        },
        {
            "acResult": "input",
            "type": [
                "function"
            ],
            "documentation": "Read a string from standard input.  The trailing newline is stripped.\n\nThe prompt string, if given, is printed to standard output without a\ntrailing newline before reading input.\n\nIf the user hits EOF (*nix: Ctrl-D, Windows: Ctrl-Z+Return), raise EOFError.\nOn *nix systems, readline is used if available.",
            "version": 0,
            "params": [
                {
                    "name": "prompt",
                    "defaultValue": "Ellipsis"
                }
            ]
        },
        {
            "acResult": "iter",
            "type": [
                "function",
                "function",
                "function"
            ],
            "documentation": "Get an iterator from an object.  In the first form, the argument must\nsupply its own iterator, or be a sequence.\nIn the second form, the callable is called until it returns the sentinel.",
            "version": 0,
            "params": [
                {
                    "name": "iterable"
                }
            ]
        },
        {
            "acResult": "isinstance",
            "type": [
                "function",
                "function"
            ],
            "documentation": "Return whether an object is an instance of a class or of a subclass thereof.\n\nA tuple, as in ``isinstance(x, (A, B, ...))``, may be given as the target to\ncheck against. This is equivalent to ``isinstance(x, A) or isinstance(x, B)\nor ...`` etc.",
            "version": 0,
            "params": [
                {
                    "name": "obj"
                },
                {
                    "name": "class_or_tuple"
                }
            ]
        },
        {
            "acResult": "issubclass",
            "type": [
                "function",
                "function"
            ],
            "documentation": "Return whether 'cls' is a derived from another class or is the same class.\n\nA tuple, as in ``issubclass(x, (A, B, ...))``, may be given as the target to\ncheck against. This is equivalent to ``issubclass(x, A) or issubclass(x, B)\nor ...`` etc.",
            "version": 0,
            "params": [
                {
                    "name": "cls"
                },
                {
                    "name": "class_or_tuple"
                }
            ]
        },
        {
            "acResult": "len",
            "type": [
                "function"
            ],
            "documentation": "Return the number of items in a container.",
            "version": 0,
            "params": [
                {
                    "name": "obj"
                }
            ]
        },
        {
            "acResult": "locals",
            "type": [
                "function"
            ],
            "documentation": "Return a dictionary containing the current scope's local variables.\n\nNOTE: Whether or not updates to this dictionary will affect name lookups in\nthe local scope and vice-versa is *implementation dependent* and not\ncovered by any backwards compatibility guarantees.",
            "version": 0
        },
        {
            "acResult": "map",
            "type": [
                "type",
                "function"
            ],
            "documentation": "Make an iterator that computes the function using arguments from\neach of the iterables.  Stops when the shortest iterable is exhausted.",
            "version": 0
        },
        {
            "acResult": "max",
            "type": [
                "function",
                "function",
                "function",
                "function",
                "function",
                "function"
            ],
            "documentation": "With a single iterable argument, return its biggest item. The\ndefault keyword-only argument specifies an object to return if\nthe provided iterable is empty.\nWith two or more arguments, return the largest argument.",
            "version": 0,
            "params": [
                {
                    "name": "arg1"
                },
                {
                    "name": "arg2"
                }
            ]
        },
        {
            "acResult": "min",
            "type": [
                "function",
                "function",
                "function",
                "function",
                "function",
                "function"
            ],
            "documentation": "With a single iterable argument, return its smallest item. The\ndefault keyword-only argument specifies an object to return if\nthe provided iterable is empty.\nWith two or more arguments, return the smallest argument.",
            "version": 0,
            "params": [
                {
                    "name": "arg1"
                },
                {
                    "name": "arg2"
                }
            ]
        },
        {
            "acResult": "next",
            "type": [
                "function",
                "function"
            ],
            "documentation": "Return the next item from the iterator. If default is given and the iterator\nis exhausted, it is returned instead of raising StopIteration.",
            "version": 0,
            "params": [
                {
                    "name": "i"
                }
            ]
        },
        {
            "acResult": "oct",
            "type": [
                "function"
            ],
            "documentation": "Return the octal representation of an integer.\n\n>>> oct(342391)\n'0o1234567'",
            "version": 0,
            "params": [
                {
                    "name": "number"
                }
            ]
        },
        {
            "acResult": "open",
            "type": [
                "function",
                "function",
                "function"
            ],
            "documentation": "Open file and return a stream.  Raise OSError upon failure.\n\nfile is either a text or byte string giving the name (and the path\nif the file isn't in the current working directory) of the file to\nbe opened or an integer file descriptor of the file to be\nwrapped. (If a file descriptor is given, it is closed when the\nreturned I/O object is closed, unless closefd is set to False.)\n\nmode is an optional string that specifies the mode in which the file\nis opened. It defaults to 'r' which means open for reading in text\nmode.  Other common values are 'w' for writing (truncating the file if\nit already exists), 'x' for creating and writing to a new file, and\n'a' for appending (which on some Unix systems, means that all writes\nappend to the end of the file regardless of the current seek position).\nIn text mode, if encoding is not specified the encoding used is platform\ndependent: locale.getpreferredencoding(False) is called to get the\ncurrent locale encoding. (For reading and writing raw bytes use binary\nmode and leave encoding unspecified.) The available modes are:\n\n========= ===============================================================\nCharacter Meaning\n--------- ---------------------------------------------------------------\n'r'       open for reading (default)\n'w'       open for writing, truncating the file first\n'x'       create a new file and open it for writing\n'a'       open for writing, appending to the end of the file if it exists\n'b'       binary mode\n't'       text mode (default)\n'+'       open a disk file for updating (reading and writing)\n'U'       universal newline mode (deprecated)\n========= ===============================================================\n\nThe default mode is 'rt' (open for reading text). For binary random\naccess, the mode 'w+b' opens and truncates the file to 0 bytes, while\n'r+b' opens the file without truncation. The 'x' mode implies 'w' and\nraises an `FileExistsError` if the file already exists.\n\nPython distinguishes between files opened in binary and text modes,\neven when the underlying operating system doesn't. Files opened in\nbinary mode (appending 'b' to the mode argument) return contents as\nbytes objects without any decoding. In text mode (the default, or when\n't' is appended to the mode argument), the contents of the file are\nreturned as strings, the bytes having been first decoded using a\nplatform-dependent encoding or using the specified encoding if given.\n\n'U' mode is deprecated and will raise an exception in future versions\nof Python.  It has no effect in Python 3.  Use newline to control\nuniversal newlines mode.\n\nbuffering is an optional integer used to set the buffering policy.\nPass 0 to switch buffering off (only allowed in binary mode), 1 to select\nline buffering (only usable in text mode), and an integer > 1 to indicate\nthe size of a fixed-size chunk buffer.  When no buffering argument is\ngiven, the default buffering policy works as follows:\n\n* Binary files are buffered in fixed-size chunks; the size of the buffer\n  is chosen using a heuristic trying to determine the underlying device's\n  \"block size\" and falling back on `io.DEFAULT_BUFFER_SIZE`.\n  On many systems, the buffer will typically be 4096 or 8192 bytes long.\n\n* \"Interactive\" text files (files for which isatty() returns True)\n  use line buffering.  Other text files use the policy described above\n  for binary files.\n\nencoding is the name of the encoding used to decode or encode the\nfile. This should only be used in text mode. The default encoding is\nplatform dependent, but any encoding supported by Python can be\npassed.  See the codecs module for the list of supported encodings.\n\nerrors is an optional string that specifies how encoding errors are to\nbe handled---this argument should not be used in binary mode. Pass\n'strict' to raise a ValueError exception if there is an encoding error\n(the default of None has the same effect), or pass 'ignore' to ignore\nerrors. (Note that ignoring encoding errors can lead to data loss.)\nSee the documentation for codecs.register or run 'help(codecs.Codec)'\nfor a list of the permitted encoding error strings.\n\nnewline controls how universal newlines works (it only applies to text\nmode). It can be None, '', '\\n', '\\r', and '\\r\\n'.  It works as\nfollows:\n\n* On input, if newline is None, universal newlines mode is\n  enabled. Lines in the input can end in '\\n', '\\r', or '\\r\\n', and\n  these are translated into '\\n' before being returned to the\n  caller. If it is '', universal newline mode is enabled, but line\n  endings are returned to the caller untranslated. If it has any of\n  the other legal values, input lines are only terminated by the given\n  string, and the line ending is returned to the caller untranslated.\n\n* On output, if newline is None, any '\\n' characters written are\n  translated to the system default line separator, os.linesep. If\n  newline is '' or '\\n', no translation takes place. If newline is any\n  of the other legal values, any '\\n' characters written are translated\n  to the given string.\n\nIf closefd is False, the underlying file descriptor will be kept open\nwhen the file is closed. This does not work when a file name is given\nand must be True in that case.\n\nA custom opener can be used by passing a callable as *opener*. The\nunderlying file descriptor for the file object is then obtained by\ncalling *opener* with (*file*, *flags*). *opener* must return an open\nfile descriptor (passing os.open as *opener* results in functionality\nsimilar to passing None).\n\nopen() returns a file object whose type depends on the mode, and\nthrough which the standard file operations such as reading and writing\nare performed. When open() is used to open a file in a text mode ('w',\n'r', 'wt', 'rt', etc.), it returns a TextIOWrapper. When used to open\na file in a binary mode, the returned class varies: in read binary\nmode, it returns a BufferedReader; in write binary and append binary\nmodes, it returns a BufferedWriter, and in read/write mode, it returns\na BufferedRandom.\n\nIt is also possible to use a string or bytearray as a file for both\nreading and writing. For strings StringIO can be used like a file\nopened in a text mode, and for bytes a BytesIO can be used like a file\nopened in a binary mode.",
            "version": 0,
            "params": [
                {
                    "name": "file"
                },
                {
                    "name": "mode",
                    "defaultValue": "Ellipsis"
                },
                {
                    "name": "buffering",
                    "defaultValue": "Ellipsis"
                },
                {
                    "name": "encoding",
                    "defaultValue": "Ellipsis"
                },
                {
                    "name": "errors",
                    "defaultValue": "Ellipsis"
                },
                {
                    "name": "newline",
                    "defaultValue": "Ellipsis"
                },
                {
                    "name": "closefd",
                    "defaultValue": "Ellipsis"
                },
                {
                    "name": "opener",
                    "defaultValue": "Ellipsis"
                }
            ]
        },
        {
            "acResult": "ord",
            "type": [
                "function"
            ],
            "documentation": "Return the Unicode code point for a one-character string.",
            "version": 0,
            "params": [
                {
                    "name": "c"
                }
            ]
        },
        {
            "acResult": "print",
            "type": [
                "function"
            ],
            "documentation": "Prints the values to a stream, or to sys.stdout by default.\nOptional keyword arguments:\nfile:  a file-like object (stream); defaults to the current sys.stdout.\nsep:   string inserted between values, default a space.\nend:   string appended after the last value, default a newline.\nflush: whether to forcibly flush the stream.",
            "version": 0,
            "params": [
                "value"
            ]
        },
        {
            "acResult": "_SupportsPow2",
            "type": [
                "type",
                "function"
            ],
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "_SupportsPow3",
            "type": [
                "type",
                "function"
            ],
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "pow",
            "type": [
                "function",
                "function",
                "function",
                "function",
                "function",
                "function",
                "function",
                "function",
                "function",
                "function"
            ],
            "documentation": "Equivalent to base**exp with 2 arguments or base**exp % mod with 3 arguments\n\nSome types, such as ints, are able to use a more efficient algorithm when\ninvoked using the three argument form.",
            "version": 0,
            "params": [
                {
                    "name": "base"
                },
                {
                    "name": "exp"
                },
                {
                    "name": "mod",
                    "defaultValue": "Ellipsis"
                }
            ]
        },
        {
            "acResult": "reversed",
            "type": [
                "type",
                "function"
            ],
            "documentation": "Return a reverse iterator over the values of the given sequence.",
            "version": 0,
            "params": [
                {
                    "name": "sequence"
                }
            ]
        },
        {
            "acResult": "repr",
            "type": [
                "function"
            ],
            "documentation": "Return the canonical string representation of the object.\n\nFor many object types, including most builtins, eval(repr(obj)) == obj.",
            "version": 0,
            "params": [
                {
                    "name": "obj"
                }
            ]
        },
        {
            "acResult": "round",
            "type": [
                "function",
                "function",
                "function"
            ],
            "documentation": "Round a number to a given precision in decimal digits.\n\nThe return value is an integer if ndigits is omitted or None.  Otherwise\nthe return value has the same type as the number.  ndigits may be negative.",
            "version": 0,
            "params": [
                {
                    "name": "number"
                }
            ]
        },
        {
            "acResult": "setattr",
            "type": [
                "function"
            ],
            "documentation": "Sets the named attribute on the given object to the specified value.\n\nsetattr(x, 'y', v) is equivalent to ``x.y = v''",
            "version": 0,
            "params": [
                {
                    "name": "obj"
                },
                {
                    "name": "name"
                },
                {
                    "name": "value"
                }
            ]
        },
        {
            "acResult": "sorted",
            "type": [
                "function",
                "function"
            ],
            "documentation": "Return a new list containing all items from the iterable in ascending order.\n\nA custom key function can be supplied to customize the sort order, and the\nreverse flag can be set to request the result in descending order.",
            "version": 0,
            "params": [
                {
                    "name": "iterable"
                }
            ]
        },
        {
            "acResult": "sum",
            "type": [
                "function",
                "function",
                "function",
                "function"
            ],
            "documentation": "Return the sum of a 'start' value (default: 0) plus an iterable of numbers\n\nWhen the iterable is empty, return the start value.\nThis function is intended specifically for use with numeric values and may\nreject non-numeric types.",
            "version": 0,
            "params": [
                {
                    "name": "iterable"
                }
            ]
        },
        {
            "acResult": "zip",
            "type": [
                "type",
                "function"
            ],
            "documentation": ">>> list(zip('abcdefg', range(3), range(4)))\n   [('a', 0, 0), ('b', 1, 1), ('c', 2, 2)]\n\nThe zip object yields n-length tuples, where n is the number of iterables\npassed as positional arguments to zip().  The i-th element in every tuple\ncomes from the i-th iterable argument to zip().  This continues until the\nshortest argument is exhausted.",
            "version": 0
        },
        {
            "acResult": "__import__",
            "type": [
                "function"
            ],
            "documentation": "__import__(name, globals=None, locals=None, fromlist=(), level=0) -> module\n\nImport a module. Because this function is meant for use by the Python\ninterpreter and not for general use, it is better to use\nimportlib.import_module() to programmatically import a module.\n\nThe globals argument is only used to determine the context;\nthey are not modified.  The locals argument is unused.  The fromlist\nshould be a list of names to emulate ``from name import ...'', or an\nempty list to emulate ``import name''.\nWhen importing a module from a package, note that __import__('A.B', ...)\nreturns package A when fromlist is empty, but its submodule B when\nfromlist is not empty.  The level argument is used to determine whether to\nperform absolute or relative imports: 0 is absolute, while a positive number\nis the number of parent directories to search relative to the current module.",
            "version": 0,
            "params": [
                {
                    "name": "name"
                },
                {
                    "name": "globals",
                    "defaultValue": "Ellipsis"
                },
                {
                    "name": "locals",
                    "defaultValue": "Ellipsis"
                },
                {
                    "name": "fromlist",
                    "defaultValue": "Ellipsis"
                },
                {
                    "name": "level",
                    "defaultValue": "Ellipsis"
                }
            ]
        },
        {
            "acResult": "ellipsis",
            "type": [
                "type",
                "function"
            ],
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "Ellipsis",
            "type": [
                "variable"
            ],
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "BaseException",
            "type": [
                "type",
                "function"
            ],
            "documentation": "Common base class for all exceptions",
            "version": 0
        },
        {
            "acResult": "GeneratorExit",
            "type": [
                "type",
                "function"
            ],
            "documentation": "Request that a generator exit.",
            "version": 0
        },
        {
            "acResult": "KeyboardInterrupt",
            "type": [
                "type",
                "function"
            ],
            "documentation": "Program interrupted by user.",
            "version": 0
        },
        {
            "acResult": "SystemExit",
            "type": [
                "type",
                "function"
            ],
            "documentation": "Request to exit from the interpreter.",
            "version": 0
        },
        {
            "acResult": "Exception",
            "type": [
                "type",
                "function"
            ],
            "documentation": "Common base class for all non-exit exceptions.",
            "version": 0
        },
        {
            "acResult": "StopIteration",
            "type": [
                "type",
                "function"
            ],
            "documentation": "Signal the end from iterator.__next__().",
            "version": 0
        },
        {
            "acResult": "OSError",
            "type": [
                "type",
                "function"
            ],
            "documentation": "Base class for I/O related errors.",
            "version": 0
        },
        {
            "acResult": "ArithmeticError",
            "type": [
                "type",
                "function"
            ],
            "documentation": "Base class for arithmetic errors.",
            "version": 0
        },
        {
            "acResult": "AssertionError",
            "type": [
                "type",
                "function"
            ],
            "documentation": "Assertion failed.",
            "version": 0
        },
        {
            "acResult": "AttributeError",
            "type": [
                "type",
                "function"
            ],
            "documentation": "Attribute not found.",
            "version": 0
        },
        {
            "acResult": "EOFError",
            "type": [
                "type",
                "function"
            ],
            "documentation": "Read beyond end of file.",
            "version": 0
        },
        {
            "acResult": "ImportError",
            "type": [
                "type",
                "function"
            ],
            "documentation": "Import can't find module, or can't find name in module.",
            "version": 0
        },
        {
            "acResult": "LookupError",
            "type": [
                "type",
                "function"
            ],
            "documentation": "Base class for lookup errors.",
            "version": 0
        },
        {
            "acResult": "MemoryError",
            "type": [
                "type",
                "function"
            ],
            "documentation": "Out of memory.",
            "version": 0
        },
        {
            "acResult": "NameError",
            "type": [
                "type",
                "function"
            ],
            "documentation": "Name not found globally.",
            "version": 0
        },
        {
            "acResult": "RuntimeError",
            "type": [
                "type",
                "function"
            ],
            "documentation": "Unspecified run-time error.",
            "version": 0
        },
        {
            "acResult": "StopAsyncIteration",
            "type": [
                "type",
                "function"
            ],
            "documentation": "Signal the end from iterator.__anext__().",
            "version": 0
        },
        {
            "acResult": "SyntaxError",
            "type": [
                "type",
                "function"
            ],
            "documentation": "Invalid syntax.",
            "version": 0
        },
        {
            "acResult": "TypeError",
            "type": [
                "type",
                "function"
            ],
            "documentation": "Inappropriate argument type.",
            "version": 0
        },
        {
            "acResult": "ValueError",
            "type": [
                "type",
                "function"
            ],
            "documentation": "Inappropriate argument value (of correct type).",
            "version": 0
        },
        {
            "acResult": "FloatingPointError",
            "type": [
                "type",
                "function"
            ],
            "documentation": "Floating point operation failed.",
            "version": 0
        },
        {
            "acResult": "OverflowError",
            "type": [
                "type",
                "function"
            ],
            "documentation": "Result too large to be represented.",
            "version": 0
        },
        {
            "acResult": "ZeroDivisionError",
            "type": [
                "type",
                "function"
            ],
            "documentation": "Second argument to a division or modulo operation was zero.",
            "version": 0
        },
        {
            "acResult": "IndexError",
            "type": [
                "type",
                "function"
            ],
            "documentation": "Sequence index out of range.",
            "version": 0
        },
        {
            "acResult": "KeyError",
            "type": [
                "type",
                "function"
            ],
            "documentation": "Mapping key not found.",
            "version": 0
        },
        {
            "acResult": "NotImplementedError",
            "type": [
                "type",
                "function"
            ],
            "documentation": "Method or function hasn't been implemented yet.",
            "version": 0
        },
        {
            "acResult": "IndentationError",
            "type": [
                "type",
                "function"
            ],
            "documentation": "Improper indentation.",
            "version": 0
        },
        {
            "acResult": "TabError",
            "type": [
                "type",
                "function"
            ],
            "documentation": "Improper mixture of spaces and tabs.",
            "version": 0
        }
    ],
    "uarray": [],
    "utime": [],
    "speech": [
        {
            "acResult": "translate",
            "type": [
                "function"
            ],
            "documentation": "Translate English words to phonemes.\n\nExample: ``speech.translate('hello world')``\n\n:param words: A string of English words.\n:return: A string containing a best guess at the appropriate phonemes to pronounce.\nThe output is generated from this `text to phoneme translation table <https://github.com/s-macke/SAM/wiki/Text-to-phoneme-translation-table>`_.\n\nThis function should be used to generate a first approximation of phonemes\nthat can be further hand-edited to improve accuracy, inflection and\nemphasis.\n\nSee `the online documentation <https://microbit-micropython.readthedocs.io/en/v2-docs/speech.html>`_ for detailed information.",
            "version": 0,
            "params": [
                {
                    "name": "words"
                }
            ]
        },
        {
            "acResult": "pronounce",
            "type": [
                "function"
            ],
            "documentation": "Pronounce phonemes.\n\nExample: ``speech.pronounce(' /HEHLOW WERLD')``\n\n:param phonemes: The string of phonemes to pronounce\n:param pitch: A number representing the pitch of the voice\n:param speed: A number representing the speed of the voice\n:param mouth: A number representing the mouth of the voice\n:param throat: A number representing the throat of the voice\n:param pin: Optional argument to specify the output pin can be used to override the default of ``pin0``.\nIf we do not want any sound to play out of the pins can use ``pin=None``. micro:bit V2 only.\n\nOverride the optional pitch, speed, mouth and throat settings to change the\ntimbre (quality) of the voice.\n\nSee `the online documentation <https://microbit-micropython.readthedocs.io/en/v2-docs/speech.html>`_ for detailed information.",
            "version": 0,
            "params": [
                {
                    "name": "phonemes"
                },
                {
                    "name": "pitch"
                },
                {
                    "name": "speed",
                    "defaultValue": "128"
                },
                {
                    "name": "mouth",
                    "defaultValue": "128"
                },
                {
                    "name": "throat",
                    "defaultValue": "72"
                },
                {
                    "name": "pin",
                    "defaultValue": "64"
                }
            ]
        },
        {
            "acResult": "say",
            "type": [
                "function"
            ],
            "documentation": "Say English words.\n\nExample: ``speech.say('hello world')``\n\n:param words: The string of words to say.\n:param pitch: A number representing the pitch of the voice\n:param speed: A number representing the speed of the voice\n:param mouth: A number representing the mouth of the voice\n:param throat: A number representing the throat of the voice\n:param pin: Optional argument to specify the output pin can be used to override the default of ``pin0``.\nIf we do not want any sound to play out of the pins can use ``pin=None``. micro:bit V2 only.\n\nThe result is semi-accurate for English. Override the optional pitch, speed,\nmouth and throat settings to change the timbre (quality) of the voice.\n\nThis is a short-hand equivalent of:\n``speech.pronounce(speech.translate(words))``\n\nSee `the online documentation <https://microbit-micropython.readthedocs.io/en/v2-docs/speech.html>`_ for detailed information.",
            "version": 0,
            "params": [
                {
                    "name": "words"
                },
                {
                    "name": "pitch"
                },
                {
                    "name": "speed",
                    "defaultValue": "128"
                },
                {
                    "name": "mouth",
                    "defaultValue": "128"
                },
                {
                    "name": "throat",
                    "defaultValue": "72"
                },
                {
                    "name": "pin",
                    "defaultValue": "64"
                }
            ]
        },
        {
            "acResult": "sing",
            "type": [
                "function"
            ],
            "documentation": "Sing phonemes.\n\nExample: ``speech.sing(' /HEHLOW WERLD')``\n\n:param phonemes: The string of words to sing.\n:param pitch: A number representing the pitch of the voice\n:param speed: A number representing the speed of the voice\n:param mouth: A number representing the mouth of the voice\n:param throat: A number representing the throat of the voice\n:param pin: Optional argument to specify the output pin can be used to override the default of ``pin0``.\nIf we do not want any sound to play out of the pins can use ``pin=None``. micro:bit V2 only.\n\nOverride the optional pitch, speed, mouth and throat settings to change\nthe timbre (quality) of the voice.\n\nSee `the online documentation <https://microbit-micropython.readthedocs.io/en/v2-docs/speech.html>`_ for detailed information.",
            "version": 0,
            "params": [
                {
                    "name": "phonemes"
                },
                {
                    "name": "pitch"
                },
                {
                    "name": "speed",
                    "defaultValue": "128"
                },
                {
                    "name": "mouth",
                    "defaultValue": "128"
                },
                {
                    "name": "throat",
                    "defaultValue": "72"
                },
                {
                    "name": "pin",
                    "defaultValue": "64"
                }
            ]
        }
    ],
    "_typeshed": [
        {
            "acResult": "IdentityFunction",
            "type": [
                "type",
                "function"
            ],
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "SupportsLessThan",
            "type": [
                "type",
                "function"
            ],
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "SupportsDivMod",
            "type": [
                "type",
                "function"
            ],
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "SupportsRDivMod",
            "type": [
                "type",
                "function"
            ],
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "SupportsLenAndGetItem",
            "type": [
                "type",
                "function"
            ],
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "SupportsItems",
            "type": [
                "type",
                "function"
            ],
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "SupportsKeysAndGetItem",
            "type": [
                "type",
                "function"
            ],
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "SupportsGetItem",
            "type": [
                "type",
                "function"
            ],
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "SupportsItemAccess",
            "type": [
                "type",
                "function"
            ],
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "HasFileno",
            "type": [
                "type",
                "function"
            ],
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "SupportsRead",
            "type": [
                "type",
                "function"
            ],
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "SupportsReadline",
            "type": [
                "type",
                "function"
            ],
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "SupportsNoArgReadline",
            "type": [
                "type",
                "function"
            ],
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "SupportsWrite",
            "type": [
                "type",
                "function"
            ],
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "NoneType",
            "type": [
                "type",
                "function"
            ],
            "documentation": "",
            "version": 0
        }
    ],
    "this": [
        {
            "acResult": "authors",
            "type": [
                "function"
            ],
            "documentation": "",
            "version": 0
        }
    ],
    "typing_extensions": [
        {
            "acResult": "_SpecialForm",
            "type": [
                "type",
                "function"
            ],
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "runtime_checkable",
            "type": [
                "function"
            ],
            "documentation": "",
            "version": 0,
            "params": [
                {
                    "name": "cls"
                }
            ]
        },
        {
            "acResult": "Protocol",
            "type": [
                "variable"
            ],
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "Final",
            "type": [
                "variable"
            ],
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "final",
            "type": [
                "function"
            ],
            "documentation": "",
            "version": 0,
            "params": [
                {
                    "name": "f"
                }
            ]
        },
        {
            "acResult": "Literal",
            "type": [
                "variable"
            ],
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "IntVar",
            "type": [
                "function"
            ],
            "documentation": "",
            "version": 0,
            "params": [
                {
                    "name": "name"
                }
            ]
        },
        {
            "acResult": "_TypedDict",
            "type": [
                "type",
                "function"
            ],
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "TypedDict",
            "type": [
                "variable"
            ],
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "get_type_hints",
            "type": [
                "function"
            ],
            "documentation": "",
            "version": 0,
            "params": [
                {
                    "name": "obj"
                },
                {
                    "name": "globalns",
                    "defaultValue": "Ellipsis"
                },
                {
                    "name": "localns",
                    "defaultValue": "Ellipsis"
                },
                {
                    "name": "include_extras",
                    "defaultValue": "Ellipsis"
                }
            ]
        },
        {
            "acResult": "get_args",
            "type": [
                "function"
            ],
            "documentation": "",
            "version": 0,
            "params": [
                {
                    "name": "tp"
                }
            ]
        },
        {
            "acResult": "get_origin",
            "type": [
                "function"
            ],
            "documentation": "",
            "version": 0,
            "params": [
                {
                    "name": "tp"
                }
            ]
        },
        {
            "acResult": "Annotated",
            "type": [
                "variable"
            ],
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "_AnnotatedAlias",
            "type": [
                "variable"
            ],
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "SupportsIndex",
            "type": [
                "type",
                "function"
            ],
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "ParamSpecArgs",
            "type": [
                "type",
                "function"
            ],
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "ParamSpecKwargs",
            "type": [
                "type",
                "function"
            ],
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "ParamSpec",
            "type": [
                "type",
                "function"
            ],
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "Concatenate",
            "type": [
                "variable"
            ],
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "TypeAlias",
            "type": [
                "variable"
            ],
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "TypeGuard",
            "type": [
                "variable"
            ],
            "documentation": "",
            "version": 0
        }
    ],
    "love": [
        {
            "acResult": "badaboom",
            "type": [
                "function"
            ],
            "documentation": "",
            "version": 0
        }
    ],
    "microbit.audio": [
        {
            "acResult": "play",
            "type": [
                "function"
            ],
            "documentation": "Play a built-in sound, sound effect or custom audio frames.\n\nExample: ``audio.play(Sound.GIGGLE)``\n\n:param source: A built-in ``Sound`` such as ``Sound.GIGGLE``, a ``SoundEffect`` or sample data as an iterable of ``AudioFrame`` objects.\n:param wait: If ``wait`` is ``True``, this function will block until the sound is complete.\n:param pin: An optional argument to specify the output pin can be used to  override the default of ``pin0``. If we do not want any sound to play we can use ``pin=None``.\n:param return_pin: Specifies a differential edge connector pin to connect to an external speaker instead of ground. This is ignored for the **V2** revision.",
            "version": 0,
            "params": [
                {
                    "name": "source"
                },
                {
                    "name": "wait",
                    "defaultValue": "None"
                },
                {
                    "name": "pin"
                },
                {
                    "name": "return_pin",
                    "defaultValue": "True"
                }
            ]
        },
        {
            "acResult": "is_playing",
            "type": [
                "function"
            ],
            "documentation": "Check whether a sound is playing.\n\nExample: ``audio.is_playing()``\n\n:return: ``True`` if audio is playing, otherwise ``False``.",
            "version": 0
        },
        {
            "acResult": "stop",
            "type": [
                "function"
            ],
            "documentation": "Stop all audio playback.\n\nExample: ``audio.stop()``",
            "version": 0
        },
        {
            "acResult": "SoundEffect",
            "type": [
                "type",
                "function"
            ],
            "documentation": "A sound effect, composed by a set of parameters configured via the constructor or attributes.",
            "version": 0
        },
        {
            "acResult": "AudioFrame",
            "type": [
                "type",
                "function"
            ],
            "documentation": "An ``AudioFrame`` object is a list of 32 samples each of which is a unsigned byte\n(whole number between 0 and 255).\n\nIt takes just over 4 ms to play a single frame.\n\nExample::\n\n    frame = AudioFrame()\n    for i in range(len(frame)):\n        frame[i] = 252 - i * 8",
            "version": 0
        }
    ],
    "microbit.display": [
        {
            "acResult": "get_pixel",
            "type": [
                "function"
            ],
            "documentation": "Get the brightness of the LED at column ``x`` and row ``y``.\n\nExample: ``display.get_pixel(0, 0)``\n\n:param x: The display column (0..4)\n:param y: The display row (0..4)\n:return: A number between 0 (off) and 9 (bright)",
            "version": 0,
            "params": [
                {
                    "name": "x"
                },
                {
                    "name": "y"
                }
            ]
        },
        {
            "acResult": "set_pixel",
            "type": [
                "function"
            ],
            "documentation": "Set the brightness of the LED at column ``x`` and row ``y``.\n\nExample: ``display.set_pixel(0, 0, 9)``\n\n:param x: The display column (0..4)\n:param y: The display row (0..4)\n:param value: The brightness between 0 (off) and 9 (bright)",
            "version": 0,
            "params": [
                {
                    "name": "x"
                },
                {
                    "name": "y"
                },
                {
                    "name": "value"
                }
            ]
        },
        {
            "acResult": "clear",
            "type": [
                "function"
            ],
            "documentation": "Set the brightness of all LEDs to 0 (off).\n\nExample: ``display.clear()``",
            "version": 0
        },
        {
            "acResult": "show",
            "type": [
                "function"
            ],
            "documentation": "Shows images, letters or digits on the LED display.\n\nExample: ``display.show(Image.HEART)``\n\nWhen ``image`` is an image or a list of images then each image is displayed in turn.\nIf ``image`` is a string or number, each letter or digit is displayed in turn.\n\n:param image: A string, number, image or list of images to show.\n:param delay: Each letter, digit or image is shown with ``delay`` milliseconds between them.\n:param wait: If ``wait`` is ``True``, this function will block until the animation is finished, otherwise the animation will happen in the background.\n:param loop: If ``loop`` is ``True``, the animation will repeat forever.\n:param clear: If ``clear`` is ``True``, the display will be cleared after the sequence has finished.\n\nThe ``wait``, ``loop`` and ``clear`` arguments must be specified using their keyword.",
            "version": 0,
            "params": [
                {
                    "name": "image"
                },
                {
                    "name": "delay",
                    "defaultValue": "False"
                },
                {
                    "name": "wait",
                    "defaultValue": "False"
                },
                {
                    "name": "loop",
                    "defaultValue": "True"
                },
                {
                    "name": "clear",
                    "defaultValue": "400"
                }
            ]
        },
        {
            "acResult": "scroll",
            "type": [
                "function"
            ],
            "documentation": "Scrolls a number or text on the LED display.\n\nExample: ``display.scroll('micro:bit')``\n\n:param text: The string to scroll. If ``text`` is an integer or float it is first converted to a string using ``str()``.\n:param delay: The ``delay`` parameter controls how fast the text is scrolling.\n:param wait: If ``wait`` is ``True``, this function will block until the animation is finished, otherwise the animation will happen in the background.\n:param loop: If ``loop`` is ``True``, the animation will repeat forever.\n:param monospace: If ``monospace`` is ``True``, the characters will all take up 5 pixel-columns in width, otherwise there will be exactly 1 blank pixel-column between each character as they scroll.\n\nThe ``wait``, ``loop`` and ``monospace`` arguments must be specified\nusing their keyword.",
            "version": 0,
            "params": [
                {
                    "name": "text"
                },
                {
                    "name": "delay",
                    "defaultValue": "False"
                },
                {
                    "name": "wait",
                    "defaultValue": "False"
                },
                {
                    "name": "loop",
                    "defaultValue": "True"
                },
                {
                    "name": "monospace",
                    "defaultValue": "150"
                }
            ]
        },
        {
            "acResult": "on",
            "type": [
                "function"
            ],
            "documentation": "Turn on the LED display.\n\nExample: ``display.on()``",
            "version": 0
        },
        {
            "acResult": "off",
            "type": [
                "function"
            ],
            "documentation": "Turn off the LED display (disabling the display allows you to re-use the GPIO pins for other purposes).\n\nExample: ``display.off()``",
            "version": 0
        },
        {
            "acResult": "is_on",
            "type": [
                "function"
            ],
            "documentation": "Check whether the LED display is enabled.\n\nExample: ``display.is_on()``\n\n:return: ``True`` if the display is on, otherwise returns ``False``.",
            "version": 0
        },
        {
            "acResult": "read_light_level",
            "type": [
                "function"
            ],
            "documentation": "Read the light level.\n\nExample: ``display.read_light_level()``\n\nUses the display's LEDs in reverse-bias mode to sense the amount of light\nfalling on the display.\n\n:return: An integer between 0 and 255 representing the light level, with larger meaning more light.",
            "version": 0
        }
    ],
    "microbit": [
        {
            "acResult": "accelerometer",
            "type": [
                "module"
            ],
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "audio",
            "type": [
                "module"
            ],
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "compass",
            "type": [
                "module"
            ],
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "display",
            "type": [
                "module"
            ],
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "i2c",
            "type": [
                "module"
            ],
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "microphone",
            "type": [
                "module"
            ],
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "speaker",
            "type": [
                "module"
            ],
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "spi",
            "type": [
                "module"
            ],
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "uart",
            "type": [
                "module"
            ],
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "run_every",
            "type": [
                "function"
            ],
            "documentation": "Schedule to run a function at the interval specified by the time arguments **V2 only**.\n\nExample: ``run_every(my_logging, min=5)``\n\n``run_every`` can be used in two ways:\n\nAs a Decorator - placed on top of the function to schedule. For example::\n\n    @run_every(h=1, min=20, s=30, ms=50)\n    def my_function():\n        # Do something here\n\nAs a Function - passing the callback as a positional argument. For example::\n\n    def my_function():\n        # Do something here\n    run_every(my_function, s=30)\n\nEach argument corresponds to a different time unit and they are additive.\nSo ``run_every(min=1, s=30)`` schedules the callback every minute and a half.\n\nWhen an exception is thrown inside the callback function it deschedules the\nfunction. To avoid this you can catch exceptions with ``try/except``.\n\n:param callback: Function to call at the provided interval. Omit when using as a decorator.\n:param days: Sets the day mark for the scheduling.\n:param h: Sets the hour mark for the scheduling.\n:param min: Sets the minute mark for the scheduling.\n:param s: Sets the second mark for the scheduling.\n:param ms: Sets the millisecond mark for the scheduling.",
            "version": 0,
            "params": [
                {
                    "name": "callback",
                    "defaultValue": "0"
                },
                {
                    "name": "days",
                    "defaultValue": "0"
                },
                {
                    "name": "h",
                    "defaultValue": "0"
                },
                {
                    "name": "min",
                    "defaultValue": "0"
                },
                {
                    "name": "s",
                    "defaultValue": "0"
                },
                {
                    "name": "ms",
                    "defaultValue": "None"
                }
            ]
        },
        {
            "acResult": "panic",
            "type": [
                "function"
            ],
            "documentation": "Enter a panic mode.\n\nExample: ``panic(127)``\n\n:param n: An arbitrary integer <= 255 to indicate a status.\n\nRequires restart.",
            "version": 0,
            "params": [
                {
                    "name": "n"
                }
            ]
        },
        {
            "acResult": "reset",
            "type": [
                "function"
            ],
            "documentation": "Restart the board.",
            "version": 0
        },
        {
            "acResult": "scale",
            "type": [
                "function",
                "function"
            ],
            "documentation": "Converts a value from a range to an integer range.\n\nExample: ``volume = scale(accelerometer.get_x(), from_=(-2000, 2000), to=(0, 255))``\n\nFor example, to convert an accelerometer X value to a speaker volume.\n\nIf one of the numbers in the ``to`` parameter is a floating point\n(i.e a decimal number like ``10.0``), this function will return a\nfloating point number.\n\n    temp_fahrenheit = scale(30, from_=(0.0, 100.0), to=(32.0, 212.0))\n\n:param value: A number to convert.\n:param from_: A tuple to define the range to convert from.\n:param to: A tuple to define the range to convert to.\n:return: The ``value`` converted to the ``to`` range.",
            "version": 0,
            "params": [
                {
                    "name": "value"
                },
                {
                    "name": "from_"
                },
                {
                    "name": "to"
                }
            ]
        },
        {
            "acResult": "sleep",
            "type": [
                "function"
            ],
            "documentation": "Wait for ``n`` milliseconds.\n\nExample: ``sleep(1000)``\n\n:param n: The number of milliseconds to wait\n\nOne second is 1000 milliseconds, so::\n\n    microbit.sleep(1000)\n\nwill pause the execution for one second.",
            "version": 0,
            "params": [
                {
                    "name": "n"
                }
            ]
        },
        {
            "acResult": "running_time",
            "type": [
                "function"
            ],
            "documentation": "Get the running time of the board.\n\n:return: The number of milliseconds since the board was switched on or restarted.",
            "version": 0
        },
        {
            "acResult": "temperature",
            "type": [
                "function"
            ],
            "documentation": "Get the temperature of the micro:bit in degrees Celsius.",
            "version": 0
        },
        {
            "acResult": "set_volume",
            "type": [
                "function"
            ],
            "documentation": "Sets the volume.\n\nExample: ``set_volume(127)``\n\n:param v: a value between 0 (low) and 255 (high).\n\nOut of range values will be clamped to 0 or 255.\n\n**V2** only.",
            "version": 0,
            "params": [
                {
                    "name": "v"
                }
            ]
        },
        {
            "acResult": "Button",
            "type": [
                "type",
                "function"
            ],
            "documentation": "The class for the buttons ``button_a`` and ``button_b``.",
            "version": 0
        },
        {
            "acResult": "button_a",
            "type": [
                "variable"
            ],
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "button_b",
            "type": [
                "variable"
            ],
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "MicroBitDigitalPin",
            "type": [
                "type",
                "function"
            ],
            "documentation": "A digital pin.\n\nSome pins support analog and touch features using the ``MicroBitAnalogDigitalPin`` and ``MicroBitTouchPin`` subclasses.",
            "version": 0
        },
        {
            "acResult": "MicroBitAnalogDigitalPin",
            "type": [
                "type",
                "function"
            ],
            "documentation": "A pin with analog and digital features.",
            "version": 0
        },
        {
            "acResult": "MicroBitTouchPin",
            "type": [
                "type",
                "function"
            ],
            "documentation": "A pin with analog, digital and touch features.",
            "version": 0
        },
        {
            "acResult": "pin0",
            "type": [
                "variable"
            ],
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "pin1",
            "type": [
                "variable"
            ],
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "pin2",
            "type": [
                "variable"
            ],
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "pin3",
            "type": [
                "variable"
            ],
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "pin4",
            "type": [
                "variable"
            ],
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "pin5",
            "type": [
                "variable"
            ],
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "pin6",
            "type": [
                "variable"
            ],
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "pin7",
            "type": [
                "variable"
            ],
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "pin8",
            "type": [
                "variable"
            ],
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "pin9",
            "type": [
                "variable"
            ],
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "pin10",
            "type": [
                "variable"
            ],
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "pin11",
            "type": [
                "variable"
            ],
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "pin12",
            "type": [
                "variable"
            ],
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "pin13",
            "type": [
                "variable"
            ],
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "pin14",
            "type": [
                "variable"
            ],
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "pin15",
            "type": [
                "variable"
            ],
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "pin16",
            "type": [
                "variable"
            ],
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "pin19",
            "type": [
                "variable"
            ],
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "pin20",
            "type": [
                "variable"
            ],
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "pin_logo",
            "type": [
                "variable"
            ],
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "pin_speaker",
            "type": [
                "variable"
            ],
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "Image",
            "type": [
                "type",
                "function"
            ],
            "documentation": "An image to show on the micro:bit LED display.\n\nGiven an image object it's possible to display it via the ``display`` API::\n\n    display.show(Image.HAPPY)",
            "version": 0
        },
        {
            "acResult": "SoundEvent",
            "type": [
                "type",
                "function"
            ],
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "Sound",
            "type": [
                "type",
                "function"
            ],
            "documentation": "The built-in sounds can be called using ``audio.play(Sound.NAME)``.",
            "version": 0
        },
        {
            "acResult": "__doc__",
            "type": [
                "module"
            ],
            "documentation": "Pins, images, sounds, temperature and volume.",
            "version": 0
        }
    ],
    "microbit.speaker": [
        {
            "acResult": "off",
            "type": [
                "function"
            ],
            "documentation": "Turn the speaker off.\n\nExample: ``speaker.off()``\n\nThis does not disable sound output to an edge connector pin.",
            "version": 0
        },
        {
            "acResult": "on",
            "type": [
                "function"
            ],
            "documentation": "Turn the speaker on.\n\nExample: ``speaker.on()``",
            "version": 0
        }
    ],
    "microbit.i2c": [
        {
            "acResult": "init",
            "type": [
                "function"
            ],
            "documentation": "Re-initialize a peripheral.\n\nExample: ``i2c.init()``\n\n:param freq: clock frequency\n:param sda: ``sda`` pin (default 20)\n:param scl: ``scl`` pin (default 19)\n\nOn a micro:bit V1 board, changing the I\u00b2C pins from defaults will make\nthe accelerometer and compass stop working, as they are connected\ninternally to those pins. This warning does not apply to the **V2**\nrevision of the micro:bit as this has `separate I\u00b2C lines <https://tech.microbit.org/hardware/i2c/>`_\nfor the motion sensors and the edge connector.",
            "version": 0,
            "params": [
                {
                    "name": "freq"
                },
                {
                    "name": "sda"
                },
                {
                    "name": "scl",
                    "defaultValue": "100000"
                }
            ]
        },
        {
            "acResult": "scan",
            "type": [
                "function"
            ],
            "documentation": "Scan the bus for devices.\n\nExample: ``i2c.scan()``\n\n:return: A list of 7-bit addresses corresponding to those devices that responded to the scan.",
            "version": 0
        },
        {
            "acResult": "read",
            "type": [
                "function"
            ],
            "documentation": "Read bytes from a device.\n\nExample: ``i2c.read(0x50, 64)``\n\n:param addr: The 7-bit address of the device\n:param n: The number of bytes to read\n:param repeat: If ``True``, no stop bit will be sent\n:return: The bytes read",
            "version": 0,
            "params": [
                {
                    "name": "addr"
                },
                {
                    "name": "n"
                },
                {
                    "name": "repeat",
                    "defaultValue": "False"
                }
            ]
        },
        {
            "acResult": "write",
            "type": [
                "function"
            ],
            "documentation": "Write bytes to a device.\n\nExample: ``i2c.write(0x50, bytes([1, 2, 3]))``\n\n:param addr: The 7-bit address of the device\n:param buf: A buffer containing the bytes to write\n:param repeat: If ``True``, no stop bit will be sent",
            "version": 0,
            "params": [
                {
                    "name": "addr"
                },
                {
                    "name": "buf"
                },
                {
                    "name": "repeat",
                    "defaultValue": "False"
                }
            ]
        }
    ],
    "microbit.compass": [
        {
            "acResult": "calibrate",
            "type": [
                "function"
            ],
            "documentation": "Starts the calibration process.\n\nExample: ``compass.calibrate()``\n\nAn instructive message will be scrolled to the user after which they will need\nto rotate the device in order to draw a circle on the LED display.",
            "version": 0
        },
        {
            "acResult": "is_calibrated",
            "type": [
                "function"
            ],
            "documentation": "Check is the compass is calibrated.\n\nExample: ``compass.is_calibrated()``\n\n:return: ``True`` if the compass has been successfully calibrated, ``False`` otherwise.",
            "version": 0
        },
        {
            "acResult": "clear_calibration",
            "type": [
                "function"
            ],
            "documentation": "Undoes the calibration, making the compass uncalibrated again.\n\nExample: ``compass.clear_calibration()``",
            "version": 0
        },
        {
            "acResult": "get_x",
            "type": [
                "function"
            ],
            "documentation": "Get the magnetic field strength on the ``x`` axis.\n\nExample: ``compass.get_x()``\n\nCall ``calibrate`` first or the results will be inaccurate.\n\n:return: A positive or negative integer in nano tesla representing the magnitude and direction of the field.",
            "version": 0
        },
        {
            "acResult": "get_y",
            "type": [
                "function"
            ],
            "documentation": "Get the magnetic field strength on the ``y`` axis.\n\nExample: ``compass.get_y()``\n\nCall ``calibrate`` first or the results will be inaccurate.\n\n:return: A positive or negative integer in nano tesla representing the magnitude and direction of the field.",
            "version": 0
        },
        {
            "acResult": "get_z",
            "type": [
                "function"
            ],
            "documentation": "Get the magnetic field strength on the ``z`` axis.\n\nExample: ``compass.get_z()``\n\nCall ``calibrate`` first or the results will be inaccurate.\n\n:return: A positive or negative integer in nano tesla representing the magnitude and direction of the field.",
            "version": 0
        },
        {
            "acResult": "heading",
            "type": [
                "function"
            ],
            "documentation": "Get the compass heading.\n\nExample: ``compass.heading()``\n\n:return: An integer in the range from 0 to 360, representing the angle in degrees, clockwise, with north as 0.",
            "version": 0
        },
        {
            "acResult": "get_field_strength",
            "type": [
                "function"
            ],
            "documentation": "Get the magnitude of the magnetic field around the device.\n\nExample: ``compass.get_field_strength()``\n\n:return: An integer indication of the magnitude of the magnetic field in nano tesla.",
            "version": 0
        }
    ],
    "microbit.uart": [
        {
            "acResult": "ODD",
            "type": [
                "variable"
            ],
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "EVEN",
            "type": [
                "variable"
            ],
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "init",
            "type": [
                "function"
            ],
            "documentation": "Initialize serial communication.\n\nExample: ``uart.init(115200, tx=pin0, rx=pin1)``\n\n:param baudrate: The speed of communication.\n:param bits: The size of bytes being transmitted. micro:bit only supports 8.\n:param parity: How parity is checked, ``None``, ``uart.ODD`` or ``uart.EVEN``.\n:param stop: The number of stop bits, has to be 1 for micro:bit.\n:param tx: Transmitting pin.\n:param rx: Receiving pin.\n\nInitializing the UART on external pins will cause the Python console on\nUSB to become unaccessible, as it uses the same hardware. To bring the\nconsole back you must reinitialize the UART without passing anything for\n``tx`` or ``rx`` (or passing ``None`` to these arguments).  This means\nthat calling ``uart.init(115200)`` is enough to restore the Python console.\n\nFor more details see `the online documentation <https://microbit-micropython.readthedocs.io/en/v2-docs/uart.html>`_.",
            "version": 0,
            "params": [
                {
                    "name": "baudrate",
                    "defaultValue": "None"
                },
                {
                    "name": "bits",
                    "defaultValue": "None"
                },
                {
                    "name": "parity",
                    "defaultValue": "1"
                },
                {
                    "name": "stop",
                    "defaultValue": "None"
                },
                {
                    "name": "tx",
                    "defaultValue": "8"
                },
                {
                    "name": "rx",
                    "defaultValue": "9600"
                }
            ]
        },
        {
            "acResult": "any",
            "type": [
                "function"
            ],
            "documentation": "Check if any data is waiting.\n\nExample: ``uart.any()``\n\n:return: ``True`` if any data is waiting, else ``False``.",
            "version": 0
        },
        {
            "acResult": "read",
            "type": [
                "function"
            ],
            "documentation": "Read bytes.\n\nExample: ``uart.read()``\n\n:param nbytes: If ``nbytes`` is specified then read at most that many bytes, otherwise read as many bytes as possible\n:return: A bytes object or ``None`` on timeout",
            "version": 0,
            "params": [
                {
                    "name": "nbytes",
                    "defaultValue": "None"
                }
            ]
        },
        {
            "acResult": "readinto",
            "type": [
                "function"
            ],
            "documentation": "Read bytes into the ``buf``.\n\nExample: ``uart.readinto(input_buffer)``\n\n:param buf: The buffer to write to.\n:param nbytes: If ``nbytes`` is specified then read at most that many bytes, otherwise read ``len(buf)`` bytes.\n:return: number of bytes read and stored into ``buf`` or ``None`` on timeout.",
            "version": 0,
            "params": [
                {
                    "name": "buf"
                },
                {
                    "name": "nbytes",
                    "defaultValue": "None"
                }
            ]
        },
        {
            "acResult": "readline",
            "type": [
                "function"
            ],
            "documentation": "Read a line, ending in a newline character.\n\nExample: ``uart.readline()``\n\n:return: The line read or ``None`` on timeout. The newline character is included in the returned bytes.",
            "version": 0
        },
        {
            "acResult": "write",
            "type": [
                "function"
            ],
            "documentation": "Write a buffer to the bus.\n\nExample: ``uart.write('hello world')``\n\n:param buf: A bytes object or a string.\n:return: The number of bytes written, or ``None`` on timeout.\n\nExamples::\n\n    uart.write('hello world')\n    uart.write(b'hello world')\n    uart.write(bytes([1, 2, 3]))",
            "version": 0,
            "params": [
                {
                    "name": "buf"
                }
            ]
        }
    ],
    "microbit.spi": [
        {
            "acResult": "init",
            "type": [
                "function"
            ],
            "documentation": "Initialize SPI communication.\n\nExample: ``spi.init()``\n\nFor correct communication, the parameters have to be the same on both communicating devices.\n\n:param baudrate: The speed of communication.\n:param bits: The width in bits of each transfer. Currently only ``bits=8`` is supported. However, this may change in the future.\n:param mode: Determines the combination of clock polarity and phase - `see online table <https://microbit-micropython.readthedocs.io/en/v2-docs/spi.html#microbit.spi.init>`_.\n:param sclk: sclk pin (default 13)\n:param mosi: mosi pin (default 15)\n:param miso: miso pin (default 14)",
            "version": 0,
            "params": [
                {
                    "name": "baudrate"
                },
                {
                    "name": "bits"
                },
                {
                    "name": "mode"
                },
                {
                    "name": "sclk",
                    "defaultValue": "0"
                },
                {
                    "name": "mosi",
                    "defaultValue": "8"
                },
                {
                    "name": "miso",
                    "defaultValue": "1000000"
                }
            ]
        },
        {
            "acResult": "read",
            "type": [
                "function"
            ],
            "documentation": "Read at most ``nbytes`` while continuously writing the single byte given by ``out``.\n\nExample: ``spi.read(64)``\n\n:param nbytes: Maximum number of bytes to read.\n:param out: The byte value to write (default 0).\n:return: The bytes read.",
            "version": 0,
            "params": [
                {
                    "name": "nbytes"
                },
                {
                    "name": "out",
                    "defaultValue": "0"
                }
            ]
        },
        {
            "acResult": "write",
            "type": [
                "function"
            ],
            "documentation": "Write bytes to the bus.\n\nExample: ``spi.write(bytes([1, 2, 3]))``\n\n:param buffer: A buffer to read data from.",
            "version": 0,
            "params": [
                {
                    "name": "buffer"
                }
            ]
        },
        {
            "acResult": "write_readinto",
            "type": [
                "function"
            ],
            "documentation": "Write the ``out`` buffer to the bus and read any response into the ``in_`` buffer.\n\nExample: ``spi.write_readinto(out_buffer, in_buffer)``\n\nThe length of the buffers should be the same. The buffers can be the same object.\n\n:param out: The buffer to write any response to.\n:param in_: The buffer to read data from.",
            "version": 0,
            "params": [
                {
                    "name": "out"
                },
                {
                    "name": "in_"
                }
            ]
        }
    ],
    "microbit.accelerometer": [
        {
            "acResult": "get_x",
            "type": [
                "function"
            ],
            "documentation": "Get the acceleration measurement in the ``x`` axis in milli-g.\n\nExample: ``accelerometer.get_x()``\n\n:return: A positive or negative integer depending on direction in the range +/- 2000mg.",
            "version": 0
        },
        {
            "acResult": "get_y",
            "type": [
                "function"
            ],
            "documentation": "Get the acceleration measurement in the ``y`` axis in milli-g.\n\nExample: ``accelerometer.get_y()``\n\n:return: A positive or negative integer depending on direction in the range +/- 2000mg.",
            "version": 0
        },
        {
            "acResult": "get_z",
            "type": [
                "function"
            ],
            "documentation": "Get the acceleration measurement in the ``z`` axis in milli-g.\n\nExample: ``accelerometer.get_z()``\n\n:return: A positive or negative integer depending on direction in the range +/- 2000mg.",
            "version": 0
        },
        {
            "acResult": "get_values",
            "type": [
                "function"
            ],
            "documentation": "Get the acceleration measurements in all axes at once as a tuple.\n\nExample: ``x, y, z = accelerometer.get_values()``\n\n:return: a three-element tuple of integers ordered as X, Y, Z, each value a positive or negative integer depending on direction in the range +/- 2000mg",
            "version": 0
        },
        {
            "acResult": "get_strength",
            "type": [
                "function"
            ],
            "documentation": "Get the acceleration measurement of all axes combined, as a positive integer. This is the Pythagorean sum of the X, Y and Z axes.\n\nExample: ``accelerometer.get_strength()``\n\n:return: The combined acceleration strength of all the axes, in milli-g.",
            "version": 0
        },
        {
            "acResult": "current_gesture",
            "type": [
                "function"
            ],
            "documentation": "Get the name of the current gesture.\n\nExample: ``accelerometer.current_gesture()``\n\nMicroPython understands the following gesture names: ``\"up\"``, ``\"down\"``,\n``\"left\"``, ``\"right\"``, ``\"face up\"``, ``\"face down\"``, ``\"freefall\"``,\n``\"3g\"``, ``\"6g\"``, ``\"8g\"``, ``\"shake\"``. Gestures are always\nrepresented as strings.\n\n:return: The current gesture",
            "version": 0
        },
        {
            "acResult": "is_gesture",
            "type": [
                "function"
            ],
            "documentation": "Check if the named gesture is currently active.\n\nExample: ``accelerometer.is_gesture('shake')``\n\nMicroPython understands the following gesture names: ``\"up\"``, ``\"down\"``,\n``\"left\"``, ``\"right\"``, ``\"face up\"``, ``\"face down\"``, ``\"freefall\"``,\n``\"3g\"``, ``\"6g\"``, ``\"8g\"``, ``\"shake\"``. Gestures are always\nrepresented as strings.\n\n:param name: The gesture name.\n:return: ``True`` if the gesture is active, ``False`` otherwise.",
            "version": 0,
            "params": [
                {
                    "name": "name"
                }
            ]
        },
        {
            "acResult": "was_gesture",
            "type": [
                "function"
            ],
            "documentation": "Check if the named gesture was active since the last call.\n\nExample: ``accelerometer.was_gesture('shake')``\n\nMicroPython understands the following gesture names: ``\"up\"``, ``\"down\"``,\n``\"left\"``, ``\"right\"``, ``\"face up\"``, ``\"face down\"``, ``\"freefall\"``,\n``\"3g\"``, ``\"6g\"``, ``\"8g\"``, ``\"shake\"``. Gestures are always\nrepresented as strings.\n\n:param name: The gesture name.\n:return: ``True`` if the gesture was active since the last call, ``False`` otherwise.",
            "version": 0,
            "params": [
                {
                    "name": "name"
                }
            ]
        },
        {
            "acResult": "get_gestures",
            "type": [
                "function"
            ],
            "documentation": "Return a tuple of the gesture history.\n\nExample: ``accelerometer.get_gestures()``\n\nClears the gesture history before returning.\n\nGestures are not updated in the background so there needs to be constant\ncalls to some accelerometer method to do the gesture detection. Usually\ngestures can be detected using a loop with a small :func:`microbit.sleep` delay.\n\n:return: The history as a tuple, most recent last.",
            "version": 0
        },
        {
            "acResult": "set_range",
            "type": [
                "function"
            ],
            "documentation": "Set the accelerometer sensitivity range, in g (standard gravity), to the closest values supported by the hardware, so it rounds to either ``2``, ``4``, or ``8`` g.\n\nExample: ``accelerometer.set_range(8)``\n\n:param value: New range for the accelerometer, an integer in ``g``.",
            "version": 0,
            "params": [
                {
                    "name": "value"
                }
            ]
        }
    ],
    "microbit.microphone": [
        {
            "acResult": "current_event",
            "type": [
                "function"
            ],
            "documentation": "Get the last recorded sound event\n\nExample: ``microphone.current_event()``\n\n:return: The event, ``SoundEvent('loud')`` or ``SoundEvent('quiet')``.",
            "version": 0
        },
        {
            "acResult": "was_event",
            "type": [
                "function"
            ],
            "documentation": "Check if a sound was heard at least once since the last call.\n\nExample: ``microphone.was_event(SoundEvent.LOUD)``\n\nThis call clears the sound history before returning.\n\n:param event: The event to check for,  such as ``SoundEvent.LOUD`` or ``SoundEvent.QUIET``\n:return: ``True`` if sound was heard at least once since the last call, otherwise ``False``.",
            "version": 0,
            "params": [
                {
                    "name": "event"
                }
            ]
        },
        {
            "acResult": "is_event",
            "type": [
                "function"
            ],
            "documentation": "Check the most recent sound event detected.\n\nExample: ``microphone.is_event(SoundEvent.LOUD)``\n\nThis call does not clear the sound event history.\n\n:param event: The event to check for,  such as ``SoundEvent.LOUD`` or ``SoundEvent.QUIET``\n:return: ``True`` if sound was the most recent heard, ``False`` otherwise.",
            "version": 0,
            "params": [
                {
                    "name": "event"
                }
            ]
        },
        {
            "acResult": "get_events",
            "type": [
                "function"
            ],
            "documentation": "Get the sound event history as a tuple.\n\nExample: ``microphone.get_events()``\n\nThis call clears the sound history before returning.\n\n:return: A tuple of the event history with the most recent event last.",
            "version": 0
        },
        {
            "acResult": "set_threshold",
            "type": [
                "function"
            ],
            "documentation": "Set the threshold for a sound event.\n\nExample: ``microphone.set_threshold(SoundEvent.LOUD, 250)``\n\nA high threshold means the event will only trigger if the sound is very loud (>= 250 in the example).\n\n:param event: A sound event, such as ``SoundEvent.LOUD`` or ``SoundEvent.QUIET``.\n:param value: The threshold level in the range 0-255.",
            "version": 0,
            "params": [
                {
                    "name": "event"
                },
                {
                    "name": "value"
                }
            ]
        },
        {
            "acResult": "sound_level",
            "type": [
                "function"
            ],
            "documentation": "Get the sound pressure level.\n\nExample: ``microphone.sound_level()``\n\n:return: A representation of the sound pressure level in the range 0 to 255.",
            "version": 0
        }
    ],
    "struct": [
        {
            "acResult": "calcsize",
            "type": [
                "function"
            ],
            "documentation": "Get the number of bytes needed to store the given ``fmt``.\n\nExample: ``struct.calcsize('hf')``\n\n:param fmt: A format string.\n:return The number of bytes needed to store such a value.",
            "version": 0,
            "params": [
                {
                    "name": "fmt"
                }
            ]
        },
        {
            "acResult": "pack",
            "type": [
                "function"
            ],
            "documentation": "Pack values according to a format string.\n\nExample: ``struct.pack('hf', 1, 3.1415)``\n\n:param fmt: The format string.\n:param v1: The first value.\n:param *vn: The remaining values.\n:return A bytes object encoding the values.",
            "version": 0,
            "params": [
                {
                    "name": "fmt"
                },
                {
                    "name": "v1"
                }
            ]
        },
        {
            "acResult": "pack_into",
            "type": [
                "function"
            ],
            "documentation": "Pack values according to a format string.\n\nExample: ``struct.pack_info('hf', buffer, 1, 3.1415)``\n\n:param fmt: The format string.\n:param buffer: The target buffer to write into.\n:param offset: The offset into the buffer. May be negative to count from the end of the buffer.\n:param v1: The first value.\n:param *vn: The remaining values.",
            "version": 0,
            "params": [
                {
                    "name": "fmt"
                },
                {
                    "name": "buffer"
                },
                {
                    "name": "offset"
                },
                {
                    "name": "v1"
                }
            ]
        },
        {
            "acResult": "unpack",
            "type": [
                "function"
            ],
            "documentation": "Unpack data according to a format string.\n\nExample: ``v1, v2 = struct.unpack('hf', buffer)``\n\n:param fmt: The format string.\n:param data: The data.\n:return: A tuple of the unpacked values.",
            "version": 0,
            "params": [
                {
                    "name": "fmt"
                },
                {
                    "name": "data"
                }
            ]
        },
        {
            "acResult": "unpack_from",
            "type": [
                "function"
            ],
            "documentation": "Unpack data from a buffer according to a format string.\n\nExample: ``v1, v2 = struct.unpack_from('hf', buffer)``\n\n:param fmt: The format string.\n:param buffer: The source buffer to read from.\n:param offset: The offset into the buffer. May be negative to count from the end of the buffer.\n:return: A tuple of the unpacked values.",
            "version": 0,
            "params": [
                {
                    "name": "fmt"
                },
                {
                    "name": "buffer"
                },
                {
                    "name": "offset",
                    "defaultValue": "0"
                }
            ]
        }
    ],
    "uerrno": [],
    "usys": [],
    "os": [
        {
            "acResult": "listdir",
            "type": [
                "function"
            ],
            "documentation": "List files.\n\nExample: ``os.listdir()``\n\n:return: A list of the names of all the files contained within the local\npersistent on-device file system.",
            "version": 0,
            "params": [
                {
                    "name": "path",
                    "defaultValue": "None"
                }
            ]
        },
        {
            "acResult": "remove",
            "type": [
                "function"
            ],
            "documentation": "Remove (delete) a file.\n\nExample: ``os.remove('data.txt')``\n\n:param filename: The file to delete.\n\nIf the file does not exist an ``OSError`` exception will occur.",
            "version": 0,
            "params": [
                {
                    "name": "filename"
                }
            ]
        },
        {
            "acResult": "size",
            "type": [
                "function"
            ],
            "documentation": "Returns the size of a file.\n\nExample: ``os.size('data.txt')``\n\n:param filename: The file\n:return: The size in bytes.\n\nIf the file does not exist an ``OSError`` exception will occur.",
            "version": 0,
            "params": [
                {
                    "name": "filename"
                }
            ]
        },
        {
            "acResult": "uname_result",
            "type": [
                "type",
                "function"
            ],
            "documentation": "Result of ``os.uname()``",
            "version": 0,
            "params": [
                {
                    "name": "iterable",
                    "defaultValue": "()"
                }
            ]
        },
        {
            "acResult": "uname",
            "type": [
                "function"
            ],
            "documentation": "Returns information identifying the current operating system.\n\nExample: ``os.uname()``\n\nThe return value is an object with five attributes:\n\n- ``sysname`` - operating system name\n- ``nodename`` - name of machine on network (implementation-defined)\n- ``release`` - operating system release\n- ``version`` - operating system version\n- ``machine`` - hardware identifier\n\nThere is no underlying operating system in MicroPython. As a result the\ninformation returned by the ``uname`` function is mostly useful for\nversioning details.",
            "version": 0
        }
    ],
    "log": [
        {
            "acResult": "set_labels",
            "type": [
                "function"
            ],
            "documentation": "Set up the log file header.\n\nExample: ``log.set_labels('X', 'Y', 'Z', timestamp=log.MINUTES)``\n\nIdeally this function should be called a single time, before any data is\nlogged, to configure the data table header once.\n\nIf a log file already exists when the program starts, or if this function\nis called multiple times, it will check the labels already defined in the\nlog file. If this function call contains any new labels not already\npresent, it will generate a new header row with the additional columns.\n\nBy default the first column contains a timestamp for each row. The time\nunit can be selected via the timestamp argument.\n\n:param *labels: Any number of positional arguments, each corresponding to an entry in the log header.\n:param timestamp: Select the timestamp unit that will be automatically added as the first column in every row. Timestamp values can be one of ``log.MILLISECONDS``, ``log.SECONDS``, ``log.MINUTES``, ``log.HOURS``, ``log.DAYS`` or ``None`` to disable the timestamp. The default value is ``log.SECONDS``.",
            "version": 0
        },
        {
            "acResult": "add",
            "type": [
                "function",
                "function"
            ],
            "documentation": "Add a data row to the log by passing a dictionary of headers and values.\n\nExample: ``log.add({ 'temp': temperature() })``\n\nEach call to this function adds a row to the log.\n\nNew labels not previously specified via the set_labels function, or by a\nprevious call to this function, will trigger a new header entry to be added\nto the log with the extra labels.\n\nLabels previously specified and not present in a call to this function will\nbe skipped with an empty value in the log row.\n\n:param data_dictionary: The data to log as a dictionary with a key for each header.",
            "version": 0,
            "params": [
                {
                    "name": "data_dictionary"
                }
            ]
        },
        {
            "acResult": "delete",
            "type": [
                "function"
            ],
            "documentation": "Deletes the contents of the log, including headers.\n\nExample: ``log.delete()``\n\nTo add the log headers again the ``set_labels`` function should to be called after this function.\n\nThere are two erase modes; \u201cfull\u201d completely removes the data from the physical storage,\nand \u201cfast\u201d invalidates the data without removing it.\n\n:param full: ``True`` selects a \u201cfull\u201d erase and ``False`` selects the \u201cfast\u201d erase method.",
            "version": 0,
            "params": [
                {
                    "name": "full",
                    "defaultValue": "False"
                }
            ]
        },
        {
            "acResult": "set_mirroring",
            "type": [
                "function"
            ],
            "documentation": "Configure mirroring of the data logging activity to the serial output.\n\nExample: ``log.set_mirroring(True)``\n\nSerial mirroring is disabled by default. When enabled, it will print to serial each row logged into the log file.\n\n:param serial: ``True`` enables mirroring data to the serial output.",
            "version": 0,
            "params": [
                {
                    "name": "serial"
                }
            ]
        }
    ],
    "types": [
        {
            "acResult": "_Cell",
            "type": [
                "type",
                "function"
            ],
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "FunctionType",
            "type": [
                "type",
                "function"
            ],
            "documentation": "Create a function object.\n\ncode\n  a code object\nglobals\n  the globals dictionary\nname\n  a string that overrides the name from the code object\nargdefs\n  a tuple that specifies the default argument values\nclosure\n  a tuple that supplies the bindings for free variables",
            "version": 0,
            "params": [
                {
                    "name": "code"
                },
                {
                    "name": "globals"
                },
                {
                    "name": "name",
                    "defaultValue": "None"
                },
                {
                    "name": "argdefs",
                    "defaultValue": "None"
                },
                {
                    "name": "closure",
                    "defaultValue": "None"
                }
            ]
        },
        {
            "acResult": "CodeType",
            "type": [
                "type",
                "function"
            ],
            "documentation": "Create a code object.  Not for the faint of heart.",
            "version": 0
        },
        {
            "acResult": "MappingProxyType",
            "type": [
                "type",
                "function"
            ],
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "SimpleNamespace",
            "type": [
                "type",
                "function"
            ],
            "documentation": "A simple attribute-based namespace.\n\nSimpleNamespace(**kwargs)",
            "version": 0
        },
        {
            "acResult": "ModuleType",
            "type": [
                "type",
                "function"
            ],
            "documentation": "Create a module object.\n\nThe name must be a string; the optional doc argument can have any type.",
            "version": 0,
            "params": [
                {
                    "name": "name"
                },
                {
                    "name": "doc",
                    "defaultValue": "None"
                }
            ]
        },
        {
            "acResult": "GeneratorType",
            "type": [
                "type",
                "function"
            ],
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "AsyncGeneratorType",
            "type": [
                "type",
                "function"
            ],
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "CoroutineType",
            "type": [
                "type",
                "function"
            ],
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "_StaticFunctionType",
            "type": [
                "type",
                "function"
            ],
            "documentation": "Fictional type to correct the type of MethodType.__func__.\n\nFunctionType is a descriptor, so mypy follows the descriptor protocol and\nconverts MethodType.__func__ back to MethodType (the return type of\nFunctionType.__get__). But this is actually a special case; MethodType is\nimplemented in C and its attribute access doesn't go through\n__getattribute__.\n\nBy wrapping FunctionType in _StaticFunctionType, we get the right result;\nsimilar to wrapping a function in staticmethod() at runtime to prevent it\nbeing bound as a method.",
            "version": 0
        },
        {
            "acResult": "MethodType",
            "type": [
                "type",
                "function"
            ],
            "documentation": "Create a bound instance method object.",
            "version": 0
        },
        {
            "acResult": "BuiltinFunctionType",
            "type": [
                "type",
                "function"
            ],
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "WrapperDescriptorType",
            "type": [
                "type",
                "function"
            ],
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "MethodWrapperType",
            "type": [
                "type",
                "function"
            ],
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "MethodDescriptorType",
            "type": [
                "type",
                "function"
            ],
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "ClassMethodDescriptorType",
            "type": [
                "type",
                "function"
            ],
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "TracebackType",
            "type": [
                "type",
                "function"
            ],
            "documentation": "Create a new traceback object.",
            "version": 0
        },
        {
            "acResult": "FrameType",
            "type": [
                "type",
                "function"
            ],
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "GetSetDescriptorType",
            "type": [
                "type",
                "function"
            ],
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "MemberDescriptorType",
            "type": [
                "type",
                "function"
            ],
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "new_class",
            "type": [
                "function",
                "function"
            ],
            "documentation": "Create a class object dynamically using the appropriate metaclass.",
            "version": 0,
            "params": [
                {
                    "name": "name"
                },
                {
                    "name": "bases",
                    "defaultValue": "Ellipsis"
                },
                {
                    "name": "kwds",
                    "defaultValue": "Ellipsis"
                },
                {
                    "name": "exec_body",
                    "defaultValue": "Ellipsis"
                }
            ]
        },
        {
            "acResult": "resolve_bases",
            "type": [
                "function"
            ],
            "documentation": "Resolve MRO entries dynamically as specified by PEP 560.",
            "version": 0,
            "params": [
                {
                    "name": "bases"
                }
            ]
        },
        {
            "acResult": "prepare_class",
            "type": [
                "function"
            ],
            "documentation": "Call the __prepare__ method of the appropriate metaclass.\n\nReturns (metaclass, namespace, kwds) as a 3-tuple\n\n*metaclass* is the appropriate metaclass\n*namespace* is the prepared class namespace\n*kwds* is an updated copy of the passed in kwds argument with any\n'metaclass' entry removed. If no kwds argument is passed in, this will\nbe an empty dict.",
            "version": 0,
            "params": [
                {
                    "name": "name"
                },
                {
                    "name": "bases",
                    "defaultValue": "Ellipsis"
                },
                {
                    "name": "kwds",
                    "defaultValue": "Ellipsis"
                }
            ]
        },
        {
            "acResult": "coroutine",
            "type": [
                "function"
            ],
            "documentation": "Convert regular generator function to a coroutine.",
            "version": 0,
            "params": [
                {
                    "name": "func"
                }
            ]
        },
        {
            "acResult": "GenericAlias",
            "type": [
                "type",
                "function"
            ],
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "NoneType",
            "type": [
                "type",
                "function"
            ],
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "UnionType",
            "type": [
                "type",
                "function"
            ],
            "documentation": "",
            "version": 0
        }
    ],
    "typing": [
        {
            "acResult": "TypeVar",
            "type": [
                "type",
                "function"
            ],
            "documentation": "Type variable.\n\nUsage::\n\n  T = TypeVar('T')  # Can be anything\n  A = TypeVar('A', str, bytes)  # Must be str or bytes\n\nType variables exist primarily for the benefit of static type\ncheckers.  They serve as the parameters for generic types as well\nas for generic function definitions.  See class Generic for more\ninformation on generic types.  Generic functions work as follows:\n\n  def repeat(x: T, n: int) -> List[T]:\n      '''Return a list containing n references to x.'''\n      return [x]*n\n\n  def longest(x: A, y: A) -> A:\n      '''Return the longest of two strings.'''\n      return x if len(x) >= len(y) else y\n\nThe latter example's signature is essentially the overloading\nof (str, str) -> str and (bytes, bytes) -> bytes.  Also note\nthat if the arguments are instances of some subclass of str,\nthe return type is still plain str.\n\nAt runtime, isinstance(x, T) and issubclass(C, T) will raise TypeError.\n\nType variables defined with covariant=True or contravariant=True\ncan be used to declare covariant or contravariant generic types.\nSee PEP 484 for more details. By default generic types are invariant\nin all type variables.\n\nType variables can be introspected. e.g.:\n\n  T.__name__ == 'T'\n  T.__constraints__ == ()\n  T.__covariant__ == False\n  T.__contravariant__ = False\n  A.__constraints__ == (str, bytes)\n\nNote that only type variables defined in global scope can be pickled.",
            "version": 0,
            "params": [
                {
                    "name": "self"
                },
                {
                    "name": "name"
                }
            ]
        },
        {
            "acResult": "_SpecialForm",
            "type": [
                "type",
                "function"
            ],
            "documentation": "Internal indicator of special typing constructs.\nSee _doc instance attribute for specific docs.",
            "version": 0,
            "params": [
                {
                    "name": "cls"
                }
            ]
        },
        {
            "acResult": "overload",
            "type": [
                "function"
            ],
            "documentation": "Decorator for overloaded functions/methods.\n\nIn a stub file, place two or more stub definitions for the same\nfunction in a row, each decorated with @overload.  For example:\n\n  @overload\n  def utf8(value: None) -> None: ...\n  @overload\n  def utf8(value: bytes) -> bytes: ...\n  @overload\n  def utf8(value: str) -> bytes: ...\n\nIn a non-stub file (i.e. a regular .py file), do the same but\nfollow it with an implementation.  The implementation should *not*\nbe decorated with @overload.  For example:\n\n  @overload\n  def utf8(value: None) -> None: ...\n  @overload\n  def utf8(value: bytes) -> bytes: ...\n  @overload\n  def utf8(value: str) -> bytes: ...\n  def utf8(value):\n      # implementation goes here",
            "version": 0,
            "params": [
                {
                    "name": "func"
                }
            ]
        },
        {
            "acResult": "Union",
            "type": [
                "variable"
            ],
            "documentation": "Internal indicator of special typing constructs.\nSee _doc instance attribute for specific docs.",
            "version": 0
        },
        {
            "acResult": "Optional",
            "type": [
                "variable"
            ],
            "documentation": "Internal indicator of special typing constructs.\nSee _doc instance attribute for specific docs.",
            "version": 0
        },
        {
            "acResult": "Tuple",
            "type": [
                "variable"
            ],
            "documentation": "Tuple type; Tuple[X, Y] is the cross-product type of X and Y.\n\nExample: Tuple[T1, T2] is a tuple of two elements corresponding\nto type variables T1 and T2.  Tuple[int, float, str] is a tuple\nof an int, a float and a string.\n\nTo specify a variable-length tuple of homogeneous type, use Tuple[T, ...].",
            "version": 0
        },
        {
            "acResult": "Generic",
            "type": [
                "variable"
            ],
            "documentation": "Abstract base class for generic types.\n\nA generic type is typically declared by inheriting from\nthis class parameterized with one or more type variables.\nFor example, a generic mapping type might be defined as::\n\n  class Mapping(Generic[KT, VT]):\n      def __getitem__(self, key: KT) -> VT:\n          ...\n      # Etc.\n\nThis class can then be used as follows::\n\n  def lookup_name(mapping: Mapping[KT, VT], key: KT, default: VT) -> VT:\n      try:\n          return mapping[key]\n      except KeyError:\n          return default",
            "version": 0
        },
        {
            "acResult": "Protocol",
            "type": [
                "variable"
            ],
            "documentation": "Base class for protocol classes.\n\nProtocol classes are defined as::\n\n    class Proto(Protocol):\n        def meth(self) -> int:\n            ...\n\nSuch classes are primarily used with static type checkers that recognize\nstructural subtyping (static duck-typing), for example::\n\n    class C:\n        def meth(self) -> int:\n            return 0\n\n    def func(x: Proto) -> int:\n        return x.meth()\n\n    func(C())  # Passes static type check\n\nSee PEP 544 for details. Protocol classes decorated with\n@typing.runtime_checkable act as simple-minded runtime protocols that check\nonly the presence of given attributes, ignoring their type signatures.\nProtocol classes can be generic, they are defined as::\n\n    class GenProto(Protocol[T]):\n        def meth(self) -> T:\n            ...",
            "version": 0
        },
        {
            "acResult": "Callable",
            "type": [
                "variable"
            ],
            "documentation": "Callable type; Callable[[int], str] is a function of (int) -> str.\n\nThe subscription syntax must always be used with exactly two\nvalues: the argument list and the return type.  The argument list\nmust be a list of types or ellipsis; the return type must be a single type.\n\nThere is no syntax to indicate optional or keyword arguments,\nsuch function types are rarely used as callback types.",
            "version": 0
        },
        {
            "acResult": "Type",
            "type": [
                "variable"
            ],
            "documentation": "A special construct usable to annotate class objects.\n\nFor example, suppose we have the following classes::\n\n  class User: ...  # Abstract base for User classes\n  class BasicUser(User): ...\n  class ProUser(User): ...\n  class TeamUser(User): ...\n\nAnd a function that takes a class argument that's a subclass of\nUser and returns an instance of the corresponding class::\n\n  U = TypeVar('U', bound=User)\n  def new_user(user_class: Type[U]) -> U:\n      user = user_class()\n      # (Here we could write the user object to a database)\n      return user\n\n  joe = new_user(BasicUser)\n\nAt this point the type checker knows that joe has type BasicUser.",
            "version": 0
        },
        {
            "acResult": "ClassVar",
            "type": [
                "variable"
            ],
            "documentation": "Internal indicator of special typing constructs.\nSee _doc instance attribute for specific docs.",
            "version": 0
        },
        {
            "acResult": "Final",
            "type": [
                "variable"
            ],
            "documentation": "Internal indicator of special typing constructs.\nSee _doc instance attribute for specific docs.",
            "version": 0
        },
        {
            "acResult": "final",
            "type": [
                "function"
            ],
            "documentation": "A decorator to indicate final methods and final classes.\n\nUse this decorator to indicate to type checkers that the decorated\nmethod cannot be overridden, and decorated class cannot be subclassed.\nFor example:\n\n  class Base:\n      @final\n      def done(self) -> None:\n          ...\n  class Sub(Base):\n      def done(self) -> None:  # Error reported by type checker\n            ...\n\n  @final\n  class Leaf:\n      ...\n  class Other(Leaf):  # Error reported by type checker\n      ...\n\nThere is no runtime checking of these properties.",
            "version": 0,
            "params": [
                {
                    "name": "f"
                }
            ]
        },
        {
            "acResult": "Literal",
            "type": [
                "variable"
            ],
            "documentation": "Internal indicator of special typing constructs.\nSee _doc instance attribute for specific docs.",
            "version": 0
        },
        {
            "acResult": "TypedDict",
            "type": [
                "variable"
            ],
            "documentation": "A simple typed namespace. At runtime it is equivalent to a plain dict.\n\nTypedDict creates a dictionary type that expects all of its\ninstances to have a certain set of keys, where each key is\nassociated with a value of a consistent type. This expectation\nis not checked at runtime but is only enforced by type checkers.\nUsage::\n\n    class Point2D(TypedDict):\n        x: int\n        y: int\n        label: str\n\n    a: Point2D = {'x': 1, 'y': 2, 'label': 'good'}  # OK\n    b: Point2D = {'z': 3, 'label': 'bad'}           # Fails type check\n\n    assert Point2D(x=1, y=2, label='first') == dict(x=1, y=2, label='first')\n\nThe type info can be accessed via Point2D.__annotations__. TypedDict\nsupports two additional equivalent forms::\n\n    Point2D = TypedDict('Point2D', x=int, y=int, label=str)\n    Point2D = TypedDict('Point2D', {'x': int, 'y': int, 'label': str})\n\nBy default, all keys must be present in a TypedDict. It is possible\nto override this by specifying totality.\nUsage::\n\n    class point2D(TypedDict, total=False):\n        x: int\n        y: int\n\nThis means that a point2D TypedDict can have any of the keys omitted.A type\nchecker is only expected to support a literal False or True as the value of\nthe total argument. True is the default, and makes all items defined in the\nclass body be required.\n\nThe class syntax is only supported in Python 3.6+, while two other\nsyntax forms work for Python 2.7 and 3.2+",
            "version": 0
        },
        {
            "acResult": "GenericMeta",
            "type": [
                "type",
                "function"
            ],
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "ParamSpecArgs",
            "type": [
                "type",
                "function"
            ],
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "ParamSpecKwargs",
            "type": [
                "type",
                "function"
            ],
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "ParamSpec",
            "type": [
                "type",
                "function"
            ],
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "Concatenate",
            "type": [
                "variable"
            ],
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "TypeAlias",
            "type": [
                "variable"
            ],
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "TypeGuard",
            "type": [
                "variable"
            ],
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "no_type_check",
            "type": [
                "function"
            ],
            "documentation": "Decorator to indicate that annotations are not type hints.\n\nThe argument must be a class or function; if it is a class, it\napplies recursively to all methods and classes defined in that class\n(but not to methods defined in its superclasses or subclasses).\n\nThis mutates the function(s) or class(es) in place.",
            "version": 0,
            "params": [
                {
                    "name": "arg"
                }
            ]
        },
        {
            "acResult": "no_type_check_decorator",
            "type": [
                "function"
            ],
            "documentation": "Decorator to give another decorator the @no_type_check effect.\n\nThis wraps the decorator with something that wraps the decorated\nfunction in @no_type_check.",
            "version": 0,
            "params": [
                {
                    "name": "decorator"
                }
            ]
        },
        {
            "acResult": "_Alias",
            "type": [
                "type",
                "function"
            ],
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "Annotated",
            "type": [
                "variable"
            ],
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "runtime_checkable",
            "type": [
                "function"
            ],
            "documentation": "Mark a protocol class as a runtime protocol.\n\nSuch protocol can be used with isinstance() and issubclass().\nRaise TypeError if applied to a non-protocol class.\nThis allows a simple-minded structural check very similar to\none trick ponies in collections.abc such as Iterable.\nFor example::\n\n    @runtime_checkable\n    class Closable(Protocol):\n        def close(self): ...\n\n    assert isinstance(open('/some/file'), Closable)\n\nWarning: this will check only the presence of the required methods,\nnot their type signatures!",
            "version": 0,
            "params": [
                {
                    "name": "cls"
                }
            ]
        },
        {
            "acResult": "SupportsInt",
            "type": [
                "type",
                "function"
            ],
            "documentation": "An ABC with one abstract method __int__.",
            "version": 0,
            "params": [
                {
                    "name": "cls"
                }
            ]
        },
        {
            "acResult": "SupportsFloat",
            "type": [
                "type",
                "function"
            ],
            "documentation": "An ABC with one abstract method __float__.",
            "version": 0,
            "params": [
                {
                    "name": "cls"
                }
            ]
        },
        {
            "acResult": "SupportsComplex",
            "type": [
                "type",
                "function"
            ],
            "documentation": "An ABC with one abstract method __complex__.",
            "version": 0,
            "params": [
                {
                    "name": "cls"
                }
            ]
        },
        {
            "acResult": "SupportsBytes",
            "type": [
                "type",
                "function"
            ],
            "documentation": "An ABC with one abstract method __bytes__.",
            "version": 0,
            "params": [
                {
                    "name": "cls"
                }
            ]
        },
        {
            "acResult": "SupportsIndex",
            "type": [
                "type",
                "function"
            ],
            "documentation": "An ABC with one abstract method __index__.",
            "version": 0,
            "params": [
                {
                    "name": "cls"
                }
            ]
        },
        {
            "acResult": "SupportsAbs",
            "type": [
                "type",
                "function"
            ],
            "documentation": "An ABC with one abstract method __abs__ that is covariant in its return type.",
            "version": 0,
            "params": [
                {
                    "name": "cls"
                }
            ]
        },
        {
            "acResult": "SupportsRound",
            "type": [
                "type",
                "function"
            ],
            "documentation": "An ABC with one abstract method __round__ that is covariant in its return type.",
            "version": 0,
            "params": [
                {
                    "name": "cls"
                }
            ]
        },
        {
            "acResult": "Sized",
            "type": [
                "type",
                "function"
            ],
            "documentation": "The central part of internal API.\n\nThis represents a generic version of type 'origin' with type arguments 'params'.\nThere are two kind of these aliases: user defined and special. The special ones\nare wrappers around builtin collections and ABCs in collections.abc. These must\nhave 'name' always set. If 'inst' is False, then the alias can't be instantiated,\nthis is used by e.g. typing.List and typing.Dict.",
            "version": 0,
            "params": [
                {
                    "name": "self"
                }
            ]
        },
        {
            "acResult": "Hashable",
            "type": [
                "type",
                "function"
            ],
            "documentation": "The central part of internal API.\n\nThis represents a generic version of type 'origin' with type arguments 'params'.\nThere are two kind of these aliases: user defined and special. The special ones\nare wrappers around builtin collections and ABCs in collections.abc. These must\nhave 'name' always set. If 'inst' is False, then the alias can't be instantiated,\nthis is used by e.g. typing.List and typing.Dict.",
            "version": 0,
            "params": [
                {
                    "name": "self"
                }
            ]
        },
        {
            "acResult": "Iterable",
            "type": [
                "type",
                "function"
            ],
            "documentation": "The central part of internal API.\n\nThis represents a generic version of type 'origin' with type arguments 'params'.\nThere are two kind of these aliases: user defined and special. The special ones\nare wrappers around builtin collections and ABCs in collections.abc. These must\nhave 'name' always set. If 'inst' is False, then the alias can't be instantiated,\nthis is used by e.g. typing.List and typing.Dict.",
            "version": 0,
            "params": [
                {
                    "name": "self"
                }
            ]
        },
        {
            "acResult": "Iterator",
            "type": [
                "type",
                "function"
            ],
            "documentation": "The central part of internal API.\n\nThis represents a generic version of type 'origin' with type arguments 'params'.\nThere are two kind of these aliases: user defined and special. The special ones\nare wrappers around builtin collections and ABCs in collections.abc. These must\nhave 'name' always set. If 'inst' is False, then the alias can't be instantiated,\nthis is used by e.g. typing.List and typing.Dict.",
            "version": 0,
            "params": [
                {
                    "name": "self"
                }
            ]
        },
        {
            "acResult": "Reversible",
            "type": [
                "type",
                "function"
            ],
            "documentation": "The central part of internal API.\n\nThis represents a generic version of type 'origin' with type arguments 'params'.\nThere are two kind of these aliases: user defined and special. The special ones\nare wrappers around builtin collections and ABCs in collections.abc. These must\nhave 'name' always set. If 'inst' is False, then the alias can't be instantiated,\nthis is used by e.g. typing.List and typing.Dict.",
            "version": 0,
            "params": [
                {
                    "name": "self"
                }
            ]
        },
        {
            "acResult": "Generator",
            "type": [
                "type",
                "function"
            ],
            "documentation": "The central part of internal API.\n\nThis represents a generic version of type 'origin' with type arguments 'params'.\nThere are two kind of these aliases: user defined and special. The special ones\nare wrappers around builtin collections and ABCs in collections.abc. These must\nhave 'name' always set. If 'inst' is False, then the alias can't be instantiated,\nthis is used by e.g. typing.List and typing.Dict.",
            "version": 0,
            "params": [
                {
                    "name": "self"
                }
            ]
        },
        {
            "acResult": "Awaitable",
            "type": [
                "type",
                "function"
            ],
            "documentation": "The central part of internal API.\n\nThis represents a generic version of type 'origin' with type arguments 'params'.\nThere are two kind of these aliases: user defined and special. The special ones\nare wrappers around builtin collections and ABCs in collections.abc. These must\nhave 'name' always set. If 'inst' is False, then the alias can't be instantiated,\nthis is used by e.g. typing.List and typing.Dict.",
            "version": 0,
            "params": [
                {
                    "name": "self"
                }
            ]
        },
        {
            "acResult": "Coroutine",
            "type": [
                "type",
                "function"
            ],
            "documentation": "The central part of internal API.\n\nThis represents a generic version of type 'origin' with type arguments 'params'.\nThere are two kind of these aliases: user defined and special. The special ones\nare wrappers around builtin collections and ABCs in collections.abc. These must\nhave 'name' always set. If 'inst' is False, then the alias can't be instantiated,\nthis is used by e.g. typing.List and typing.Dict.",
            "version": 0,
            "params": [
                {
                    "name": "self"
                }
            ]
        },
        {
            "acResult": "AwaitableGenerator",
            "type": [
                "type",
                "function"
            ],
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "AsyncIterable",
            "type": [
                "type",
                "function"
            ],
            "documentation": "The central part of internal API.\n\nThis represents a generic version of type 'origin' with type arguments 'params'.\nThere are two kind of these aliases: user defined and special. The special ones\nare wrappers around builtin collections and ABCs in collections.abc. These must\nhave 'name' always set. If 'inst' is False, then the alias can't be instantiated,\nthis is used by e.g. typing.List and typing.Dict.",
            "version": 0,
            "params": [
                {
                    "name": "self"
                }
            ]
        },
        {
            "acResult": "AsyncIterator",
            "type": [
                "type",
                "function"
            ],
            "documentation": "The central part of internal API.\n\nThis represents a generic version of type 'origin' with type arguments 'params'.\nThere are two kind of these aliases: user defined and special. The special ones\nare wrappers around builtin collections and ABCs in collections.abc. These must\nhave 'name' always set. If 'inst' is False, then the alias can't be instantiated,\nthis is used by e.g. typing.List and typing.Dict.",
            "version": 0,
            "params": [
                {
                    "name": "self"
                }
            ]
        },
        {
            "acResult": "AsyncGenerator",
            "type": [
                "type",
                "function"
            ],
            "documentation": "The central part of internal API.\n\nThis represents a generic version of type 'origin' with type arguments 'params'.\nThere are two kind of these aliases: user defined and special. The special ones\nare wrappers around builtin collections and ABCs in collections.abc. These must\nhave 'name' always set. If 'inst' is False, then the alias can't be instantiated,\nthis is used by e.g. typing.List and typing.Dict.",
            "version": 0,
            "params": [
                {
                    "name": "self"
                }
            ]
        },
        {
            "acResult": "Container",
            "type": [
                "type",
                "function"
            ],
            "documentation": "The central part of internal API.\n\nThis represents a generic version of type 'origin' with type arguments 'params'.\nThere are two kind of these aliases: user defined and special. The special ones\nare wrappers around builtin collections and ABCs in collections.abc. These must\nhave 'name' always set. If 'inst' is False, then the alias can't be instantiated,\nthis is used by e.g. typing.List and typing.Dict.",
            "version": 0,
            "params": [
                {
                    "name": "self"
                }
            ]
        },
        {
            "acResult": "Collection",
            "type": [
                "type",
                "function"
            ],
            "documentation": "The central part of internal API.\n\nThis represents a generic version of type 'origin' with type arguments 'params'.\nThere are two kind of these aliases: user defined and special. The special ones\nare wrappers around builtin collections and ABCs in collections.abc. These must\nhave 'name' always set. If 'inst' is False, then the alias can't be instantiated,\nthis is used by e.g. typing.List and typing.Dict.",
            "version": 0,
            "params": [
                {
                    "name": "self"
                }
            ]
        },
        {
            "acResult": "Sequence",
            "type": [
                "type",
                "function"
            ],
            "documentation": "The central part of internal API.\n\nThis represents a generic version of type 'origin' with type arguments 'params'.\nThere are two kind of these aliases: user defined and special. The special ones\nare wrappers around builtin collections and ABCs in collections.abc. These must\nhave 'name' always set. If 'inst' is False, then the alias can't be instantiated,\nthis is used by e.g. typing.List and typing.Dict.",
            "version": 0,
            "params": [
                {
                    "name": "self"
                }
            ]
        },
        {
            "acResult": "MutableSequence",
            "type": [
                "type",
                "function"
            ],
            "documentation": "The central part of internal API.\n\nThis represents a generic version of type 'origin' with type arguments 'params'.\nThere are two kind of these aliases: user defined and special. The special ones\nare wrappers around builtin collections and ABCs in collections.abc. These must\nhave 'name' always set. If 'inst' is False, then the alias can't be instantiated,\nthis is used by e.g. typing.List and typing.Dict.",
            "version": 0,
            "params": [
                {
                    "name": "self"
                }
            ]
        },
        {
            "acResult": "AbstractSet",
            "type": [
                "type",
                "function"
            ],
            "documentation": "The central part of internal API.\n\nThis represents a generic version of type 'origin' with type arguments 'params'.\nThere are two kind of these aliases: user defined and special. The special ones\nare wrappers around builtin collections and ABCs in collections.abc. These must\nhave 'name' always set. If 'inst' is False, then the alias can't be instantiated,\nthis is used by e.g. typing.List and typing.Dict.",
            "version": 0,
            "params": [
                {
                    "name": "self"
                }
            ]
        },
        {
            "acResult": "MutableSet",
            "type": [
                "type",
                "function"
            ],
            "documentation": "The central part of internal API.\n\nThis represents a generic version of type 'origin' with type arguments 'params'.\nThere are two kind of these aliases: user defined and special. The special ones\nare wrappers around builtin collections and ABCs in collections.abc. These must\nhave 'name' always set. If 'inst' is False, then the alias can't be instantiated,\nthis is used by e.g. typing.List and typing.Dict.",
            "version": 0,
            "params": [
                {
                    "name": "self"
                }
            ]
        },
        {
            "acResult": "MappingView",
            "type": [
                "type",
                "function"
            ],
            "documentation": "The central part of internal API.\n\nThis represents a generic version of type 'origin' with type arguments 'params'.\nThere are two kind of these aliases: user defined and special. The special ones\nare wrappers around builtin collections and ABCs in collections.abc. These must\nhave 'name' always set. If 'inst' is False, then the alias can't be instantiated,\nthis is used by e.g. typing.List and typing.Dict.",
            "version": 0,
            "params": [
                {
                    "name": "self"
                }
            ]
        },
        {
            "acResult": "ItemsView",
            "type": [
                "type",
                "function"
            ],
            "documentation": "The central part of internal API.\n\nThis represents a generic version of type 'origin' with type arguments 'params'.\nThere are two kind of these aliases: user defined and special. The special ones\nare wrappers around builtin collections and ABCs in collections.abc. These must\nhave 'name' always set. If 'inst' is False, then the alias can't be instantiated,\nthis is used by e.g. typing.List and typing.Dict.",
            "version": 0,
            "params": [
                {
                    "name": "self"
                }
            ]
        },
        {
            "acResult": "KeysView",
            "type": [
                "type",
                "function"
            ],
            "documentation": "The central part of internal API.\n\nThis represents a generic version of type 'origin' with type arguments 'params'.\nThere are two kind of these aliases: user defined and special. The special ones\nare wrappers around builtin collections and ABCs in collections.abc. These must\nhave 'name' always set. If 'inst' is False, then the alias can't be instantiated,\nthis is used by e.g. typing.List and typing.Dict.",
            "version": 0,
            "params": [
                {
                    "name": "self"
                }
            ]
        },
        {
            "acResult": "ValuesView",
            "type": [
                "type",
                "function"
            ],
            "documentation": "The central part of internal API.\n\nThis represents a generic version of type 'origin' with type arguments 'params'.\nThere are two kind of these aliases: user defined and special. The special ones\nare wrappers around builtin collections and ABCs in collections.abc. These must\nhave 'name' always set. If 'inst' is False, then the alias can't be instantiated,\nthis is used by e.g. typing.List and typing.Dict.",
            "version": 0,
            "params": [
                {
                    "name": "self"
                }
            ]
        },
        {
            "acResult": "ContextManager",
            "type": [
                "type",
                "function"
            ],
            "documentation": "The central part of internal API.\n\nThis represents a generic version of type 'origin' with type arguments 'params'.\nThere are two kind of these aliases: user defined and special. The special ones\nare wrappers around builtin collections and ABCs in collections.abc. These must\nhave 'name' always set. If 'inst' is False, then the alias can't be instantiated,\nthis is used by e.g. typing.List and typing.Dict.",
            "version": 0,
            "params": [
                {
                    "name": "self"
                }
            ]
        },
        {
            "acResult": "AsyncContextManager",
            "type": [
                "type",
                "function"
            ],
            "documentation": "The central part of internal API.\n\nThis represents a generic version of type 'origin' with type arguments 'params'.\nThere are two kind of these aliases: user defined and special. The special ones\nare wrappers around builtin collections and ABCs in collections.abc. These must\nhave 'name' always set. If 'inst' is False, then the alias can't be instantiated,\nthis is used by e.g. typing.List and typing.Dict.",
            "version": 0,
            "params": [
                {
                    "name": "self"
                }
            ]
        },
        {
            "acResult": "Mapping",
            "type": [
                "type",
                "function"
            ],
            "documentation": "The central part of internal API.\n\nThis represents a generic version of type 'origin' with type arguments 'params'.\nThere are two kind of these aliases: user defined and special. The special ones\nare wrappers around builtin collections and ABCs in collections.abc. These must\nhave 'name' always set. If 'inst' is False, then the alias can't be instantiated,\nthis is used by e.g. typing.List and typing.Dict.",
            "version": 0,
            "params": [
                {
                    "name": "self"
                }
            ]
        },
        {
            "acResult": "MutableMapping",
            "type": [
                "type",
                "function"
            ],
            "documentation": "The central part of internal API.\n\nThis represents a generic version of type 'origin' with type arguments 'params'.\nThere are two kind of these aliases: user defined and special. The special ones\nare wrappers around builtin collections and ABCs in collections.abc. These must\nhave 'name' always set. If 'inst' is False, then the alias can't be instantiated,\nthis is used by e.g. typing.List and typing.Dict.",
            "version": 0,
            "params": [
                {
                    "name": "self"
                }
            ]
        },
        {
            "acResult": "IO",
            "type": [
                "type",
                "function"
            ],
            "documentation": "Generic base class for TextIO and BinaryIO.\n\nThis is an abstract, generic version of the return of open().\n\nNOTE: This does not distinguish between the different possible\nclasses (text vs. binary, read vs. write vs. read/write,\nappend-only, unbuffered).  The TextIO and BinaryIO subclasses\nbelow capture the distinctions between text vs. binary, which is\npervasive in the interface; however we currently do not offer a\nway to track the other distinctions in the type system.",
            "version": 0,
            "params": [
                {
                    "name": "cls"
                }
            ]
        },
        {
            "acResult": "BinaryIO",
            "type": [
                "type",
                "function"
            ],
            "documentation": "Typed version of the return of open() in binary mode.",
            "version": 0,
            "params": [
                {
                    "name": "cls"
                }
            ]
        },
        {
            "acResult": "TextIO",
            "type": [
                "type",
                "function"
            ],
            "documentation": "Typed version of the return of open() in text mode.",
            "version": 0,
            "params": [
                {
                    "name": "cls"
                }
            ]
        },
        {
            "acResult": "ByteString",
            "type": [
                "type",
                "function"
            ],
            "documentation": "The central part of internal API.\n\nThis represents a generic version of type 'origin' with type arguments 'params'.\nThere are two kind of these aliases: user defined and special. The special ones\nare wrappers around builtin collections and ABCs in collections.abc. These must\nhave 'name' always set. If 'inst' is False, then the alias can't be instantiated,\nthis is used by e.g. typing.List and typing.Dict.",
            "version": 0,
            "params": [
                {
                    "name": "self"
                }
            ]
        },
        {
            "acResult": "Match",
            "type": [
                "type",
                "function"
            ],
            "documentation": "The central part of internal API.\n\nThis represents a generic version of type 'origin' with type arguments 'params'.\nThere are two kind of these aliases: user defined and special. The special ones\nare wrappers around builtin collections and ABCs in collections.abc. These must\nhave 'name' always set. If 'inst' is False, then the alias can't be instantiated,\nthis is used by e.g. typing.List and typing.Dict.",
            "version": 0,
            "params": [
                {
                    "name": "self"
                }
            ]
        },
        {
            "acResult": "Pattern",
            "type": [
                "type",
                "function"
            ],
            "documentation": "The central part of internal API.\n\nThis represents a generic version of type 'origin' with type arguments 'params'.\nThere are two kind of these aliases: user defined and special. The special ones\nare wrappers around builtin collections and ABCs in collections.abc. These must\nhave 'name' always set. If 'inst' is False, then the alias can't be instantiated,\nthis is used by e.g. typing.List and typing.Dict.",
            "version": 0,
            "params": [
                {
                    "name": "self"
                }
            ]
        },
        {
            "acResult": "get_type_hints",
            "type": [
                "function",
                "function"
            ],
            "documentation": "Return type hints for an object.\n\nThis is often the same as obj.__annotations__, but it handles\nforward references encoded as string literals, and if necessary\nadds Optional[t] if a default value equal to None is set.\n\nThe argument may be a module, class, method, or function. The annotations\nare returned as a dictionary. For classes, annotations include also\ninherited members.\n\nTypeError is raised if the argument is not of a type that can contain\nannotations, and an empty dictionary is returned if no annotations are\npresent.\n\nBEWARE -- the behavior of globalns and localns is counterintuitive\n(unless you are familiar with how eval() and exec() work).  The\nsearch order is locals first, then globals.\n\n- If no dict arguments are passed, an attempt is made to use the\n  globals from obj (or the respective module's globals for classes),\n  and these are also used as the locals.  If the object does not appear\n  to have globals, an empty dictionary is used.\n\n- If one dict argument is passed, it is used for both globals and\n  locals.\n\n- If two dict arguments are passed, they specify globals and\n  locals, respectively.",
            "version": 0,
            "params": [
                {
                    "name": "obj"
                },
                {
                    "name": "globalns",
                    "defaultValue": "Ellipsis"
                },
                {
                    "name": "localns",
                    "defaultValue": "Ellipsis"
                },
                {
                    "name": "include_extras",
                    "defaultValue": "Ellipsis"
                }
            ]
        },
        {
            "acResult": "get_origin",
            "type": [
                "function"
            ],
            "documentation": "Get the unsubscripted version of a type.\n\nThis supports generic types, Callable, Tuple, Union, Literal, Final and ClassVar.\nReturn None for unsupported types. Examples::\n\n    get_origin(Literal[42]) is Literal\n    get_origin(int) is None\n    get_origin(ClassVar[int]) is ClassVar\n    get_origin(Generic) is Generic\n    get_origin(Generic[T]) is Generic\n    get_origin(Union[T, int]) is Union\n    get_origin(List[Tuple[T, T]][int]) == list",
            "version": 0,
            "params": [
                {
                    "name": "tp"
                }
            ]
        },
        {
            "acResult": "get_args",
            "type": [
                "function"
            ],
            "documentation": "Get type arguments with all substitutions performed.\n\nFor unions, basic simplifications used by Union constructor are performed.\nExamples::\n    get_args(Dict[str, int]) == (str, int)\n    get_args(int) == ()\n    get_args(Union[int, Union[T, int], str][int]) == (int, str)\n    get_args(Union[int, Tuple[T, int]][str]) == (int, Tuple[str, int])\n    get_args(Callable[[], T][int]) == ([], int)",
            "version": 0,
            "params": [
                {
                    "name": "tp"
                }
            ]
        },
        {
            "acResult": "cast",
            "type": [
                "function",
                "function",
                "function"
            ],
            "documentation": "Cast a value to a type.\n\nThis returns the value unchanged.  To the type checker this\nsignals that the return value has the designated type, but at\nruntime we intentionally don't check anything (we want this\nto be as fast as possible).",
            "version": 0,
            "params": [
                {
                    "name": "typ"
                },
                {
                    "name": "val"
                }
            ]
        },
        {
            "acResult": "NamedTuple",
            "type": [
                "type",
                "function"
            ],
            "documentation": "Typed version of namedtuple.\n\nUsage in Python versions >= 3.6::\n\n    class Employee(NamedTuple):\n        name: str\n        id: int\n\nThis is equivalent to::\n\n    Employee = collections.namedtuple('Employee', ['name', 'id'])\n\nThe resulting class has an extra __annotations__ attribute, giving a\ndict that maps field names to types.  (The field names are also in\nthe _fields attribute, which is part of the namedtuple API.)\nAlternative equivalent keyword syntax is also accepted::\n\n    Employee = NamedTuple('Employee', name=str, id=int)\n\nIn Python versions <= 3.5 use::\n\n    Employee = NamedTuple('Employee', [('name', str), ('id', int)])",
            "version": 0,
            "params": [
                {
                    "name": "cls"
                },
                {
                    "name": "typename"
                },
                {
                    "name": "fields",
                    "defaultValue": "None"
                }
            ]
        },
        {
            "acResult": "_TypedDict",
            "type": [
                "type",
                "function"
            ],
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "NewType",
            "type": [
                "function"
            ],
            "documentation": "NewType creates simple unique types with almost zero\nruntime overhead. NewType(name, tp) is considered a subtype of tp\nby static type checkers. At runtime, NewType(name, tp) returns\na dummy function that simply returns its argument. Usage::\n\n    UserId = NewType('UserId', int)\n\n    def name_by_id(user_id: UserId) -> str:\n        ...\n\n    UserId('user')          # Fails type check\n\n    name_by_id(42)          # Fails type check\n    name_by_id(UserId(42))  # OK\n\n    num = UserId(5) + 1     # type: int",
            "version": 0,
            "params": [
                {
                    "name": "name"
                },
                {
                    "name": "tp"
                }
            ]
        },
        {
            "acResult": "type_check_only",
            "type": [
                "function"
            ],
            "documentation": "",
            "version": 0,
            "params": [
                {
                    "name": "func_or_cls"
                }
            ]
        },
        {
            "acResult": "ForwardRef",
            "type": [
                "type",
                "function"
            ],
            "documentation": "Internal wrapper to hold a forward reference.",
            "version": 0,
            "params": [
                {
                    "name": "self"
                },
                {
                    "name": "arg"
                },
                {
                    "name": "is_argument",
                    "defaultValue": "True"
                }
            ]
        },
        {
            "acResult": "is_typeddict",
            "type": [
                "function"
            ],
            "documentation": "",
            "version": 0,
            "params": [
                {
                    "name": "tp"
                }
            ]
        }
    ],
    "urandom": [],
    "time": [
        {
            "acResult": "sleep",
            "type": [
                "function"
            ],
            "documentation": "Delay a number of seconds.\n\nExample: ``time.sleep(1)``\n\n:param seconds: The number of seconds to sleep for.\nUse a floating-point number to sleep for a fractional number of seconds.",
            "version": 0,
            "params": [
                {
                    "name": "seconds"
                }
            ]
        },
        {
            "acResult": "sleep_ms",
            "type": [
                "function"
            ],
            "documentation": "Delay for given number of milliseconds.\n\nExample: ``time.sleep_ms(1_000_000)``\n\n:param ms: The number of milliseconds delay (>= 0).",
            "version": 0,
            "params": [
                {
                    "name": "ms"
                }
            ]
        },
        {
            "acResult": "sleep_us",
            "type": [
                "function"
            ],
            "documentation": "Delay for given number of microseconds.\n\nExample: ``time.sleep_us(1000)``\n\n:param us: The number of microseconds delay (>= 0).",
            "version": 0,
            "params": [
                {
                    "name": "us"
                }
            ]
        },
        {
            "acResult": "ticks_ms",
            "type": [
                "function"
            ],
            "documentation": "Get an increasing, millisecond counter with an arbitrary reference point,\nthat wraps around after some value.\n\nExample: ``time.ticks_ms()``\n\n:return: The counter value in milliseconds.",
            "version": 0
        },
        {
            "acResult": "ticks_us",
            "type": [
                "function"
            ],
            "documentation": "Get an increasing, microsecond counter with an arbitrary reference point,\nthat wraps around after some value.\n\nExample: ``time.ticks_us()``\n\n:return: The counter value in microseconds.",
            "version": 0
        },
        {
            "acResult": "ticks_add",
            "type": [
                "function"
            ],
            "documentation": "Offset ticks value by a given number, which can be either positive or\nnegative.\n\nExample: ``time.ticks_add(time.ticks_ms(), 200)``\n\nGiven a ticks value, this function allows to calculate ticks\nvalue delta ticks before or after it, following modular-arithmetic\ndefinition of tick values.\n\n:param ticks: A ticks value\n:param delta: An integer offset\n\nExample::\n\n    # Find out what ticks value there was 100ms ago\n    print(ticks_add(time.ticks_ms(), -100))\n\n    # Calculate deadline for operation and test for it\n    deadline = ticks_add(time.ticks_ms(), 200)\n    while ticks_diff(deadline, time.ticks_ms()) > 0:\n        do_a_little_of_something()\n\n    # Find out TICKS_MAX used by this port\n    print(ticks_add(0, -1))",
            "version": 0,
            "params": [
                {
                    "name": "ticks"
                },
                {
                    "name": "delta"
                }
            ]
        },
        {
            "acResult": "ticks_diff",
            "type": [
                "function"
            ],
            "documentation": "Measure ticks difference between values returned from\n``time.ticks_ms()`` or ``ticks_us()``, as a signed value\nwhich may wrap around.\n\nExample: ``time.ticks_diff(scheduled_time, now)``\n\n:param ticks1: The value to subtract from\n:param ticks2: The value to subtract\n\nThe argument order is the same as for subtraction operator,\n``ticks_diff(ticks1, ticks2)`` has the same meaning as ``ticks1 - ticks2``.\n\n``ticks_diff()`` is designed to accommodate various usage\npatterns, among them:\n\nPolling with timeout. In this case, the order of events is known, and you\nwill deal only with positive results of :func:`time.ticks_diff()`::\n\n    # Wait for GPIO pin to be asserted, but at most 500us\n    start = time.ticks_us()\n    while pin.value() == 0:\n        if time.ticks_diff(time.ticks_us(), start) > 500:\n            raise TimeoutError\n\n\nScheduling events. In this case, :func:`time.ticks_diff()` result may be\nnegative if an event is overdue::\n\n    # This code snippet is not optimized\n    now = time.ticks_ms()\n    scheduled_time = task.scheduled_time()\n    if ticks_diff(scheduled_time, now) > 0:\n        print(\"Too early, let's nap\")\n        sleep_ms(ticks_diff(scheduled_time, now))\n        task.run()\n    elif ticks_diff(scheduled_time, now) == 0:\n        print(\"Right at time!\")\n        task.run()\n    elif ticks_diff(scheduled_time, now) < 0:\n        print(\"Oops, running late, tell task to run faster!\")\n        task.run(run_faster=True)",
            "version": 0,
            "params": [
                {
                    "name": "ticks1"
                },
                {
                    "name": "ticks2"
                }
            ]
        }
    ],
    "radio": [
        {
            "acResult": "RATE_1MBIT",
            "type": [
                "variable"
            ],
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "RATE_2MBIT",
            "type": [
                "variable"
            ],
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "on",
            "type": [
                "function"
            ],
            "documentation": "Turns the radio on.\n\nExample: ``radio.on()``\n\nThis needs to be explicitly called since the radio draws power and takes\nup memory that you may otherwise need.",
            "version": 0
        },
        {
            "acResult": "off",
            "type": [
                "function"
            ],
            "documentation": "Turns off the radio, saving power and memory.\n\nExample: ``radio.off()``",
            "version": 0
        },
        {
            "acResult": "config",
            "type": [
                "function"
            ],
            "documentation": "Configures the radio.\n\nExample: ``radio.config(group=42)``\n\nThe default configuration is suitable for most use.\n\n:param length: (default=32) defines the maximum length, in bytes, of a message sent via the radio.\nIt can be up to 251 bytes long (254 - 3 bytes for S0, LENGTH and S1 preamble).\n:param queue: (default=3) specifies the number of messages that can be stored on the incoming message queue.\nIf there are no spaces left on the queue for incoming messages, then the incoming message is dropped.\n:param channel: (default=7) an integer value from 0 to 83 (inclusive) that defines an arbitrary \"channel\" to which the radio is tuned.\nMessages will be sent via this channel and only messages received via this channel will be put onto the incoming message queue. Each step is 1MHz wide, based at 2400MHz.\n:param power: (default=6) is an integer value from 0 to 7 (inclusive) to indicate the strength of signal used when broadcasting a message.\nThe higher the value the stronger the signal, but the more power is consumed by the device. The numbering translates to positions in the following list of dBm (decibel milliwatt) values: -30, -20, -16, -12, -8, -4, 0, 4.\n:param address: (default=0x75626974) an arbitrary name, expressed as a 32-bit address, that's used to filter incoming packets at the hardware level, keeping only those that match the address you set.\nThe default used by other micro:bit related platforms is the default setting used here.\n:param group: (default=0) an 8-bit value (0-255) used with the ``address`` when filtering messages.\nConceptually, \"address\" is like a house/office address and \"group\" is like the person at that address to which you want to send your message.\n:param data_rate: (default=``radio.RATE_1MBIT``) indicates the speed at which data throughput takes place.\nCan be one of the following constants defined in the ``radio`` module: ``RATE_250KBIT``, ``RATE_1MBIT`` or ``RATE_2MBIT``.\n\nIf ``config`` is not called then the defaults described above are assumed.",
            "version": 0,
            "params": [
                {
                    "name": "length"
                },
                {
                    "name": "queue",
                    "defaultValue": "0"
                },
                {
                    "name": "channel",
                    "defaultValue": "1969383796"
                },
                {
                    "name": "power",
                    "defaultValue": "6"
                },
                {
                    "name": "address",
                    "defaultValue": "7"
                },
                {
                    "name": "group",
                    "defaultValue": "3"
                },
                {
                    "name": "data_rate",
                    "defaultValue": "32"
                }
            ]
        },
        {
            "acResult": "reset",
            "type": [
                "function"
            ],
            "documentation": "Reset the settings to their default values.\n\nExample: ``radio.reset()``\n\nThe defaults as as per the ``config`` function above.",
            "version": 0
        },
        {
            "acResult": "send_bytes",
            "type": [
                "function"
            ],
            "documentation": "Sends a message containing bytes.\n\nExample: ``radio.send_bytes(b'hello')``\n\n:param message: The bytes to send.",
            "version": 0,
            "params": [
                {
                    "name": "message"
                }
            ]
        },
        {
            "acResult": "receive_bytes",
            "type": [
                "function"
            ],
            "documentation": "Receive the next incoming message on the message queue.\n\nExample: ``radio.receive_bytes()``\n\n:return: The message bytes if any, otherwise ``None``.",
            "version": 0
        },
        {
            "acResult": "receive_bytes_into",
            "type": [
                "function"
            ],
            "documentation": "Copy the next incoming message on the message queue into a buffer.\n\nExample: ``radio.receive_bytes_info(buffer)``\n\n:param buffer: The target buffer. The message is truncated if larger than the buffer.\n:return: ``None`` if there are no pending messages, otherwise it returns the length of the message (which might be more than the length of the buffer).",
            "version": 0,
            "params": [
                {
                    "name": "buffer"
                }
            ]
        },
        {
            "acResult": "send",
            "type": [
                "function"
            ],
            "documentation": "Sends a message string.\n\nExample: ``radio.send('hello')``\n\nThis is the equivalent of ``radio.send_bytes(bytes(message, 'utf8'))`` but with ``b'\u0001\u0000\u0001'``\nprepended to the front (to make it compatible with other platforms that target the micro:bit).\n\n:param message: The string to send.",
            "version": 0,
            "params": [
                {
                    "name": "message"
                }
            ]
        },
        {
            "acResult": "receive",
            "type": [
                "function"
            ],
            "documentation": "Works in exactly the same way as ``receive_bytes`` but returns whatever was sent.\n\nExample: ``radio.receive()``\n\nEquivalent to ``str(receive_bytes(), 'utf8')`` but with a check that the the first\nthree bytes are ``b'\u0001\u0000\u0001'`` (to make it compatible with other platforms that\nmay target the micro:bit).\n\n:return: The message with the prepended bytes stripped and converted to a string.\n\nA ``ValueError`` exception is raised if conversion to string fails.",
            "version": 0
        },
        {
            "acResult": "receive_full",
            "type": [
                "function"
            ],
            "documentation": "Returns a tuple containing three values representing the next incoming message on the message queue.\n\nExample: ``radio.receive_full()``\n\nIf there are no pending messages then ``None`` is returned.\n\nThe three values in the tuple represent:\n\n- the next incoming message on the message queue as bytes.\n- the RSSI (signal strength): a value between 0 (strongest) and -255 (weakest) as measured in dBm.\n- a microsecond timestamp: the value returned by ``time.ticks_us()`` when the message was received.\n\nFor example::\n\n    details = radio.receive_full()\n    if details:\n        msg, rssi, timestamp = details\n\nThis function is useful for providing information needed for triangulation\nand/or trilateration with other micro:bit devices.\n\n:return: ``None`` if there is no message, otherwise a tuple of length three with the bytes, strength and timestamp values.",
            "version": 0
        }
    ],
    "machine": [
        {
            "acResult": "unique_id",
            "type": [
                "function"
            ],
            "documentation": "Get a byte string with a unique identifier of a board.\n\nExample: ``machine.unique_id()``\n\n:return: An identifier that varies from one board instance to another.",
            "version": 0
        },
        {
            "acResult": "reset",
            "type": [
                "function"
            ],
            "documentation": "Reset the device in a manner similar to pushing the external RESET button.\n\nExample: ``machine.reset()``",
            "version": 0
        },
        {
            "acResult": "freq",
            "type": [
                "function"
            ],
            "documentation": "Get the CPU frequency in hertz.\n\nExample: ``machine.freq()``\n\n:return: The CPU frequency.",
            "version": 0
        },
        {
            "acResult": "disable_irq",
            "type": [
                "function"
            ],
            "documentation": "Disable interrupt requests.\n\nExample: ``interrupt_state = machine.disable_irq()``\n\n:return: the previous IRQ state which should be considered an opaque value\n\nThe return value should be passed to the ``enable_irq`` function to restore\ninterrupts to their original state.",
            "version": 0
        },
        {
            "acResult": "enable_irq",
            "type": [
                "function"
            ],
            "documentation": "Re-enable interrupt requests.\n\nExample: ``machine.enable_irq(interrupt_state)``\n\n:param state: The value that was returned from the most recent call to the ``disable_irq`` function.",
            "version": 0,
            "params": [
                {
                    "name": "state"
                }
            ]
        },
        {
            "acResult": "time_pulse_us",
            "type": [
                "function"
            ],
            "documentation": "Time a pulse on a pin.\n\nExample: ``time_pulse_us(pin0, 1)``\n\nIf the current input value of the pin is different to ``pulse_level``, the\nfunction first waits until the pin input becomes equal to\n``pulse_level``, then times the duration that the pin is equal to\n``pulse_level``. If the pin is already equal to ``pulse_level`` then timing\nstarts straight away.\n\n:param pin: The pin to use\n:param pulse_level: 0 to time a low pulse or 1 to time a high pulse\n:param timeout_us: A microsecond timeout\n:return: The duration of the pulse in microseconds, or -1 for a timeout waiting for the level to match ``pulse_level``, or -2 on timeout waiting for the pulse to end",
            "version": 0,
            "params": [
                {
                    "name": "pin"
                },
                {
                    "name": "pulse_level"
                },
                {
                    "name": "timeout_us",
                    "defaultValue": "1000000"
                }
            ]
        },
        {
            "acResult": "mem",
            "type": [
                "type",
                "function"
            ],
            "documentation": "The class for the ``mem8``, ``mem16`` and ``mem32`` memory views.",
            "version": 0
        },
        {
            "acResult": "mem8",
            "type": [
                "variable"
            ],
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "mem16",
            "type": [
                "variable"
            ],
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "mem32",
            "type": [
                "variable"
            ],
            "documentation": "",
            "version": 0
        }
    ],
    "sys": [
        {
            "acResult": "exit",
            "type": [
                "function"
            ],
            "documentation": "Terminate current program with a given exit code.\n\nExample: ``sys.exit(1)``\n\nThis function raises a ``SystemExit`` exception. If an argument is given, its\nvalue given as an argument to ``SystemExit``.\n\n:param retval: The exit code or message.",
            "version": 0,
            "params": [
                {
                    "name": "retval",
                    "defaultValue": "Ellipsis"
                }
            ]
        },
        {
            "acResult": "print_exception",
            "type": [
                "function"
            ],
            "documentation": "Print an exception with a traceback.\n\nExample: ``sys.print_exception(e)``\n\n:param exc: The exception to print\n\nThis is simplified version of a function which appears in the\n``traceback`` module in CPython.",
            "version": 0,
            "params": [
                {
                    "name": "exc"
                }
            ]
        },
        {
            "acResult": "argv",
            "type": [
                "variable"
            ],
            "documentation": "Built-in mutable sequence.\n\nIf no argument is given, the constructor creates a new empty list.\nThe argument must be an iterable if specified.",
            "version": 0
        },
        {
            "acResult": "byteorder",
            "type": [
                "variable"
            ],
            "documentation": "Create a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.",
            "version": 0
        },
        {
            "acResult": "_implementation",
            "type": [
                "type",
                "function"
            ],
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "implementation",
            "type": [
                "variable"
            ],
            "documentation": "A simple attribute-based namespace.\n\nSimpleNamespace(**kwargs)",
            "version": 0
        },
        {
            "acResult": "maxsize",
            "type": [
                "variable"
            ],
            "documentation": "Convert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "version": 0
        },
        {
            "acResult": "modules",
            "type": [
                "variable"
            ],
            "documentation": "dict() -> new empty dictionary\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs\ndict(iterable) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in iterable:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)",
            "version": 0
        },
        {
            "acResult": "path",
            "type": [
                "variable"
            ],
            "documentation": "Built-in mutable sequence.\n\nIf no argument is given, the constructor creates a new empty list.\nThe argument must be an iterable if specified.",
            "version": 0
        },
        {
            "acResult": "platform",
            "type": [
                "variable"
            ],
            "documentation": "Create a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.",
            "version": 0
        },
        {
            "acResult": "version",
            "type": [
                "variable"
            ],
            "documentation": "Create a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.",
            "version": 0
        },
        {
            "acResult": "version_info",
            "type": [
                "variable"
            ],
            "documentation": "sys.version_info\n\nVersion information as a named tuple.",
            "version": 0
        }
    ],
    "abc": [
        {
            "acResult": "ABCMeta",
            "type": [
                "type",
                "function"
            ],
            "documentation": "Metaclass for defining Abstract Base Classes (ABCs).\n\nUse this metaclass to create an ABC.  An ABC can be subclassed\ndirectly, and then acts as a mix-in class.  You can also register\nunrelated concrete classes (even built-in classes) and unrelated\nABCs as 'virtual subclasses' -- these and their descendants will\nbe considered subclasses of the registering ABC by the built-in\nissubclass() function, but the registering ABC won't show up in\ntheir MRO (Method Resolution Order) nor will method\nimplementations defined by the registering ABC be callable (not\neven via super()).",
            "version": 0,
            "params": [
                {
                    "name": "mcls"
                },
                {
                    "name": "name"
                },
                {
                    "name": "bases"
                },
                {
                    "name": "namespace"
                }
            ]
        },
        {
            "acResult": "abstractmethod",
            "type": [
                "function"
            ],
            "documentation": "A decorator indicating abstract methods.\n\nRequires that the metaclass is ABCMeta or derived from it.  A\nclass that has a metaclass derived from ABCMeta cannot be\ninstantiated unless all of its abstract methods are overridden.\nThe abstract methods can be called using any of the normal\n'super' call mechanisms.  abstractmethod() may be used to declare\nabstract methods for properties and descriptors.\n\nUsage:\n\n    class C(metaclass=ABCMeta):\n        @abstractmethod\n        def my_abstract_method(self, ...):\n            ...",
            "version": 0,
            "params": [
                {
                    "name": "funcobj"
                }
            ]
        },
        {
            "acResult": "abstractproperty",
            "type": [
                "type",
                "function"
            ],
            "documentation": "A decorator indicating abstract properties.\n\nDeprecated, use 'property' with 'abstractmethod' instead.",
            "version": 0,
            "params": [
                {
                    "name": "fget",
                    "defaultValue": "None"
                },
                {
                    "name": "fset",
                    "defaultValue": "None"
                },
                {
                    "name": "fdel",
                    "defaultValue": "None"
                },
                {
                    "name": "doc",
                    "defaultValue": "None"
                }
            ]
        },
        {
            "acResult": "abstractstaticmethod",
            "type": [
                "function"
            ],
            "documentation": "A decorator indicating abstract staticmethods.\n\nDeprecated, use 'staticmethod' with 'abstractmethod' instead.",
            "version": 0,
            "params": [
                {
                    "name": "callable"
                }
            ]
        },
        {
            "acResult": "abstractclassmethod",
            "type": [
                "function"
            ],
            "documentation": "A decorator indicating abstract classmethods.\n\nDeprecated, use 'classmethod' with 'abstractmethod' instead.",
            "version": 0,
            "params": [
                {
                    "name": "callable"
                }
            ]
        },
        {
            "acResult": "ABC",
            "type": [
                "type",
                "function"
            ],
            "documentation": "Helper class that provides a standard way to create an ABC using\ninheritance.",
            "version": 0
        },
        {
            "acResult": "get_cache_token",
            "type": [
                "function"
            ],
            "documentation": "Returns the current ABC cache token.\n\nThe token is an opaque object (supporting equality testing) identifying the\ncurrent version of the ABC cache for virtual subclasses. The token changes\nwith every call to register() on any ABC.",
            "version": 0
        }
    ],
    "errno": [
        {
            "acResult": "errorcode",
            "type": [
                "variable"
            ],
            "documentation": "dict() -> new empty dictionary\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs\ndict(iterable) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in iterable:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)",
            "version": 0
        },
        {
            "acResult": "EACCES",
            "type": [
                "variable"
            ],
            "documentation": "Convert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "version": 0
        },
        {
            "acResult": "EADDRINUSE",
            "type": [
                "variable"
            ],
            "documentation": "Convert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "version": 0
        },
        {
            "acResult": "EAGAIN",
            "type": [
                "variable"
            ],
            "documentation": "Convert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "version": 0
        },
        {
            "acResult": "EALREADY",
            "type": [
                "variable"
            ],
            "documentation": "Convert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "version": 0
        },
        {
            "acResult": "EBADF",
            "type": [
                "variable"
            ],
            "documentation": "Convert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "version": 0
        },
        {
            "acResult": "ECONNABORTED",
            "type": [
                "variable"
            ],
            "documentation": "Convert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "version": 0
        },
        {
            "acResult": "ECONNREFUSED",
            "type": [
                "variable"
            ],
            "documentation": "Convert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "version": 0
        },
        {
            "acResult": "ECONNRESET",
            "type": [
                "variable"
            ],
            "documentation": "Convert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "version": 0
        },
        {
            "acResult": "EEXIST",
            "type": [
                "variable"
            ],
            "documentation": "Convert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "version": 0
        },
        {
            "acResult": "EHOSTUNREACH",
            "type": [
                "variable"
            ],
            "documentation": "Convert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "version": 0
        },
        {
            "acResult": "EINPROGRESS",
            "type": [
                "variable"
            ],
            "documentation": "Convert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "version": 0
        },
        {
            "acResult": "EINVAL",
            "type": [
                "variable"
            ],
            "documentation": "Convert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "version": 0
        },
        {
            "acResult": "EIO",
            "type": [
                "variable"
            ],
            "documentation": "Convert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "version": 0
        },
        {
            "acResult": "EISDIR",
            "type": [
                "variable"
            ],
            "documentation": "Convert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "version": 0
        },
        {
            "acResult": "ENOBUFS",
            "type": [
                "variable"
            ],
            "documentation": "Convert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "version": 0
        },
        {
            "acResult": "ENODEV",
            "type": [
                "variable"
            ],
            "documentation": "Convert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "version": 0
        },
        {
            "acResult": "ENOENT",
            "type": [
                "variable"
            ],
            "documentation": "Convert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "version": 0
        },
        {
            "acResult": "ENOMEM",
            "type": [
                "variable"
            ],
            "documentation": "Convert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "version": 0
        },
        {
            "acResult": "ENOTCONN",
            "type": [
                "variable"
            ],
            "documentation": "Convert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "version": 0
        },
        {
            "acResult": "EOPNOTSUPP",
            "type": [
                "variable"
            ],
            "documentation": "Convert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "version": 0
        },
        {
            "acResult": "EPERM",
            "type": [
                "variable"
            ],
            "documentation": "Convert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "version": 0
        },
        {
            "acResult": "ETIMEDOUT",
            "type": [
                "variable"
            ],
            "documentation": "Convert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "version": 0
        }
    ],
    "ustruct": [],
    "gc": [
        {
            "acResult": "enable",
            "type": [
                "function"
            ],
            "documentation": "Enable automatic garbage collection.",
            "version": 0
        },
        {
            "acResult": "disable",
            "type": [
                "function"
            ],
            "documentation": "Disable automatic garbage collection.\n\nHeap memory can still be allocated,\nand garbage collection can still be initiated manually using ``gc.collect``.",
            "version": 0
        },
        {
            "acResult": "collect",
            "type": [
                "function"
            ],
            "documentation": "Run a garbage collection.",
            "version": 0,
            "params": [
                {
                    "name": "generation",
                    "defaultValue": "2"
                }
            ]
        },
        {
            "acResult": "mem_alloc",
            "type": [
                "function"
            ],
            "documentation": "Get the number of bytes of heap RAM that are allocated.\n\n:return: The number of bytes allocated.\n\nThis function is MicroPython extension.",
            "version": 0
        },
        {
            "acResult": "mem_free",
            "type": [
                "function"
            ],
            "documentation": "Get the number of bytes of available heap RAM, or -1 if this amount is not known.\n\n:return: The number of bytes free.\n\nThis function is MicroPython extension.",
            "version": 0
        },
        {
            "acResult": "threshold",
            "type": [
                "function",
                "function"
            ],
            "documentation": "Query the additional GC allocation threshold.\n\n:return: The GC allocation threshold.\n\nThis function is a MicroPython extension. CPython has a similar\nfunction - ``set_threshold()``, but due to different GC\nimplementations, its signature and semantics are different.",
            "version": 0
        }
    ],
    "collections": [
        {
            "acResult": "namedtuple",
            "type": [
                "function",
                "function"
            ],
            "documentation": "Returns a new subclass of tuple with named fields.\n\n>>> Point = namedtuple('Point', ['x', 'y'])\n>>> Point.__doc__                   # docstring for the new class\n'Point(x, y)'\n>>> p = Point(11, y=22)             # instantiate with positional args or keywords\n>>> p[0] + p[1]                     # indexable like a plain tuple\n33\n>>> x, y = p                        # unpack like a regular tuple\n>>> x, y\n(11, 22)\n>>> p.x + p.y                       # fields also accessible by name\n33\n>>> d = p._asdict()                 # convert to a dictionary\n>>> d['x']\n11\n>>> Point(**d)                      # convert from a dictionary\nPoint(x=11, y=22)\n>>> p._replace(x=100)               # _replace() is like str.replace() but targets named fields\nPoint(x=100, y=22)",
            "version": 0,
            "params": [
                {
                    "name": "typename"
                },
                {
                    "name": "field_names"
                }
            ]
        },
        {
            "acResult": "_OrderedDictKeysView",
            "type": [
                "type",
                "function"
            ],
            "documentation": "A set is a finite, iterable container.\n\nThis class provides concrete generic implementations of all\nmethods except for __contains__, __iter__ and __len__.\n\nTo override the comparisons (presumably for speed, as the\nsemantics are fixed), redefine __le__ and __ge__,\nthen the other operations will automatically follow suit.",
            "version": 0,
            "params": [
                {
                    "name": "self"
                },
                {
                    "name": "mapping"
                }
            ]
        },
        {
            "acResult": "_OrderedDictItemsView",
            "type": [
                "type",
                "function"
            ],
            "documentation": "A set is a finite, iterable container.\n\nThis class provides concrete generic implementations of all\nmethods except for __contains__, __iter__ and __len__.\n\nTo override the comparisons (presumably for speed, as the\nsemantics are fixed), redefine __le__ and __ge__,\nthen the other operations will automatically follow suit.",
            "version": 0,
            "params": [
                {
                    "name": "self"
                },
                {
                    "name": "mapping"
                }
            ]
        },
        {
            "acResult": "_OrderedDictValuesView",
            "type": [
                "type",
                "function"
            ],
            "documentation": "",
            "version": 0,
            "params": [
                {
                    "name": "self"
                },
                {
                    "name": "mapping"
                }
            ]
        },
        {
            "acResult": "OrderedDict",
            "type": [
                "type",
                "function"
            ],
            "documentation": "Dictionary that remembers insertion order",
            "version": 0
        }
    ],
    "music": [
        {
            "acResult": "DADADADUM",
            "type": [
                "variable"
            ],
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "ENTERTAINER",
            "type": [
                "variable"
            ],
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "PRELUDE",
            "type": [
                "variable"
            ],
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "ODE",
            "type": [
                "variable"
            ],
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "NYAN",
            "type": [
                "variable"
            ],
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "RINGTONE",
            "type": [
                "variable"
            ],
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "FUNK",
            "type": [
                "variable"
            ],
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "BLUES",
            "type": [
                "variable"
            ],
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "BIRTHDAY",
            "type": [
                "variable"
            ],
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "WEDDING",
            "type": [
                "variable"
            ],
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "FUNERAL",
            "type": [
                "variable"
            ],
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "PUNCHLINE",
            "type": [
                "variable"
            ],
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "PYTHON",
            "type": [
                "variable"
            ],
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "BADDY",
            "type": [
                "variable"
            ],
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "CHASE",
            "type": [
                "variable"
            ],
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "BA_DING",
            "type": [
                "variable"
            ],
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "WAWAWAWAA",
            "type": [
                "variable"
            ],
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "JUMP_UP",
            "type": [
                "variable"
            ],
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "JUMP_DOWN",
            "type": [
                "variable"
            ],
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "POWER_UP",
            "type": [
                "variable"
            ],
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "POWER_DOWN",
            "type": [
                "variable"
            ],
            "documentation": "",
            "version": 0
        },
        {
            "acResult": "set_tempo",
            "type": [
                "function"
            ],
            "documentation": "Sets the approximate tempo for playback.\n\nExample: ``music.set_tempo(bpm=120)``\n\n:param ticks: The number of ticks constituting a beat.\n:param bpm: An integer determining how many beats per minute.\n\nSuggested default values allow the following useful behaviour:\n\n- music.set_tempo() \u2013 reset the tempo to default of ticks = 4, bpm = 120\n- music.set_tempo(ticks=8) \u2013 change the \u201cdefinition\u201d of a beat\n- music.set_tempo(bpm=180) \u2013 just change the tempo\n\nTo work out the length of a tick in milliseconds is very simple arithmetic:\n60000/bpm/ticks_per_beat. For the default values that\u2019s\n60000/120/4 = 125 milliseconds or 1 beat = 500 milliseconds.",
            "version": 0,
            "params": [
                {
                    "name": "ticks",
                    "defaultValue": "120"
                },
                {
                    "name": "bpm",
                    "defaultValue": "4"
                }
            ]
        },
        {
            "acResult": "get_tempo",
            "type": [
                "function"
            ],
            "documentation": "Gets the current tempo as a tuple of integers: ``(ticks, bpm)``.\n\nExample: ``ticks, beats = music.get_tempo()``\n\n:return: The temp as a tuple with two integer values, the ticks then the beats per minute.",
            "version": 0
        },
        {
            "acResult": "play",
            "type": [
                "function"
            ],
            "documentation": "Plays music.\n\nExample: ``music.play(music.NYAN)``\n\n:param music: music specified in `a special notation <https://microbit-micropython.readthedocs.io/en/v2-docs/music.html#musical-notation>`_\n:param pin: the output pin for use with an external speaker (default ``pin0``), ``None`` for no sound.\n:param wait: If ``wait`` is set to ``True``, this function is blocking.\n:param loop: If ``loop`` is set to ``True``, the tune repeats until ``stop`` is called or the blocking call is interrupted.\n\nMany built-in melodies are defined in this module.",
            "version": 0,
            "params": [
                {
                    "name": "music"
                },
                {
                    "name": "pin",
                    "defaultValue": "False"
                },
                {
                    "name": "wait",
                    "defaultValue": "True"
                },
                {
                    "name": "loop"
                }
            ]
        },
        {
            "acResult": "pitch",
            "type": [
                "function"
            ],
            "documentation": "Play a note.\n\nExample: ``music.pitch(185, 1000)``\n\n:param frequency: An integer frequency\n:param duration: A millisecond duration. If negative then sound is continuous until the next call or a call to ``stop``.\n:param pin: Optional output pin (default ``pin0``).\n:param wait: If ``wait`` is set to ``True``, this function is blocking.\n\nFor example, if the frequency is set to 440 and the length to\n1000 then we hear a standard concert A for one second.\n\nYou can only play one pitch on one pin at any one time.",
            "version": 0,
            "params": [
                {
                    "name": "frequency"
                },
                {
                    "name": "duration",
                    "defaultValue": "True"
                },
                {
                    "name": "pin"
                },
                {
                    "name": "wait",
                    "defaultValue": "-1"
                }
            ]
        },
        {
            "acResult": "stop",
            "type": [
                "function"
            ],
            "documentation": "Stops all music playback on the built-in speaker and any pin outputting sound.\n\nExample: ``music.stop()``\n\n:param pin: An optional argument can be provided to specify a pin, e.g. ``music.stop(pin1)``.",
            "version": 0,
            "params": [
                {
                    "name": "pin"
                }
            ]
        },
        {
            "acResult": "reset",
            "type": [
                "function"
            ],
            "documentation": "Resets ticks, bpm, duration and octave to their default values.\n\nExample: ``music.reset()``\n\nValues:\n- ``ticks = 4``\n- ``bpm = 120``\n- ``duration = 4``\n- ``octave = 4``",
            "version": 0
        }
    ],
    "micropython": [
        {
            "acResult": "const",
            "type": [
                "function"
            ],
            "documentation": "Used to declare that the expression is a constant so that the compiler can\noptimise it.\n\nThe use of this function should be as follows::\n\n    from micropython import const\n    CONST_X = const(123)\n    CONST_Y = const(2 * CONST_X + 1)\n\nConstants declared this way are still accessible as global variables from\noutside the module they are declared in. On the other hand, if a constant\nbegins with an underscore then it is hidden, it is not available as a\nglobal variable, and does not take up any memory during execution.\n\n:param expr: A constant expression.",
            "version": 0,
            "params": [
                {
                    "name": "expr"
                }
            ]
        },
        {
            "acResult": "opt_level",
            "type": [
                "function",
                "function"
            ],
            "documentation": "Get the current optimisation level for the compilation of scripts.\n\nExample: ``micropython.opt_level()``\n\nThe optimisation level controls the following compilation features:\n\n- Assertions: at level 0 assertion statements are enabled and compiled\n  into the bytecode; at levels 1 and higher assertions are not compiled.\n\n- Built-in ``__debug__`` variable: at level 0 this variable expands to\n  True; at levels 1 and higher it expands to False.\n\n- Source-code line numbers: at levels 0, 1 and 2 source-code line number\n  are stored along with the bytecode so that exceptions can report the\n  line number they occurred at; at levels 3 and higher line numbers are\n  not stored.\n\n:return: An integer representing the current level.",
            "version": 0
        },
        {
            "acResult": "mem_info",
            "type": [
                "function"
            ],
            "documentation": "Print information about currently used memory.\n\nExample: ``micropython.mem_info()``\n\n:param verbose: If the ``verbose`` argument is given then extra information is printed.",
            "version": 0,
            "params": [
                {
                    "name": "verbose",
                    "defaultValue": "None"
                }
            ]
        },
        {
            "acResult": "qstr_info",
            "type": [
                "function"
            ],
            "documentation": "Print information about currently interned strings.\n\nExample: ``micropython.qstr_info()``\n\n:param verbose: If the ``verbose`` argument is given then extra information is printed.\n\nThe information that is printed is implementation dependent, but currently\nincludes the number of interned strings and the amount of RAM they use.  In\nverbose mode it prints out the names of all RAM-interned strings.",
            "version": 0,
            "params": [
                {
                    "name": "verbose",
                    "defaultValue": "None"
                }
            ]
        },
        {
            "acResult": "stack_use",
            "type": [
                "function"
            ],
            "documentation": "Return an integer representing the current amount of stack that is being\nused.\n\nExample: ``micropython.stack_use()``\n\nThe absolute value of this is not particularly useful, rather it\nshould be used to compute differences in stack usage at different points.\n\n:return: An integer representing current stack use.",
            "version": 0
        },
        {
            "acResult": "heap_lock",
            "type": [
                "function"
            ],
            "documentation": "Lock the heap.\n\nExample: ``micropython.heap_lock()``\n\nWhen locked no memory allocation can occur and a ``MemoryError`` will be\nraised if any heap allocation is attempted.",
            "version": 0
        },
        {
            "acResult": "heap_unlock",
            "type": [
                "function"
            ],
            "documentation": "Unlock the heap.\n\nExample: ``micropython.heap_unlock()``\n\nWhen locked no memory allocation can occur and a ``MemoryError`` will be\nraised if any heap allocation is attempted.",
            "version": 0
        },
        {
            "acResult": "kbd_intr",
            "type": [
                "function"
            ],
            "documentation": "Set the character that will raise a ``KeyboardInterrupt`` exception.\n\nExample: ``micropython.kbd_intr(-1)``\n\n:param chr: Character code to raise the interrupt or -1 to disable capture of Ctrl-C.\n\nBy default this is set to 3 during script execution, corresponding to Ctrl-C.\nPassing -1 to this function will disable capture of Ctrl-C, and passing 3\nwill restore it.\n\nThis function can be used to prevent the capturing of Ctrl-C on the\nincoming stream of characters that is usually used for the REPL, in case\nthat stream is used for other purposes.",
            "version": 0,
            "params": [
                {
                    "name": "chr"
                }
            ]
        }
    ],
    "array": [
        {
            "acResult": "array",
            "type": [
                "type",
                "function"
            ],
            "documentation": "Return a new array whose items are restricted by typecode, and\ninitialized from the optional initializer value, which must be a list,\nstring or iterable over elements of the appropriate type.\n\nArrays represent basic values and behave very much like lists, except\nthe type of objects stored in them is constrained. The type is specified\nat object creation time by using a type code, which is a single character.\nThe following type codes are defined:\n\n    Type code   C Type             Minimum size in bytes\n    'b'         signed integer     1\n    'B'         unsigned integer   1\n    'u'         Unicode character  2 (see note)\n    'h'         signed integer     2\n    'H'         unsigned integer   2\n    'i'         signed integer     2\n    'I'         unsigned integer   2\n    'l'         signed integer     4\n    'L'         unsigned integer   4\n    'q'         signed integer     8 (see note)\n    'Q'         unsigned integer   8 (see note)\n    'f'         floating point     4\n    'd'         floating point     8\n\nNOTE: The 'u' typecode corresponds to Python's unicode character. On\nnarrow builds this is 2-bytes on wide builds this is 4-bytes.\n\nNOTE: The 'q' and 'Q' type codes are only available if the platform\nC compiler used to build Python supports 'long long', or, on Windows,\n'__int64'.\n\nMethods:\n\nappend() -- append a new item to the end of the array\nbuffer_info() -- return information giving the current memory info\nbyteswap() -- byteswap all the items of the array\ncount() -- return number of occurrences of an object\nextend() -- extend array by appending multiple elements from an iterable\nfromfile() -- read items from a file object\nfromlist() -- append items from the list\nfrombytes() -- append items from the string\nindex() -- return index of first occurrence of an object\ninsert() -- insert a new item into the array at a provided position\npop() -- remove and return item (default last)\nremove() -- remove first occurrence of an object\nreverse() -- reverse the order of the items in the array\ntofile() -- write all items to a file object\ntolist() -- return the array converted to an ordinary list\ntobytes() -- return the array converted to a string\n\nAttributes:\n\ntypecode -- the typecode character used to create the array\nitemsize -- the length in bytes of one array item",
            "version": 0
        }
    ],
    "antigravity": [],
    "power": [
        {
            "acResult": "off",
            "type": [
                "function"
            ],
            "documentation": "Power down the board to the lowest possible power mode.\n\nExample: ``power.off()``\n\nThis is the equivalent to pressing the reset button for a few seconds,\nto set the board in \"Off mode\".\n\nThe micro:bit will only wake up if the reset button is pressed or,\nif on battery power, when a USB cable is connected.\n\nWhen the board wakes up it will start for a reset state, so your program\nwill start running from the beginning.",
            "version": 0
        },
        {
            "acResult": "deep_sleep",
            "type": [
                "function"
            ],
            "documentation": "Set the micro:bit into a low power mode where it can wake up and continue operation.\n\nExample: ``power.deep_sleep(wake_on=(button_a, button_b))``\n\nThe program state is preserved and when it wakes up it will resume\noperation where it left off.\n\nDeep Sleep mode will consume more battery power than Off mode.\n\nThe wake up sources are configured via arguments.\n\nThe board will always wake up when receiving UART data, when the reset\nbutton is pressed (which resets the board) or, in battery power,\nwhen the USB cable is inserted.\n\nWhen the ``run_every`` parameter is set to ``True`` (the default), any\nfunction scheduled with ``run_every`` will momentarily wake up the board\nto run and when it finishes it will go back to sleep.\n\n:param ms: A time in milliseconds to wait before it wakes up.\n:param wake_on: A single instance or a tuple of pins and/or buttons to wake up the board, e.g. ``deep_sleep(wake_on=button_a)`` or ``deep_sleep(wake_on=(pin0, pin2, button_b))``.\n:param run_every: A boolean to configure if the functions scheduled with ``microbit.run_every`` will continue to run while it sleeps.",
            "version": 0,
            "params": [
                {
                    "name": "ms",
                    "defaultValue": "True"
                },
                {
                    "name": "wake_on",
                    "defaultValue": "None"
                },
                {
                    "name": "run_every",
                    "defaultValue": "None"
                }
            ]
        }
    ],
    "ucollections": [],
    "neopixel": [
        {
            "acResult": "NeoPixel",
            "type": [
                "type",
                "function"
            ],
            "documentation": "",
            "version": 0
        }
    ]
}