{
    "": [
        {
            "acResult": "type",
            "documentation": "type(object) -> the object's type\ntype(name, bases, dict, **kwds) -> a new type",
            "version": 0,
            "type": "function"
        },
        {
            "acResult": "pyCheckArgs",
            "documentation": "",
            "version": 0,
            "type": "function"
        },
        {
            "acResult": "pyCheckArgsLen",
            "documentation": "",
            "version": 0,
            "type": "function"
        },
        {
            "acResult": "pyCheckType",
            "documentation": "",
            "version": 0,
            "type": "function"
        },
        {
            "acResult": "checkSequence",
            "documentation": "",
            "version": 0,
            "type": "function"
        },
        {
            "acResult": "checkIterable",
            "documentation": "",
            "version": 0,
            "type": "function"
        },
        {
            "acResult": "checkCallable",
            "documentation": "",
            "version": 0,
            "type": "function"
        },
        {
            "acResult": "checkNumber",
            "documentation": "",
            "version": 0,
            "type": "function"
        },
        {
            "acResult": "checkComplex",
            "documentation": "",
            "version": 0,
            "type": "function"
        },
        {
            "acResult": "checkInt",
            "documentation": "",
            "version": 0,
            "type": "function"
        },
        {
            "acResult": "checkFloat",
            "documentation": "",
            "version": 0,
            "type": "function"
        },
        {
            "acResult": "checkString",
            "documentation": "",
            "version": 0,
            "type": "function"
        },
        {
            "acResult": "checkBytes",
            "documentation": "",
            "version": 0,
            "type": "function"
        },
        {
            "acResult": "checkClass",
            "documentation": "",
            "version": 0,
            "type": "function"
        },
        {
            "acResult": "checkBool",
            "documentation": "",
            "version": 0,
            "type": "function"
        },
        {
            "acResult": "checkNone",
            "documentation": "",
            "version": 0,
            "type": "function"
        },
        {
            "acResult": "checkFunction",
            "documentation": "",
            "version": 0,
            "type": "function"
        },
        {
            "acResult": "checkDataDescr",
            "documentation": "",
            "version": 0,
            "type": "function"
        },
        {
            "acResult": "checkAnySet",
            "documentation": "",
            "version": 0,
            "type": "function"
        },
        {
            "acResult": "checkMapping",
            "documentation": "",
            "version": 0,
            "type": "function"
        },
        {
            "acResult": "object",
            "documentation": "The base class of the class hierarchy.\n\nWhen called, it accepts no arguments and returns a new featureless\ninstance that has no instance attributes and cannot be given any.",
            "version": 0,
            "type": "function"
        },
        {
            "acResult": "getset_descriptor",
            "documentation": "",
            "version": 0,
            "type": "function"
        },
        {
            "acResult": "method_descriptor",
            "documentation": "",
            "version": 0,
            "type": "function"
        },
        {
            "acResult": "wrapper_descriptor",
            "documentation": "",
            "version": 0,
            "type": "function"
        },
        {
            "acResult": "method_wrapper",
            "documentation": "",
            "version": 0,
            "type": "function"
        },
        {
            "acResult": "classmethod_descriptor",
            "documentation": "",
            "version": 0,
            "type": "function"
        },
        {
            "acResult": "sk_method",
            "documentation": "",
            "version": 0,
            "type": "function"
        },
        {
            "acResult": "none",
            "documentation": "",
            "version": 0,
            "type": "function"
        },
        {
            "acResult": "NotImplemented",
            "documentation": "",
            "version": 0,
            "type": "function"
        },
        {
            "acResult": "Ellipsis",
            "documentation": "",
            "version": 0,
            "type": "function"
        },
        {
            "acResult": "str",
            "documentation": "Create a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.",
            "version": 0,
            "type": "function"
        },
        {
            "acResult": "func",
            "documentation": "",
            "version": 0,
            "type": "function"
        },
        {
            "acResult": "round",
            "documentation": "Round a number to a given precision in decimal digits.\n\nThe return value is an integer if ndigits is omitted or None.  Otherwise\nthe return value has the same type as the number.  ndigits may be negative.",
            "version": 0,
            "type": "function"
        },
        {
            "acResult": "len",
            "documentation": "Return the number of items in a container.",
            "version": 0,
            "type": "function"
        },
        {
            "acResult": "min",
            "documentation": "With a single iterable argument, return its smallest item. The\ndefault keyword-only argument specifies an object to return if\nthe provided iterable is empty.\nWith two or more arguments, return the smallest argument.",
            "version": 0,
            "type": "function"
        },
        {
            "acResult": "max",
            "documentation": "With a single iterable argument, return its biggest item. The\ndefault keyword-only argument specifies an object to return if\nthe provided iterable is empty.\nWith two or more arguments, return the largest argument.",
            "version": 0,
            "type": "function"
        },
        {
            "acResult": "any",
            "documentation": "Return True if bool(x) is True for any x in the iterable.\n\nIf the iterable is empty, return False.",
            "version": 0,
            "type": "function"
        },
        {
            "acResult": "all",
            "documentation": "Return True if bool(x) is True for all values x in the iterable.\n\nIf the iterable is empty, return True.",
            "version": 0,
            "type": "function"
        },
        {
            "acResult": "sum",
            "documentation": "Return the sum of a 'start' value (default: 0) plus an iterable of numbers\n\nWhen the iterable is empty, return the start value.\nThis function is intended specifically for use with numeric values and may\nreject non-numeric types.",
            "version": 0,
            "type": "function"
        },
        {
            "acResult": "zip",
            "documentation": ">>> list(zip('abcdefg', range(3), range(4)))\n   [('a', 0, 0), ('b', 1, 1), ('c', 2, 2)]\n\nThe zip object yields n-length tuples, where n is the number of iterables\npassed as positional arguments to zip().  The i-th element in every tuple\ncomes from the i-th iterable argument to zip().  This continues until the\nshortest argument is exhausted.\n\nIf strict is true and one of the arguments is exhausted before the others,\nraise a ValueError.",
            "version": 0,
            "type": "function"
        },
        {
            "acResult": "abs",
            "documentation": "Return the absolute value of the argument.",
            "version": 0,
            "type": "function"
        },
        {
            "acResult": "fabs",
            "documentation": "",
            "version": 0,
            "type": "function"
        },
        {
            "acResult": "ord",
            "documentation": "Return the Unicode code point for a one-character string.",
            "version": 0,
            "type": "function"
        },
        {
            "acResult": "chr",
            "documentation": "Return a Unicode string of one character with ordinal i; 0 <= i <= 0x10ffff.",
            "version": 0,
            "type": "function"
        },
        {
            "acResult": "unichr",
            "documentation": "",
            "version": 0,
            "type": "function"
        },
        {
            "acResult": "int2str_",
            "documentation": "",
            "version": 0,
            "type": "function"
        },
        {
            "acResult": "hex",
            "documentation": "Return the hexadecimal representation of an integer.\n\n>>> hex(12648430)\n'0xc0ffee'",
            "version": 0,
            "type": "function"
        },
        {
            "acResult": "oct",
            "documentation": "Return the octal representation of an integer.\n\n>>> oct(342391)\n'0o1234567'",
            "version": 0,
            "type": "function"
        },
        {
            "acResult": "bin",
            "documentation": "Return the binary representation of an integer.\n\n>>> bin(2796202)\n'0b1010101010101010101010'",
            "version": 0,
            "type": "function"
        },
        {
            "acResult": "dir",
            "documentation": "If called without an argument, return the names in the current scope.\nElse, return an alphabetized list of names comprising (some of) the attributes\nof the given object, and of attributes reachable from it.\nIf the object supplies a method named __dir__, it will be used; otherwise\nthe default dir() logic is used and returns:\n  for a module object: the module's attributes.\n  for a class object:  its attributes, and recursively the attributes\n    of its bases.\n  for any other object: its attributes, its class's attributes, and\n    recursively the attributes of its class's base classes.",
            "version": 0,
            "type": "function"
        },
        {
            "acResult": "repr",
            "documentation": "Return the canonical string representation of the object.\n\nFor many object types, including most builtins, eval(repr(obj)) == obj.",
            "version": 0,
            "type": "function"
        },
        {
            "acResult": "ascii",
            "documentation": "Return an ASCII-only representation of an object.\n\nAs repr(), return a string containing a printable representation of an\nobject, but escape the non-ASCII characters in the string returned by\nrepr() using \\\\x, \\\\u or \\\\U escapes. This generates a string similar\nto that returned by repr() in Python 2.",
            "version": 0,
            "type": "function"
        },
        {
            "acResult": "open",
            "documentation": "Open file and return a stream.  Raise OSError upon failure.\n\nfile is either a text or byte string giving the name (and the path\nif the file isn't in the current working directory) of the file to\nbe opened or an integer file descriptor of the file to be\nwrapped. (If a file descriptor is given, it is closed when the\nreturned I/O object is closed, unless closefd is set to False.)\n\nmode is an optional string that specifies the mode in which the file\nis opened. It defaults to 'r' which means open for reading in text\nmode.  Other common values are 'w' for writing (truncating the file if\nit already exists), 'x' for creating and writing to a new file, and\n'a' for appending (which on some Unix systems, means that all writes\nappend to the end of the file regardless of the current seek position).\nIn text mode, if encoding is not specified the encoding used is platform\ndependent: locale.getpreferredencoding(False) is called to get the\ncurrent locale encoding. (For reading and writing raw bytes use binary\nmode and leave encoding unspecified.) The available modes are:\n\n========= ===============================================================\nCharacter Meaning\n--------- ---------------------------------------------------------------\n'r'       open for reading (default)\n'w'       open for writing, truncating the file first\n'x'       create a new file and open it for writing\n'a'       open for writing, appending to the end of the file if it exists\n'b'       binary mode\n't'       text mode (default)\n'+'       open a disk file for updating (reading and writing)\n'U'       universal newline mode (deprecated)\n========= ===============================================================\n\nThe default mode is 'rt' (open for reading text). For binary random\naccess, the mode 'w+b' opens and truncates the file to 0 bytes, while\n'r+b' opens the file without truncation. The 'x' mode implies 'w' and\nraises an `FileExistsError` if the file already exists.\n\nPython distinguishes between files opened in binary and text modes,\neven when the underlying operating system doesn't. Files opened in\nbinary mode (appending 'b' to the mode argument) return contents as\nbytes objects without any decoding. In text mode (the default, or when\n't' is appended to the mode argument), the contents of the file are\nreturned as strings, the bytes having been first decoded using a\nplatform-dependent encoding or using the specified encoding if given.\n\n'U' mode is deprecated and will raise an exception in future versions\nof Python.  It has no effect in Python 3.  Use newline to control\nuniversal newlines mode.\n\nbuffering is an optional integer used to set the buffering policy.\nPass 0 to switch buffering off (only allowed in binary mode), 1 to select\nline buffering (only usable in text mode), and an integer > 1 to indicate\nthe size of a fixed-size chunk buffer.  When no buffering argument is\ngiven, the default buffering policy works as follows:\n\n* Binary files are buffered in fixed-size chunks; the size of the buffer\n  is chosen using a heuristic trying to determine the underlying device's\n  \"block size\" and falling back on `io.DEFAULT_BUFFER_SIZE`.\n  On many systems, the buffer will typically be 4096 or 8192 bytes long.\n\n* \"Interactive\" text files (files for which isatty() returns True)\n  use line buffering.  Other text files use the policy described above\n  for binary files.\n\nencoding is the name of the encoding used to decode or encode the\nfile. This should only be used in text mode. The default encoding is\nplatform dependent, but any encoding supported by Python can be\npassed.  See the codecs module for the list of supported encodings.\n\nerrors is an optional string that specifies how encoding errors are to\nbe handled---this argument should not be used in binary mode. Pass\n'strict' to raise a ValueError exception if there is an encoding error\n(the default of None has the same effect), or pass 'ignore' to ignore\nerrors. (Note that ignoring encoding errors can lead to data loss.)\nSee the documentation for codecs.register or run 'help(codecs.Codec)'\nfor a list of the permitted encoding error strings.\n\nnewline controls how universal newlines works (it only applies to text\nmode). It can be None, '', '\\n', '\\r', and '\\r\\n'.  It works as\nfollows:\n\n* On input, if newline is None, universal newlines mode is\n  enabled. Lines in the input can end in '\\n', '\\r', or '\\r\\n', and\n  these are translated into '\\n' before being returned to the\n  caller. If it is '', universal newline mode is enabled, but line\n  endings are returned to the caller untranslated. If it has any of\n  the other legal values, input lines are only terminated by the given\n  string, and the line ending is returned to the caller untranslated.\n\n* On output, if newline is None, any '\\n' characters written are\n  translated to the system default line separator, os.linesep. If\n  newline is '' or '\\n', no translation takes place. If newline is any\n  of the other legal values, any '\\n' characters written are translated\n  to the given string.\n\nIf closefd is False, the underlying file descriptor will be kept open\nwhen the file is closed. This does not work when a file name is given\nand must be True in that case.\n\nA custom opener can be used by passing a callable as *opener*. The\nunderlying file descriptor for the file object is then obtained by\ncalling *opener* with (*file*, *flags*). *opener* must return an open\nfile descriptor (passing os.open as *opener* results in functionality\nsimilar to passing None).\n\nopen() returns a file object whose type depends on the mode, and\nthrough which the standard file operations such as reading and writing\nare performed. When open() is used to open a file in a text mode ('w',\n'r', 'wt', 'rt', etc.), it returns a TextIOWrapper. When used to open\na file in a binary mode, the returned class varies: in read binary\nmode, it returns a BufferedReader; in write binary and append binary\nmodes, it returns a BufferedWriter, and in read/write mode, it returns\na BufferedRandom.\n\nIt is also possible to use a string or bytearray as a file for both\nreading and writing. For strings StringIO can be used like a file\nopened in a text mode, and for bytes a BytesIO can be used like a file\nopened in a binary mode.",
            "version": 0,
            "type": "function"
        },
        {
            "acResult": "isinstance",
            "documentation": "Return whether an object is an instance of a class or of a subclass thereof.\n\nA tuple, as in ``isinstance(x, (A, B, ...))``, may be given as the target to\ncheck against. This is equivalent to ``isinstance(x, A) or isinstance(x, B)\nor ...`` etc.",
            "version": 0,
            "type": "function"
        },
        {
            "acResult": "hash",
            "documentation": "Return the hash value for the given object.\n\nTwo objects that compare equal must also have the same hash value, but the\nreverse is not necessarily true.",
            "version": 0,
            "type": "function"
        },
        {
            "acResult": "getattr",
            "documentation": "Get a named attribute from an object; getattr(x, 'y') is equivalent to x.y.\nWhen a default argument is given, it is returned when the attribute doesn't\nexist; without it, an exception is raised in that case.",
            "version": 0,
            "type": "function"
        },
        {
            "acResult": "setattr",
            "documentation": "Sets the named attribute on the given object to the specified value.\n\nsetattr(x, 'y', v) is equivalent to ``x.y = v''",
            "version": 0,
            "type": "function"
        },
        {
            "acResult": "raw_input",
            "documentation": "",
            "version": 0,
            "type": "function"
        },
        {
            "acResult": "input",
            "documentation": "Read a string from standard input.  The trailing newline is stripped.\n\nThe prompt string, if given, is printed to standard output without a\ntrailing newline before reading input.\n\nIf the user hits EOF (*nix: Ctrl-D, Windows: Ctrl-Z+Return), raise EOFError.\nOn *nix systems, readline is used if available.",
            "version": 0,
            "type": "function"
        },
        {
            "acResult": "jseval",
            "documentation": "",
            "version": 0,
            "type": "function"
        },
        {
            "acResult": "jsmillis",
            "documentation": "",
            "version": 0,
            "type": "function"
        },
        {
            "acResult": "compile",
            "documentation": "Compile source into a code object that can be executed by exec() or eval().\n\nThe source code may represent a Python module, statement or expression.\nThe filename will be used for run-time error messages.\nThe mode must be 'exec' to compile a module, 'single' to compile a\nsingle (interactive) statement, or 'eval' to compile an expression.\nThe flags argument, if present, controls which future statements influence\nthe compilation of the code.\nThe dont_inherit argument, if true, stops the compilation inheriting\nthe effects of any future statements in effect in the code calling\ncompile; if absent or false these statements do influence the compilation,\nin addition to any features explicitly specified.",
            "version": 0,
            "type": "function"
        },
        {
            "acResult": "exec",
            "documentation": "Execute the given source in the context of globals and locals.\n\nThe source may be a string representing one or more Python statements\nor a code object as returned by compile().\nThe globals must be a dictionary and locals can be any mapping,\ndefaulting to the current globals and locals.\nIf only globals is given, locals defaults to it.",
            "version": 0,
            "type": "function"
        },
        {
            "acResult": "eval",
            "documentation": "Evaluate the given source in the context of globals and locals.\n\nThe source may be a string representing a Python expression\nor a code object as returned by compile().\nThe globals must be a dictionary and locals can be any mapping,\ndefaulting to the current globals and locals.\nIf only globals is given, locals defaults to it.",
            "version": 0,
            "type": "function"
        },
        {
            "acResult": "map",
            "documentation": "Make an iterator that computes the function using arguments from\neach of the iterables.  Stops when the shortest iterable is exhausted.",
            "version": 0,
            "type": "function"
        },
        {
            "acResult": "reduce",
            "documentation": "",
            "version": 0,
            "type": "function"
        },
        {
            "acResult": "sorted",
            "documentation": "Return a new list containing all items from the iterable in ascending order.\n\nA custom key function can be supplied to customize the sort order, and the\nreverse flag can be set to request the result in descending order.",
            "version": 0,
            "type": "function"
        },
        {
            "acResult": "filter",
            "documentation": "Return an iterator yielding those items of iterable for which function(item)\nis true. If function is None, return the items that are true.",
            "version": 0,
            "type": "function"
        },
        {
            "acResult": "hasattr",
            "documentation": "Return whether the object has an attribute with the given name.\n\nThis is done by calling getattr(obj, name) and catching AttributeError.",
            "version": 0,
            "type": "function"
        },
        {
            "acResult": "pow",
            "documentation": "Equivalent to base**exp with 2 arguments or base**exp % mod with 3 arguments\n\nSome types, such as ints, are able to use a more efficient algorithm when\ninvoked using the three argument form.",
            "version": 0,
            "type": "function"
        },
        {
            "acResult": "quit",
            "documentation": "",
            "version": 0,
            "type": "function"
        },
        {
            "acResult": "issubclass",
            "documentation": "Return whether 'cls' is derived from another class or is the same class.\n\nA tuple, as in ``issubclass(x, (A, B, ...))``, may be given as the target to\ncheck against. This is equivalent to ``issubclass(x, A) or issubclass(x, B)\nor ...``.",
            "version": 0,
            "type": "function"
        },
        {
            "acResult": "globals",
            "documentation": "Return the dictionary containing the current scope's global variables.\n\nNOTE: Updates to this dictionary *will* affect name lookups in the current\nglobal scope and vice-versa.",
            "version": 0,
            "type": "function"
        },
        {
            "acResult": "divmod",
            "documentation": "Return the tuple (x//y, x%y).  Invariant: div*y + mod == x.",
            "version": 0,
            "type": "function"
        },
        {
            "acResult": "format",
            "documentation": "Return value.__format__(format_spec)\n\nformat_spec defaults to the empty string.\nSee the Format Specification Mini-Language section of help('FORMATTING') for\ndetails.",
            "version": 0,
            "type": "function"
        },
        {
            "acResult": "id",
            "documentation": "Return the identity of an object.\n\nThis is guaranteed to be unique among simultaneously existing objects.\n(CPython uses the object's memory address.)",
            "version": 0,
            "type": "function"
        },
        {
            "acResult": "bytearray",
            "documentation": "Construct a mutable bytearray object from:\n  - an iterable yielding integers in range(256)\n  - a text string encoded using the specified encoding\n  - a bytes or a buffer object\n  - any object implementing the buffer API.\n  - an integer",
            "version": 0,
            "type": "function"
        },
        {
            "acResult": "callable",
            "documentation": "Return whether the object is callable (i.e., some kind of function).\n\nNote that classes are callable, as are instances of classes with a\n__call__() method.",
            "version": 0,
            "type": "function"
        },
        {
            "acResult": "delattr",
            "documentation": "Deletes the named attribute from the given object.\n\ndelattr(x, 'y') is equivalent to ``del x.y''",
            "version": 0,
            "type": "function"
        },
        {
            "acResult": "execfile",
            "documentation": "",
            "version": 0,
            "type": "function"
        },
        {
            "acResult": "help",
            "documentation": "Define the builtin 'help'.\n\nThis is a wrapper around pydoc.help that provides a helpful message\nwhen 'help' is typed at the Python interactive prompt.\n\nCalling help() at the Python prompt starts an interactive help session.\nCalling help(thing) prints help for the python object 'thing'.",
            "version": 0,
            "type": "function"
        },
        {
            "acResult": "iter",
            "documentation": "Get an iterator from an object.  In the first form, the argument must\nsupply its own iterator, or be a sequence.\nIn the second form, the callable is called until it returns the sentinel.",
            "version": 0,
            "type": "function"
        },
        {
            "acResult": "locals",
            "documentation": "Return a dictionary containing the current scope's local variables.\n\nNOTE: Whether or not updates to this dictionary will affect name lookups in\nthe local scope and vice-versa is *implementation dependent* and not\ncovered by any backwards compatibility guarantees.",
            "version": 0,
            "type": "function"
        },
        {
            "acResult": "memoryview",
            "documentation": "Create a new memoryview object which references the given object.",
            "version": 0,
            "type": "function"
        },
        {
            "acResult": "next_",
            "documentation": "",
            "version": 0,
            "type": "function"
        },
        {
            "acResult": "reload",
            "documentation": "",
            "version": 0,
            "type": "function"
        },
        {
            "acResult": "vars",
            "documentation": "Without arguments, equivalent to locals().\nWith an argument, equivalent to object.__dict__.",
            "version": 0,
            "type": "function"
        },
        {
            "acResult": "apply_",
            "documentation": "",
            "version": 0,
            "type": "function"
        },
        {
            "acResult": "buffer",
            "documentation": "",
            "version": 0,
            "type": "function"
        },
        {
            "acResult": "coerce",
            "documentation": "",
            "version": 0,
            "type": "function"
        },
        {
            "acResult": "intern",
            "documentation": "",
            "version": 0,
            "type": "function"
        },
        {
            "acResult": "BaseException",
            "documentation": "Common base class for all exceptions",
            "version": 0,
            "type": "function"
        },
        {
            "acResult": "SystemExit",
            "documentation": "Request to exit from the interpreter.",
            "version": 0,
            "type": "function"
        },
        {
            "acResult": "KeyboardInterrupt",
            "documentation": "Program interrupted by user.",
            "version": 0,
            "type": "function"
        },
        {
            "acResult": "GeneratorExit",
            "documentation": "Request that a generator exit.",
            "version": 0,
            "type": "function"
        },
        {
            "acResult": "Exception",
            "documentation": "Common base class for all non-exit exceptions.",
            "version": 0,
            "type": "function"
        },
        {
            "acResult": "StopIteration",
            "documentation": "Signal the end from iterator.__next__().",
            "version": 0,
            "type": "function"
        },
        {
            "acResult": "StopAsyncIteration",
            "documentation": "Signal the end from iterator.__anext__().",
            "version": 0,
            "type": "function"
        },
        {
            "acResult": "ArithmeticError",
            "documentation": "Base class for arithmetic errors.",
            "version": 0,
            "type": "function"
        },
        {
            "acResult": "FloatingPointError",
            "documentation": "Floating point operation failed.",
            "version": 0,
            "type": "function"
        },
        {
            "acResult": "OverflowError",
            "documentation": "Result too large to be represented.",
            "version": 0,
            "type": "function"
        },
        {
            "acResult": "ZeroDivisionError",
            "documentation": "Second argument to a division or modulo operation was zero.",
            "version": 0,
            "type": "function"
        },
        {
            "acResult": "AssertionError",
            "documentation": "Assertion failed.",
            "version": 0,
            "type": "function"
        },
        {
            "acResult": "AttributeError",
            "documentation": "Attribute not found.",
            "version": 0,
            "type": "function"
        },
        {
            "acResult": "BufferError",
            "documentation": "Buffer error.",
            "version": 0,
            "type": "function"
        },
        {
            "acResult": "EOFError",
            "documentation": "Read beyond end of file.",
            "version": 0,
            "type": "function"
        },
        {
            "acResult": "ImportError",
            "documentation": "Import can't find module, or can't find name in module.",
            "version": 0,
            "type": "function"
        },
        {
            "acResult": "ModuleNotFoundError",
            "documentation": "Module not found.",
            "version": 0,
            "type": "function"
        },
        {
            "acResult": "LookupError",
            "documentation": "Base class for lookup errors.",
            "version": 0,
            "type": "function"
        },
        {
            "acResult": "IndexError",
            "documentation": "Sequence index out of range.",
            "version": 0,
            "type": "function"
        },
        {
            "acResult": "KeyError",
            "documentation": "Mapping key not found.",
            "version": 0,
            "type": "function"
        },
        {
            "acResult": "MemoryError",
            "documentation": "Out of memory.",
            "version": 0,
            "type": "function"
        },
        {
            "acResult": "NameError",
            "documentation": "Name not found globally.",
            "version": 0,
            "type": "function"
        },
        {
            "acResult": "UnboundLocalError",
            "documentation": "Local name referenced but not bound to a value.",
            "version": 0,
            "type": "function"
        },
        {
            "acResult": "OSError",
            "documentation": "Base class for I/O related errors.",
            "version": 0,
            "type": "function"
        },
        {
            "acResult": "IOError",
            "documentation": "Base class for I/O related errors.",
            "version": 0,
            "type": "function"
        },
        {
            "acResult": "FileNotFoundError",
            "documentation": "File not found.",
            "version": 0,
            "type": "function"
        },
        {
            "acResult": "TimeoutError",
            "documentation": "Timeout expired.",
            "version": 0,
            "type": "function"
        },
        {
            "acResult": "ReferenceError",
            "documentation": "Weak ref proxy used after referent went away.",
            "version": 0,
            "type": "function"
        },
        {
            "acResult": "RuntimeError",
            "documentation": "Unspecified run-time error.",
            "version": 0,
            "type": "function"
        },
        {
            "acResult": "NotImplementedError",
            "documentation": "Method or function hasn't been implemented yet.",
            "version": 0,
            "type": "function"
        },
        {
            "acResult": "RecursionError",
            "documentation": "Recursion limit exceeded.",
            "version": 0,
            "type": "function"
        },
        {
            "acResult": "SyntaxError",
            "documentation": "Invalid syntax.",
            "version": 0,
            "type": "function"
        },
        {
            "acResult": "IndentationError",
            "documentation": "Improper indentation.",
            "version": 0,
            "type": "function"
        },
        {
            "acResult": "TabError",
            "documentation": "Improper mixture of spaces and tabs.",
            "version": 0,
            "type": "function"
        },
        {
            "acResult": "SystemError",
            "documentation": "Internal error in the Python interpreter.\n\nPlease report this to the Python maintainer, along with the traceback,\nthe Python version, and the hardware/OS platform and version.",
            "version": 0,
            "type": "function"
        },
        {
            "acResult": "TypeError",
            "documentation": "Inappropriate argument type.",
            "version": 0,
            "type": "function"
        },
        {
            "acResult": "ValueError",
            "documentation": "Inappropriate argument value (of correct type).",
            "version": 0,
            "type": "function"
        },
        {
            "acResult": "UnicodeError",
            "documentation": "Unicode related error.",
            "version": 0,
            "type": "function"
        },
        {
            "acResult": "UnicodeDecodeError",
            "documentation": "Unicode decoding error.",
            "version": 0,
            "type": "function"
        },
        {
            "acResult": "UnicodeEncodeError",
            "documentation": "Unicode encoding error.",
            "version": 0,
            "type": "function"
        },
        {
            "acResult": "SuspensionError",
            "documentation": "",
            "version": 0,
            "type": "function"
        },
        {
            "acResult": "ExternalError",
            "documentation": "",
            "version": 0,
            "type": "function"
        },
        {
            "acResult": "getExcInfo",
            "documentation": "",
            "version": 0,
            "type": "function"
        },
        {
            "acResult": "method",
            "documentation": "",
            "version": 0,
            "type": "function"
        },
        {
            "acResult": "callable_iter_",
            "documentation": "",
            "version": 0,
            "type": "function"
        },
        {
            "acResult": "seq_iter_",
            "documentation": "",
            "version": 0,
            "type": "function"
        },
        {
            "acResult": "list",
            "documentation": "Built-in mutable sequence.\n\nIf no argument is given, the constructor creates a new empty list.\nThe argument must be an iterable if specified.",
            "version": 0,
            "type": "function"
        },
        {
            "acResult": "bytes",
            "documentation": "Construct an immutable array of bytes from:\n  - an iterable yielding integers in range(256)\n  - a text string encoded using the specified encoding\n  - any object implementing the buffer API.\n  - an integer",
            "version": 0,
            "type": "function"
        },
        {
            "acResult": "tuple",
            "documentation": "Built-in immutable sequence.\n\nIf no argument is given, the constructor returns an empty tuple.\nIf iterable is specified the tuple is initialized from iterable's items.\n\nIf the argument is a tuple, the return value is the same object.",
            "version": 0,
            "type": "function"
        },
        {
            "acResult": "dict",
            "documentation": "dict() -> new empty dictionary\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs\ndict(iterable) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in iterable:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)",
            "version": 0,
            "type": "function"
        },
        {
            "acResult": "mappingproxy",
            "documentation": "",
            "version": 0,
            "type": "function"
        },
        {
            "acResult": "property",
            "documentation": "Property attribute.\n\n  fget\n    function to be used for getting an attribute value\n  fset\n    function to be used for setting an attribute value\n  fdel\n    function to be used for del'ing an attribute\n  doc\n    docstring\n\nTypical use is to define a managed attribute x:\n\nclass C(object):\n    def getx(self): return self._x\n    def setx(self, value): self._x = value\n    def delx(self): del self._x\n    x = property(getx, setx, delx, \"I'm the 'x' property.\")\n\nDecorators make defining new properties or modifying existing ones easy:\n\nclass C(object):\n    @property\n    def x(self):\n        \"I am the 'x' property.\"\n        return self._x\n    @x.setter\n    def x(self, value):\n        self._x = value\n    @x.deleter\n    def x(self):\n        del self._x",
            "version": 0,
            "type": "function"
        },
        {
            "acResult": "classmethod",
            "documentation": "Convert a function to be a class method.\n\nA class method receives the class as implicit first argument,\njust like an instance method receives the instance.\nTo declare a class method, use this idiom:\n\n  class C:\n      @classmethod\n      def f(cls, arg1, arg2, ...):\n          ...\n\nIt can be called either on the class (e.g. C.f()) or on an instance\n(e.g. C().f()).  The instance is ignored except for its class.\nIf a class method is called for a derived class, the derived class\nobject is passed as the implied first argument.\n\nClass methods are different than C++ or Java static methods.\nIf you want those, see the staticmethod builtin.",
            "version": 0,
            "type": "function"
        },
        {
            "acResult": "staticmethod",
            "documentation": "Convert a function to be a static method.\n\nA static method does not receive an implicit first argument.\nTo declare a static method, use this idiom:\n\n     class C:\n         @staticmethod\n         def f(arg1, arg2, ...):\n             ...\n\nIt can be called either on the class (e.g. C.f()) or on an instance\n(e.g. C().f()). Both the class and the instance are ignored, and\nneither is passed implicitly as the first argument to the method.\n\nStatic methods in Python are similar to those found in Java or C++.\nFor a more advanced concept, see the classmethod builtin.",
            "version": 0,
            "type": "function"
        },
        {
            "acResult": "int_",
            "documentation": "",
            "version": 0,
            "type": "function"
        },
        {
            "acResult": "lng",
            "documentation": "",
            "version": 0,
            "type": "function"
        },
        {
            "acResult": "bool",
            "documentation": "Returns True when the argument x is true, False otherwise.\nThe builtins True and False are the only two instances of the class bool.\nThe class bool is a subclass of the class int, and cannot be subclassed.",
            "version": 0,
            "type": "function"
        },
        {
            "acResult": "float_",
            "documentation": "",
            "version": 0,
            "type": "function"
        },
        {
            "acResult": "complex",
            "documentation": "Create a complex number from a real part and an optional imaginary part.\n\nThis is equivalent to (real + imag*1j) where imag defaults to 0.",
            "version": 0,
            "type": "function"
        },
        {
            "acResult": "slice",
            "documentation": "Create a slice object.  This is used for extended slicing (e.g. a[0:10:2]).",
            "version": 0,
            "type": "function"
        },
        {
            "acResult": "set",
            "documentation": "Build an unordered collection of unique elements.",
            "version": 0,
            "type": "function"
        },
        {
            "acResult": "frozenset",
            "documentation": "Build an immutable unordered collection of unique elements.",
            "version": 0,
            "type": "function"
        },
        {
            "acResult": "print",
            "documentation": "Prints the values to a stream, or to sys.stdout by default.\nOptional keyword arguments:\nfile:  a file-like object (stream); defaults to the current sys.stdout.\nsep:   string inserted between values, default a space.\nend:   string appended after the last value, default a newline.\nflush: whether to forcibly flush the stream.",
            "version": 0,
            "type": "function"
        },
        {
            "acResult": "module",
            "documentation": "",
            "version": 0,
            "type": "function"
        },
        {
            "acResult": "structseq_types",
            "documentation": "",
            "version": 0,
            "type": "function"
        },
        {
            "acResult": "make_structseq",
            "documentation": "",
            "version": 0,
            "type": "function"
        },
        {
            "acResult": "generator",
            "documentation": "",
            "version": 0,
            "type": "function"
        },
        {
            "acResult": "makeGenerator",
            "documentation": "",
            "version": 0,
            "type": "function"
        },
        {
            "acResult": "file",
            "documentation": "",
            "version": 0,
            "type": "function"
        },
        {
            "acResult": "range_",
            "documentation": "",
            "version": 0,
            "type": "function"
        },
        {
            "acResult": "xrange",
            "documentation": "",
            "version": 0,
            "type": "function"
        },
        {
            "acResult": "range",
            "documentation": "Return an object that produces a sequence of integers from start (inclusive)\nto stop (exclusive) by step.  range(i, j) produces i, i+1, i+2, ..., j-1.\nstart defaults to 0, and stop is omitted!  range(4) produces 0, 1, 2, 3.\nThese are exactly the valid indices for a list of 4 elements.\nWhen step is given, it specifies the increment (or decrement).",
            "version": 0,
            "type": "function"
        },
        {
            "acResult": "enumerate",
            "documentation": "Return an enumerate object.\n\n  iterable\n    an object supporting iteration\n\nThe enumerate object yields pairs containing a count (from start, which\ndefaults to zero) and a value yielded by the iterable argument.\n\nenumerate is useful for obtaining an indexed list:\n    (0, seq[0]), (1, seq[1]), (2, seq[2]), ...",
            "version": 0,
            "type": "function"
        },
        {
            "acResult": "filter_",
            "documentation": "",
            "version": 0,
            "type": "function"
        },
        {
            "acResult": "map_",
            "documentation": "",
            "version": 0,
            "type": "function"
        },
        {
            "acResult": "reversed",
            "documentation": "Return a reverse iterator over the values of the given sequence.",
            "version": 0,
            "type": "function"
        },
        {
            "acResult": "zip_",
            "documentation": "",
            "version": 0,
            "type": "function"
        },
        {
            "acResult": "__import__",
            "documentation": "",
            "version": 0,
            "type": "function"
        },
        {
            "acResult": "timSort",
            "documentation": "",
            "version": 0,
            "type": "function"
        },
        {
            "acResult": "listSlice",
            "documentation": "",
            "version": 0,
            "type": "function"
        },
        {
            "acResult": "super_",
            "documentation": "",
            "version": 0,
            "type": "function"
        },
        {
            "acResult": "GenericAlias",
            "documentation": "",
            "version": 0,
            "type": "function"
        }
    ],
    "test": [
        {
            "acResult": "__author__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__doc__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__file__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__loader__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__name__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__package__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__path__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__spec__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "testEqual",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "testNotEqual",
            "documentation": "",
            "type": "",
            "version": 0
        }
    ],
    "unittest": [
        {
            "acResult": "TestCase",
            "documentation": "A class whose instances are single test cases.\n\nBy default, the test code itself should be placed in a method named\n'runTest'.\n\nIf the fixture may be used for many test cases, create as\nmany test methods as are needed. When instantiating such a TestCase\nsubclass, specify in the constructor arguments the name of the test method\nthat the instance is to execute.\n\nTest authors should subclass TestCase for their own tests. Construction\nand deconstruction of the test's environment ('fixture') can be\nimplemented by overriding the 'setUp' and 'tearDown' methods respectively.\n\nIf it is necessary to override the __init__ method, the base class\n__init__ method must always be called. It is important that subclasses\nshould not change the signature of their __init__ method, since instances\nof the classes are instantiated automatically by parts of the framework\nin order to be run.\n\nWhen subclassing TestCase, you can set these attributes:\n* failureException: determines which exception will be raised when\n    the instance's assertion methods fail; test methods raising this\n    exception will be deemed to have 'failed' rather than 'errored'.\n* longMessage: determines whether long messages (including repr of\n    objects used in assert methods) will be printed on failure in *addition*\n    to any explicit message passed.\n* maxDiff: sets the maximum length of a diff in failure messages\n    by assert methods using difflib. It is looked up as an instance\n    attribute so can be configured by individual tests if required.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "_AssertRaisesContext",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__author__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__doc__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__file__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__loader__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__name__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__package__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__path__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__spec__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "main",
            "documentation": "A command-line program that runs a set of tests; this is primarily\nfor making test modules conveniently executable.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "re",
            "documentation": "",
            "type": "",
            "version": 0
        }
    ],
    "urllib": [
        {
            "acResult": "__doc__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__loader__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__name__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__package__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__path__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__spec__",
            "documentation": "",
            "type": "",
            "version": 0
        }
    ],
    "urllib.request": [
        {
            "acResult": "Response",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__doc__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__loader__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__name__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__package__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__path__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__spec__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "urlopen",
            "documentation": "Open the URL url, which can be either a string or a Request object.\n\n*data* must be an object specifying additional data to be sent to\nthe server, or None if no such data is needed.  See Request for\ndetails.\n\nurllib.request module uses HTTP/1.1 and includes a \"Connection:close\"\nheader in its HTTP requests.\n\nThe optional *timeout* parameter specifies a timeout in seconds for\nblocking operations like the connection attempt (if not specified, the\nglobal default timeout setting will be used). This only works for HTTP,\nHTTPS and FTP connections.\n\nIf *context* is specified, it must be a ssl.SSLContext instance describing\nthe various SSL options. See HTTPSConnection for more details.\n\nThe optional *cafile* and *capath* parameters specify a set of trusted CA\ncertificates for HTTPS requests. cafile should point to a single file\ncontaining a bundle of CA certificates, whereas capath should point to a\ndirectory of hashed certificate files. More information can be found in\nssl.SSLContext.load_verify_locations().\n\nThe *cadefault* parameter is ignored.\n\n\nThis function always returns an object which can work as a\ncontext manager and has the properties url, headers, and status.\nSee urllib.response.addinfourl for more detail on these properties.\n\nFor HTTP and HTTPS URLs, this function returns a http.client.HTTPResponse\nobject slightly modified. In addition to the three new methods above, the\nmsg attribute contains the same information as the reason attribute ---\nthe reason phrase returned by the server --- instead of the response\nheaders as it is specified in the documentation for HTTPResponse.\n\nFor FTP, file, and data URLs and requests explicitly handled by legacy\nURLopener and FancyURLopener classes, this function returns a\nurllib.response.addinfourl object.\n\nNote that None may be returned if no handler handles the request (though\nthe default installed global OpenerDirector uses UnknownHandler to ensure\nthis never happens).\n\nIn addition, if proxy settings are detected (for example, when a *_proxy\nenvironment variable like http_proxy is set), ProxyHandler is default\ninstalled and makes sure the requests are handled through the proxy.",
            "type": "",
            "version": 0
        }
    ],
    "webgl": [
        {
            "acResult": "Context",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "Float32Array",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "Matrix4x4",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__doc__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__loader__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__name__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__package__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__path__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__spec__",
            "documentation": "",
            "type": "",
            "version": 0
        }
    ],
    "antigravity": [
        {
            "acResult": "__doc__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__file__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__loader__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__name__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__package__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__spec__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "webbrowser",
            "documentation": "Interfaces for launching and remotely controlling web browsers.",
            "type": "",
            "version": 0
        }
    ],
    "array": [
        {
            "acResult": "__doc__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__loader__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__name__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__package__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__spec__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "array",
            "documentation": "Return a new array whose items are restricted by typecode, and\ninitialized from the optional initializer value, which must be a list,\nstring or iterable over elements of the appropriate type.\n\nArrays represent basic values and behave very much like lists, except\nthe type of objects stored in them is constrained. The type is specified\nat object creation time by using a type code, which is a single character.\nThe following type codes are defined:\n\n    Type code   C Type             Minimum size in bytes\n    'b'         signed integer     1\n    'B'         unsigned integer   1\n    'u'         Unicode character  2 (see note)\n    'h'         signed integer     2\n    'H'         unsigned integer   2\n    'i'         signed integer     2\n    'I'         unsigned integer   2\n    'l'         signed integer     4\n    'L'         unsigned integer   4\n    'q'         signed integer     8 (see note)\n    'Q'         unsigned integer   8 (see note)\n    'f'         floating point     4\n    'd'         floating point     8\n\nNOTE: The 'u' typecode corresponds to Python's unicode character. On\nnarrow builds this is 2-bytes on wide builds this is 4-bytes.\n\nNOTE: The 'q' and 'Q' type codes are only available if the platform\nC compiler used to build Python supports 'long long', or, on Windows,\n'__int64'.\n\nMethods:\n\nappend() -- append a new item to the end of the array\nbuffer_info() -- return information giving the current memory info\nbyteswap() -- byteswap all the items of the array\ncount() -- return number of occurrences of an object\nextend() -- extend array by appending multiple elements from an iterable\nfromfile() -- read items from a file object\nfromlist() -- append items from the list\nfrombytes() -- append items from the string\nindex() -- return index of first occurrence of an object\ninsert() -- insert a new item into the array at a provided position\npop() -- remove and return item (default last)\nremove() -- remove first occurrence of an object\nreverse() -- reverse the order of the items in the array\ntofile() -- write all items to a file object\ntolist() -- return the array converted to an ordinary list\ntobytes() -- return the array converted to a string\n\nAttributes:\n\ntypecode -- the typecode character used to create the array\nitemsize -- the length in bytes of one array item",
            "type": "",
            "version": 0
        }
    ],
    "bisect": [
        {
            "acResult": "__doc__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__file__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__loader__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__name__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__package__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__spec__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "bisect",
            "documentation": "Return the index where to insert item x in list a, assuming a is sorted.\n\nThe return value i is such that all e in a[:i] have e <= x, and all e in\na[i:] have e > x.  So if x already appears in the list, a.insert(i, x) will\ninsert just after the rightmost x already there.\n\nOptional args lo (default 0) and hi (default len(a)) bound the\nslice of a to be searched.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "bisect_left",
            "documentation": "Return the index where to insert item x in list a, assuming a is sorted.\n\nThe return value i is such that all e in a[:i] have e < x, and all e in\na[i:] have e >= x.  So if x already appears in the list, a.insert(i, x) will\ninsert just before the leftmost x already there.\n\nOptional args lo (default 0) and hi (default len(a)) bound the\nslice of a to be searched.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "bisect_right",
            "documentation": "Return the index where to insert item x in list a, assuming a is sorted.\n\nThe return value i is such that all e in a[:i] have e <= x, and all e in\na[i:] have e > x.  So if x already appears in the list, a.insert(i, x) will\ninsert just after the rightmost x already there.\n\nOptional args lo (default 0) and hi (default len(a)) bound the\nslice of a to be searched.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "insort",
            "documentation": "Insert item x in list a, and keep it sorted assuming a is sorted.\n\nIf x is already in a, insert it to the right of the rightmost x.\n\nOptional args lo (default 0) and hi (default len(a)) bound the\nslice of a to be searched.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "insort_left",
            "documentation": "Insert item x in list a, and keep it sorted assuming a is sorted.\n\nIf x is already in a, insert it to the left of the leftmost x.\n\nOptional args lo (default 0) and hi (default len(a)) bound the\nslice of a to be searched.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "insort_right",
            "documentation": "Insert item x in list a, and keep it sorted assuming a is sorted.\n\nIf x is already in a, insert it to the right of the rightmost x.\n\nOptional args lo (default 0) and hi (default len(a)) bound the\nslice of a to be searched.",
            "type": "",
            "version": 0
        }
    ],
    "collections": [
        {
            "acResult": "Counter",
            "documentation": "Dict subclass for counting hashable items.  Sometimes called a bag\nor multiset.  Elements are stored as dictionary keys and their counts\nare stored as dictionary values.\n\n>>> c = Counter('abcdeabcdabcaba')  # count elements from a string\n\n>>> c.most_common(3)                # three most common elements\n[('a', 5), ('b', 4), ('c', 3)]\n>>> sorted(c)                       # list all unique elements\n['a', 'b', 'c', 'd', 'e']\n>>> ''.join(sorted(c.elements()))   # list elements with repetitions\n'aaaaabbbbcccdde'\n>>> sum(c.values())                 # total of all counts\n15\n\n>>> c['a']                          # count of letter 'a'\n5\n>>> for elem in 'shazam':           # update counts from an iterable\n...     c[elem] += 1                # by adding 1 to each element's count\n>>> c['a']                          # now there are seven 'a'\n7\n>>> del c['b']                      # remove all 'b'\n>>> c['b']                          # now there are zero 'b'\n0\n\n>>> d = Counter('simsalabim')       # make another counter\n>>> c.update(d)                     # add in the second counter\n>>> c['a']                          # now there are nine 'a'\n9\n\n>>> c.clear()                       # empty the counter\n>>> c\nCounter()\n\nNote:  If a count is set to zero or reduced to zero, it will remain\nin the counter until the entry is deleted or the counter is cleared:\n\n>>> c = Counter('aaabbc')\n>>> c['b'] -= 2                     # reduce the count of 'b' by two\n>>> c.most_common()                 # 'b' is still in, but its count is zero\n[('a', 3), ('c', 1), ('b', 0)]",
            "type": "",
            "version": 0
        },
        {
            "acResult": "OrderedDict",
            "documentation": "Dictionary that remembers insertion order",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__all__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__doc__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__loader__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__name__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__package__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__spec__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "_chain",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "_iskeyword",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "_itemgetter",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "_repeat",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "_starmap",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "defaultdict",
            "documentation": "The default factory is called without arguments to produce\na new value when a key is not present, in __getitem__ only.\nA defaultdict compares equal to a dict with the same items.\nAll remaining arguments are treated the same as if they were\npassed to the dict constructor, including keyword arguments.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "deque",
            "documentation": "A list-like sequence optimized for data accesses near its endpoints.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "namedtuple",
            "documentation": "Returns a new subclass of tuple with named fields.\n\n>>> Point = namedtuple('Point', ['x', 'y'])\n>>> Point.__doc__                   # docstring for the new class\n'Point(x, y)'\n>>> p = Point(11, y=22)             # instantiate with positional args or keywords\n>>> p[0] + p[1]                     # indexable like a plain tuple\n33\n>>> x, y = p                        # unpack like a regular tuple\n>>> x, y\n(11, 22)\n>>> p.x + p.y                       # fields also accessible by name\n33\n>>> d = p._asdict()                 # convert to a dictionary\n>>> d['x']\n11\n>>> Point(**d)                      # convert from a dictionary\nPoint(x=11, y=22)\n>>> p._replace(x=100)               # _replace() is like str.replace() but targets named fields\nPoint(x=100, y=22)",
            "type": "",
            "version": 0
        }
    ],
    "copy": [
        {
            "acResult": "Error",
            "documentation": "Common base class for all non-exit exceptions.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "_EmptyClass",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__doc__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__file__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__loader__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__name__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__package__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__spec__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "_copy_inst",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "_deepcopy_atomic",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "_deepcopy_dict",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "_deepcopy_dispatch",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "_deepcopy_frozenset",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "_deepcopy_inst",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "_deepcopy_list",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "_deepcopy_set",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "_deepcopy_tuple",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "_keep_alive",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "_reconstruct",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "check_notimplemented_state",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "copy",
            "documentation": "Shallow copy operation on arbitrary Python objects.\n\nSee the module's __doc__ string for more info.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "deepcopy",
            "documentation": "Deep copy operation on arbitrary Python objects.\n\nSee the module's __doc__ string for more info.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "error",
            "documentation": "Common base class for all non-exit exceptions.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "long",
            "documentation": "",
            "type": "",
            "version": 0
        }
    ],
    "datetime": [
        {
            "acResult": "MAXYEAR",
            "documentation": "Convert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": "",
            "version": 0
        },
        {
            "acResult": "MINYEAR",
            "documentation": "Convert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__all__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__doc__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__loader__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__name__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__package__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__spec__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "date",
            "documentation": "date(year, month, day) --> date object",
            "type": "",
            "version": 0
        },
        {
            "acResult": "datetime",
            "documentation": "The year, month and day arguments are required. tzinfo may be None, or an\ninstance of a tzinfo subclass. The remaining arguments may be ints.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "time",
            "documentation": "All arguments are optional. tzinfo may be None, or an instance of\na tzinfo subclass. The remaining arguments may be ints.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "timedelta",
            "documentation": "Difference between two datetime values.\n\ntimedelta(days=0, seconds=0, microseconds=0, milliseconds=0, minutes=0, hours=0, weeks=0)\n\nAll arguments are optional and default to 0.\nArguments may be integers or floats, and may be positive or negative.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "timezone",
            "documentation": "Fixed offset from UTC implementation of tzinfo.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "tzinfo",
            "documentation": "Abstract base class for time zone info objects.",
            "type": "",
            "version": 0
        }
    ],
    "document": [
        {
            "acResult": "ATTRIBUTE_NODE",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "CDATA_SECTION_NODE",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "COMMENT_NODE",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "DOCUMENT_FRAGMENT_NODE",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "DOCUMENT_NODE",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "DOCUMENT_POSITION_CONTAINED_BY",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "DOCUMENT_POSITION_CONTAINS",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "DOCUMENT_POSITION_DISCONNECTED",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "DOCUMENT_POSITION_FOLLOWING",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "DOCUMENT_POSITION_PRECEDING",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "DOCUMENT_TYPE_NODE",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "ELEMENT_NODE",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "ENTITY_NODE",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "ENTITY_REFERENCE_NODE",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "NOTATION_NODE",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "PROCESSING_INSTRUCTION_NODE",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "TEXT_NODE",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "URL",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__bool__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__call__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__class__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__contains__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__delattr__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__delitem__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__dir__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__doc__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__eq__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__format__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__ge__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__getattribute__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__getitem__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__gt__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__hash__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__init__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__init_subclass__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__le__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__lt__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__module__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__name__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__ne__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__new__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__repr__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__setattr__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__setitem__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__str__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "activeElement",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "addEventListener",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "adoptNode",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "adoptedStyleSheets",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "alinkColor",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "all",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "anchors",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "append",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "appendChild",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "applets",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "baseURI",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "bgColor",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "body",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "captureEvents",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "caretRangeFromPoint",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "characterSet",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "charset",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "childElementCount",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "childNodes",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "children",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "clear",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "cloneNode",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "close",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "compareDocumentPosition",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "compatMode",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "constructor",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "contains",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "contentType",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "cookie",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "createAttribute",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "createAttributeNS",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "createCDATASection",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "createComment",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "createDocumentFragment",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "createElement",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "createElementNS",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "createEvent",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "createExpression",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "createNSResolver",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "createNodeIterator",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "createProcessingInstruction",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "createRange",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "createTextNode",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "createTreeWalker",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "currentScript",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "defaultView",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "designMode",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "dir",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "dispatchEvent",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "doctype",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "documentElement",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "documentURI",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "domain",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "elementFromPoint",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "elementsFromPoint",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "embeds",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "evaluate",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "execCommand",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "exitFullscreen",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "exitPictureInPicture",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "exitPointerLock",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "featurePolicy",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "fgColor",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "firstChild",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "firstElementChild",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "fonts",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "forms",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "fragmentDirective",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "fullscreen",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "fullscreenElement",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "fullscreenEnabled",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "get",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "getAnimations",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "getElementById",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "getElementsByClassName",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "getElementsByName",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "getElementsByTagName",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "getElementsByTagNameNS",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "getRootNode",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "getSelection",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "hasChildNodes",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "hasFocus",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "head",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "hidden",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "images",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "implementation",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "importNode",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "inputEncoding",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "insertBefore",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "isConnected",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "isDefaultNamespace",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "isEqualNode",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "isSameNode",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "keys",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "lastChild",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "lastElementChild",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "lastModified",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "linkColor",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "links",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "location",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "lookupNamespaceURI",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "lookupPrefix",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "nextSibling",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "nodeName",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "nodeType",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "nodeValue",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "normalize",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "onabort",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "onanimationend",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "onanimationiteration",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "onanimationstart",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "onauxclick",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "onbeforecopy",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "onbeforecut",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "onbeforeinput",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "onbeforematch",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "onbeforepaste",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "onbeforetoggle",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "onbeforexrselect",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "onblur",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "oncancel",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "oncanplay",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "oncanplaythrough",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "onchange",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "onclick",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "onclose",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "oncontentvisibilityautostatechange",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "oncontextlost",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "oncontextmenu",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "oncontextrestored",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "oncopy",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "oncuechange",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "oncut",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "ondblclick",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "ondrag",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "ondragend",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "ondragenter",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "ondragleave",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "ondragover",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "ondragstart",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "ondrop",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "ondurationchange",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "onemptied",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "onended",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "onerror",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "onfocus",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "onformdata",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "onfreeze",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "onfullscreenchange",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "onfullscreenerror",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "ongotpointercapture",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "oninput",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "oninvalid",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "onkeydown",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "onkeypress",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "onkeyup",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "onload",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "onloadeddata",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "onloadedmetadata",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "onloadstart",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "onlostpointercapture",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "onmousedown",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "onmouseenter",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "onmouseleave",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "onmousemove",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "onmouseout",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "onmouseover",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "onmouseup",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "onmousewheel",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "onpaste",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "onpause",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "onplay",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "onplaying",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "onpointercancel",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "onpointerdown",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "onpointerenter",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "onpointerleave",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "onpointerlockchange",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "onpointerlockerror",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "onpointermove",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "onpointerout",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "onpointerover",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "onpointerrawupdate",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "onpointerup",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "onprerenderingchange",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "onprogress",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "onratechange",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "onreadystatechange",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "onreset",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "onresize",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "onresume",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "onscroll",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "onscrollend",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "onsearch",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "onsecuritypolicyviolation",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "onseeked",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "onseeking",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "onselect",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "onselectionchange",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "onselectstart",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "onslotchange",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "onstalled",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "onsubmit",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "onsuspend",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "ontimeupdate",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "ontoggle",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "ontransitioncancel",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "ontransitionend",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "ontransitionrun",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "ontransitionstart",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "onvisibilitychange",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "onvolumechange",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "onwaiting",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "onwebkitanimationend",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "onwebkitanimationiteration",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "onwebkitanimationstart",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "onwebkitfullscreenchange",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "onwebkitfullscreenerror",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "onwebkittransitionend",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "onwheel",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "open",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "ownerDocument",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "parentElement",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "parentNode",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "pictureInPictureElement",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "pictureInPictureEnabled",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "plugins",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "pointerLockElement",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "prepend",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "prerendering",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "previousSibling",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "queryCommandEnabled",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "queryCommandIndeterm",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "queryCommandState",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "queryCommandSupported",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "queryCommandValue",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "querySelector",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "querySelectorAll",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "readyState",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "referrer",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "releaseEvents",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "removeChild",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "removeEventListener",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "replaceChild",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "replaceChildren",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "rootElement",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "scripts",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "scrollingElement",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "startViewTransition",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "styleSheets",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "textContent",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "timeline",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "title",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "visibilityState",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "vlinkColor",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "wasDiscarded",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "webkitCancelFullScreen",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "webkitCurrentFullScreenElement",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "webkitExitFullscreen",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "webkitFullscreenElement",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "webkitFullscreenEnabled",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "webkitHidden",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "webkitIsFullScreen",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "webkitVisibilityState",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "write",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "writeln",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "xmlEncoding",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "xmlStandalone",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "xmlVersion",
            "documentation": "",
            "type": "",
            "version": 0
        }
    ],
    "image": [
        {
            "acResult": "EmptyImage",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "Image",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "ImageWin",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "Pixel",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__doc__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__loader__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__name__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__package__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__spec__",
            "documentation": "",
            "type": "",
            "version": 0
        }
    ],
    "itertools": [
        {
            "acResult": "__doc__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__loader__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__name__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__package__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__spec__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "_grouper",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "accumulate",
            "documentation": "Return series of accumulated sums (or other binary function results).",
            "type": "",
            "version": 0
        },
        {
            "acResult": "chain",
            "documentation": "Return a chain object whose .__next__() method returns elements from the\nfirst iterable until it is exhausted, then elements from the next\niterable, until all of the iterables are exhausted.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "combinations",
            "documentation": "Return successive r-length combinations of elements in the iterable.\n\ncombinations(range(4), 3) --> (0,1,2), (0,1,3), (0,2,3), (1,2,3)",
            "type": "",
            "version": 0
        },
        {
            "acResult": "combinations_with_replacement",
            "documentation": "Return successive r-length combinations of elements in the iterable allowing individual elements to have successive repeats.\n\ncombinations_with_replacement('ABC', 2) --> AA AB AC BB BC CC\"",
            "type": "",
            "version": 0
        },
        {
            "acResult": "compress",
            "documentation": "Return data elements corresponding to true selector elements.\n\nForms a shorter iterator from selected data elements using the selectors to\nchoose the data elements.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "count",
            "documentation": "Return a count object whose .__next__() method returns consecutive values.\n\nEquivalent to:\n    def count(firstval=0, step=1):\n        x = firstval\n        while 1:\n            yield x\n            x += step",
            "type": "",
            "version": 0
        },
        {
            "acResult": "cycle",
            "documentation": "Return elements from the iterable until it is exhausted. Then repeat the sequence indefinitely.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "dropwhile",
            "documentation": "Drop items from the iterable while predicate(item) is true.\n\nAfterwards, return every element until the iterable is exhausted.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "filterfalse",
            "documentation": "Return those items of iterable for which function(item) is false.\n\nIf function is None, return the items that are false.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "groupby",
            "documentation": "make an iterator that returns consecutive keys and groups from the iterable\n\niterable\n  Elements to divide into groups according to the key function.\nkey\n  A function for computing the group category for each element.\n  If the key function is not specified or is None, the element itself\n  is used for grouping.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "islice",
            "documentation": "Return an iterator whose next() method returns selected values from an\niterable.  If start is specified, will skip all preceding elements;\notherwise, start defaults to zero.  Step defaults to one.  If\nspecified as another value, step determines how many values are\nskipped between successive calls.  Works like a slice() on a list\nbut returns an iterator.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "permutations",
            "documentation": "Return successive r-length permutations of elements in the iterable.\n\npermutations(range(3), 2) --> (0,1), (0,2), (1,0), (1,2), (2,0), (2,1)",
            "type": "",
            "version": 0
        },
        {
            "acResult": "product",
            "documentation": "Cartesian product of input iterables.  Equivalent to nested for-loops.\n\nFor example, product(A, B) returns the same as:  ((x,y) for x in A for y in B).\nThe leftmost iterators are in the outermost for-loop, so the output tuples\ncycle in a manner similar to an odometer (with the rightmost element changing\non every iteration).\n\nTo compute the product of an iterable with itself, specify the number\nof repetitions with the optional repeat keyword argument. For example,\nproduct(A, repeat=4) means the same as product(A, A, A, A).\n\nproduct('ab', range(3)) --> ('a',0) ('a',1) ('a',2) ('b',0) ('b',1) ('b',2)\nproduct((0,1), (0,1), (0,1)) --> (0,0,0) (0,0,1) (0,1,0) (0,1,1) (1,0,0) ...",
            "type": "",
            "version": 0
        },
        {
            "acResult": "repeat",
            "documentation": "repeat(object [,times]) -> create an iterator which returns the object\nfor the specified number of times.  If not specified, returns the object\nendlessly.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "starmap",
            "documentation": "Return an iterator whose values are returned from the function evaluated with an argument tuple taken from the given sequence.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "takewhile",
            "documentation": "Return successive entries from an iterable as long as the predicate evaluates to true for each entry.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "tee",
            "documentation": "Returns a tuple of n independent iterators.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "zip_longest",
            "documentation": "zip_longest(iter1 [,iter2 [...]], [fillvalue=None]) --> zip_longest object\n\nReturn a zip_longest object whose .__next__() method returns a tuple where\nthe i-th element comes from the i-th iterable argument.  The .__next__()\nmethod continues until the longest iterable in the argument sequence\nis exhausted and then it raises StopIteration.  When the shorter iterables\nare exhausted, the fillvalue is substituted in their place.  The fillvalue\ndefaults to None or can be specified by a keyword argument.",
            "type": "",
            "version": 0
        }
    ],
    "keyword": [
        {
            "acResult": "__all__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__doc__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__loader__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__name__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__package__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__spec__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "iskeyword",
            "documentation": "x.__contains__(y) <==> y in x.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "issoftkeyword",
            "documentation": "x.__contains__(y) <==> y in x.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "kwlist",
            "documentation": "Built-in mutable sequence.\n\nIf no argument is given, the constructor creates a new empty list.\nThe argument must be an iterable if specified.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "softkwlist",
            "documentation": "Built-in mutable sequence.\n\nIf no argument is given, the constructor creates a new empty list.\nThe argument must be an iterable if specified.",
            "type": "",
            "version": 0
        }
    ],
    "math": [
        {
            "acResult": "__doc__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__loader__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__name__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__package__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__spec__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "acos",
            "documentation": "Return the arc cosine (measured in radians) of x.\n\nThe result is between 0 and pi.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "acosh",
            "documentation": "Return the inverse hyperbolic cosine of x.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "asin",
            "documentation": "Return the arc sine (measured in radians) of x.\n\nThe result is between -pi/2 and pi/2.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "asinh",
            "documentation": "Return the inverse hyperbolic sine of x.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "atan",
            "documentation": "Return the arc tangent (measured in radians) of x.\n\nThe result is between -pi/2 and pi/2.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "atan2",
            "documentation": "Return the arc tangent (measured in radians) of y/x.\n\nUnlike atan(y/x), the signs of both x and y are considered.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "atanh",
            "documentation": "Return the inverse hyperbolic tangent of x.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "ceil",
            "documentation": "Return the ceiling of x as an Integral.\n\nThis is the smallest integer >= x.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "comb",
            "documentation": "Number of ways to choose k items from n items without repetition and without order.\n\nEvaluates to n! / (k! * (n - k)!) when k <= n and evaluates\nto zero when k > n.\n\nAlso called the binomial coefficient because it is equivalent\nto the coefficient of k-th term in polynomial expansion of the\nexpression (1 + x)**n.\n\nRaises TypeError if either of the arguments are not integers.\nRaises ValueError if either of the arguments are negative.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "copysign",
            "documentation": "Return a float with the magnitude (absolute value) of x but the sign of y.\n\nOn platforms that support signed zeros, copysign(1.0, -0.0)\nreturns -1.0.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "cos",
            "documentation": "Return the cosine of x (measured in radians).",
            "type": "",
            "version": 0
        },
        {
            "acResult": "cosh",
            "documentation": "Return the hyperbolic cosine of x.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "degrees",
            "documentation": "Convert angle x from radians to degrees.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "e",
            "documentation": "Convert a string or number to a floating point number, if possible.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "erf",
            "documentation": "Error function at x.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "erfc",
            "documentation": "Complementary error function at x.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "exp",
            "documentation": "Return e raised to the power of x.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "expm1",
            "documentation": "Return exp(x)-1.\n\nThis function avoids the loss of precision involved in the direct evaluation of exp(x)-1 for small x.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "fabs",
            "documentation": "Return the absolute value of the float x.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "factorial",
            "documentation": "Find x!.\n\nRaise a ValueError if x is negative or non-integral.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "floor",
            "documentation": "Return the floor of x as an Integral.\n\nThis is the largest integer <= x.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "fmod",
            "documentation": "Return fmod(x, y), according to platform C.\n\nx % y may differ.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "frexp",
            "documentation": "Return the mantissa and exponent of x, as pair (m, e).\n\nm is a float and e is an int, such that x = m * 2.**e.\nIf x is 0, m and e are both 0.  Else 0.5 <= abs(m) < 1.0.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "fsum",
            "documentation": "Return an accurate floating point sum of values in the iterable seq.\n\nAssumes IEEE-754 floating point arithmetic.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "gamma",
            "documentation": "Gamma function at x.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "gcd",
            "documentation": "Greatest Common Divisor.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "hypot",
            "documentation": "Multidimensional Euclidean distance from the origin to a point.\n\nRoughly equivalent to:\n    sqrt(sum(x**2 for x in coordinates))\n\nFor a two dimensional point (x, y), gives the hypotenuse\nusing the Pythagorean theorem:  sqrt(x*x + y*y).\n\nFor example, the hypotenuse of a 3/4/5 right triangle is:\n\n    >>> hypot(3.0, 4.0)\n    5.0",
            "type": "",
            "version": 0
        },
        {
            "acResult": "inf",
            "documentation": "Convert a string or number to a floating point number, if possible.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "isclose",
            "documentation": "Determine whether two floating point numbers are close in value.\n\n  rel_tol\n    maximum difference for being considered \"close\", relative to the\n    magnitude of the input values\n  abs_tol\n    maximum difference for being considered \"close\", regardless of the\n    magnitude of the input values\n\nReturn True if a is close in value to b, and False otherwise.\n\nFor the values to be considered close, the difference between them\nmust be smaller than at least one of the tolerances.\n\n-inf, inf and NaN behave similarly to the IEEE 754 Standard.  That\nis, NaN is not close to anything, even itself.  inf and -inf are\nonly close to themselves.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "isfinite",
            "documentation": "Return True if x is neither an infinity nor a NaN, and False otherwise.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "isinf",
            "documentation": "Return True if x is a positive or negative infinity, and False otherwise.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "isnan",
            "documentation": "Return True if x is a NaN (not a number), and False otherwise.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "isqrt",
            "documentation": "Return the integer part of the square root of the input.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "lcm",
            "documentation": "Least Common Multiple.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "ldexp",
            "documentation": "Return x * (2**i).\n\nThis is essentially the inverse of frexp().",
            "type": "",
            "version": 0
        },
        {
            "acResult": "lgamma",
            "documentation": "Natural logarithm of absolute value of Gamma function at x.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "log",
            "documentation": "If the base not specified, returns the natural logarithm (base e) of x.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "log10",
            "documentation": "Return the base 10 logarithm of x.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "log1p",
            "documentation": "Return the natural logarithm of 1+x (base e).\n\nThe result is computed in a way which is accurate for x near zero.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "log2",
            "documentation": "Return the base 2 logarithm of x.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "modf",
            "documentation": "Return the fractional and integer parts of x.\n\nBoth results carry the sign of x and are floats.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "nan",
            "documentation": "Convert a string or number to a floating point number, if possible.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "perm",
            "documentation": "Number of ways to choose k items from n items without repetition and with order.\n\nEvaluates to n! / (n - k)! when k <= n and evaluates\nto zero when k > n.\n\nIf k is not specified or is None, then k defaults to n\nand the function returns n!.\n\nRaises TypeError if either of the arguments are not integers.\nRaises ValueError if either of the arguments are negative.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "pi",
            "documentation": "Convert a string or number to a floating point number, if possible.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "pow",
            "documentation": "Return x**y (x to the power of y).",
            "type": "",
            "version": 0
        },
        {
            "acResult": "prod",
            "documentation": "Calculate the product of all the elements in the input iterable.\n\nThe default start value for the product is 1.\n\nWhen the iterable is empty, return the start value.  This function is\nintended specifically for use with numeric values and may reject\nnon-numeric types.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "radians",
            "documentation": "Convert angle x from degrees to radians.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "remainder",
            "documentation": "Difference between x and the closest integer multiple of y.\n\nReturn x - n*y where n*y is the closest integer multiple of y.\nIn the case where x is exactly halfway between two multiples of\ny, the nearest even value of n is used. The result is always exact.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "sin",
            "documentation": "Return the sine of x (measured in radians).",
            "type": "",
            "version": 0
        },
        {
            "acResult": "sinh",
            "documentation": "Return the hyperbolic sine of x.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "sqrt",
            "documentation": "Return the square root of x.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "tan",
            "documentation": "Return the tangent of x (measured in radians).",
            "type": "",
            "version": 0
        },
        {
            "acResult": "tanh",
            "documentation": "Return the hyperbolic tangent of x.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "tau",
            "documentation": "Convert a string or number to a floating point number, if possible.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "trunc",
            "documentation": "Truncates the Real x to the nearest Integral toward 0.\n\nUses the __trunc__ magic method.",
            "type": "",
            "version": 0
        }
    ],
    "numbers": [
        {
            "acResult": "Complex",
            "documentation": "Complex defines the operations that work on the builtin complex type.\n\nIn short, those are: a conversion to complex, .real, .imag, +, -,\n*, /, **, abs(), .conjugate, ==, and !=.\n\nIf it is given heterogeneous arguments, and doesn't have special\nknowledge about them, it should fall back to the builtin complex\ntype as described below.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "Integral",
            "documentation": "Integral adds methods that work on integral numbers.\n\nIn short, these are conversion to int, pow with modulus, and the\nbit-string operations.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "Number",
            "documentation": "All numbers inherit from this class.\n\nIf you just want to check if an argument x is a number, without\ncaring what kind, use isinstance(x, Number).",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__doc__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__file__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__loader__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__name__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__package__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__spec__",
            "documentation": "",
            "type": "",
            "version": 0
        }
    ],
    "operator": [
        {
            "acResult": "__abs__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__add__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__all__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__and__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__concat__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__contains__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__delitem__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__div__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__doc__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__eq__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__floordiv__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__ge__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__getitem__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__gt__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__iadd__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__iand__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__iconcat__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__ifloordiv__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__ilshift__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__imatmul__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__imod__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__imul__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__index__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__inv__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__invert__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__ior__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__ipow__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__irshift__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__isub__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__itruediv__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__ixor__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__le__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__loader__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__lshift__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__lt__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__matmul__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__mod__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__mul__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__name__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__ne__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__neg__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__not__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__or__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__package__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__pos__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__pow__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__rshift__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__setitem__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__spec__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__sub__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__truediv__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__xor__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "abs",
            "documentation": "Same as abs(a).",
            "type": "",
            "version": 0
        },
        {
            "acResult": "add",
            "documentation": "Same as a + b.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "and_",
            "documentation": "Same as a & b.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "attrgetter",
            "documentation": "Return a callable object that fetches the given attribute(s) from its operand.\nAfter f = attrgetter('name'), the call f(r) returns r.name.\nAfter g = attrgetter('name', 'date'), the call g(r) returns (r.name, r.date).\nAfter h = attrgetter('name.first', 'name.last'), the call h(r) returns\n(r.name.first, r.name.last).",
            "type": "",
            "version": 0
        },
        {
            "acResult": "concat",
            "documentation": "Same as a + b, for a and b sequences.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "contains",
            "documentation": "Same as b in a (note reversed operands).",
            "type": "",
            "version": 0
        },
        {
            "acResult": "countOf",
            "documentation": "Return the number of items in a which are, or which equal, b.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "delitem",
            "documentation": "Same as del a[b].",
            "type": "",
            "version": 0
        },
        {
            "acResult": "div",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "eq",
            "documentation": "Same as a == b.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "floordiv",
            "documentation": "Same as a // b.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "ge",
            "documentation": "Same as a >= b.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "getitem",
            "documentation": "Same as a[b].",
            "type": "",
            "version": 0
        },
        {
            "acResult": "gt",
            "documentation": "Same as a > b.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "iadd",
            "documentation": "Same as a += b.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "iand",
            "documentation": "Same as a &= b.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "iconcat",
            "documentation": "Same as a += b, for a and b sequences.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "ifloordiv",
            "documentation": "Same as a //= b.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "ilshift",
            "documentation": "Same as a <<= b.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "imatmul",
            "documentation": "Same as a @= b.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "imod",
            "documentation": "Same as a %= b.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "imul",
            "documentation": "Same as a *= b.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "index",
            "documentation": "Same as a.__index__()",
            "type": "",
            "version": 0
        },
        {
            "acResult": "indexOf",
            "documentation": "Return the first index of b in a.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "inv",
            "documentation": "Same as ~a.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "invert",
            "documentation": "Same as ~a.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "ior",
            "documentation": "Same as a |= b.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "ipow",
            "documentation": "Same as a **= b.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "irshift",
            "documentation": "Same as a >>= b.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "is_",
            "documentation": "Same as a is b.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "is_not",
            "documentation": "Same as a is not b.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "isub",
            "documentation": "Same as a -= b.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "itemgetter",
            "documentation": "Return a callable object that fetches the given item(s) from its operand.\nAfter f = itemgetter(2), the call f(r) returns r[2].\nAfter g = itemgetter(2, 5, 3), the call g(r) returns (r[2], r[5], r[3])",
            "type": "",
            "version": 0
        },
        {
            "acResult": "itruediv",
            "documentation": "Same as a /= b.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "ixor",
            "documentation": "Same as a ^= b.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "le",
            "documentation": "Same as a <= b.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "length_hint",
            "documentation": "Return an estimate of the number of items in obj.\n\nThis is useful for presizing containers when building from an iterable.\n\nIf the object supports len(), the result will be exact.\nOtherwise, it may over- or under-estimate by an arbitrary amount.\nThe result will be an integer >= 0.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "lshift",
            "documentation": "Same as a << b.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "lt",
            "documentation": "Same as a < b.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "matmul",
            "documentation": "Same as a @ b.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "methodcaller",
            "documentation": "Return a callable object that calls the given method on its operand.\nAfter f = methodcaller('name'), the call f(r) returns r.name().\nAfter g = methodcaller('name', 'date', foo=1), the call g(r) returns\nr.name('date', foo=1).",
            "type": "",
            "version": 0
        },
        {
            "acResult": "mod",
            "documentation": "Same as a % b.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "mul",
            "documentation": "Same as a * b.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "ne",
            "documentation": "Same as a != b.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "neg",
            "documentation": "Same as -a.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "not_",
            "documentation": "Same as not a.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "or_",
            "documentation": "Same as a | b.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "pos",
            "documentation": "Same as +a.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "pow",
            "documentation": "Same as a ** b.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "rshift",
            "documentation": "Same as a >> b.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "setitem",
            "documentation": "Same as a[b] = c.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "sub",
            "documentation": "Same as a - b.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "truediv",
            "documentation": "Same as a / b.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "truth",
            "documentation": "Return True if a is true, False otherwise.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "xor",
            "documentation": "Same as a ^ b.",
            "type": "",
            "version": 0
        }
    ],
    "platform": [
        {
            "acResult": "__doc__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__loader__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__name__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__package__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__spec__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "architecture",
            "documentation": "Queries the given executable (defaults to the Python interpreter\nbinary) for various architecture information.\n\nReturns a tuple (bits, linkage) which contains information about\nthe bit architecture and the linkage format used for the\nexecutable. Both values are returned as strings.\n\nValues that cannot be determined are returned as given by the\nparameter presets. If bits is given as '', the sizeof(pointer)\n(or sizeof(long) on Python version < 1.5.2) is used as\nindicator for the supported pointer size.\n\nThe function relies on the system's \"file\" command to do the\nactual work. This is available on most if not all Unix\nplatforms. On some non-Unix platforms where the \"file\" command\ndoes not exist and the executable is set to the Python interpreter\nbinary defaults from _default_architecture are used.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "machine",
            "documentation": "Returns the machine type, e.g. 'i386'\n\nAn empty string is returned if the value cannot be determined.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "node",
            "documentation": "Returns the computer's network name (which may not be fully\nqualified)\n\nAn empty string is returned if the value cannot be determined.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "processor",
            "documentation": "Returns the (true) processor name, e.g. 'amdk6'\n\nAn empty string is returned if the value cannot be\ndetermined. Note that many platforms do not provide this\ninformation or simply return the same value as for machine(),\ne.g.  NetBSD does this.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "python_implementation",
            "documentation": "Returns a string identifying the Python implementation.\n\nCurrently, the following implementations are identified:\n  'CPython' (C implementation of Python),\n  'IronPython' (.NET implementation of Python),\n  'Jython' (Java implementation of Python),\n  'PyPy' (Python implementation of Python).",
            "type": "",
            "version": 0
        },
        {
            "acResult": "python_version",
            "documentation": "Returns the Python version as string 'major.minor.patchlevel'\n\nNote that unlike the Python sys.version, the returned value\nwill always include the patchlevel (it defaults to 0).",
            "type": "",
            "version": 0
        },
        {
            "acResult": "release",
            "documentation": "Returns the system's release, e.g. '2.2.0' or 'NT'\n\nAn empty string is returned if the value cannot be determined.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "system",
            "documentation": "Returns the system/OS name, e.g. 'Linux', 'Windows' or 'Java'.\n\nAn empty string is returned if the value cannot be determined.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "version",
            "documentation": "Returns the system's release version, e.g. '#3 on degas'\n\nAn empty string is returned if the value cannot be determined.",
            "type": "",
            "version": 0
        }
    ],
    "processing": [
        {
            "acResult": "A",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "AB",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "ADD",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "AG",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "ALPHA",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "ALPHA_MASK",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "ALT",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "AMBIENT",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "AR",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "ARC",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "ARGB",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "ARROW",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "B",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "BACKSPACE",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "BASELINE",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "BEEN_LIT",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "BEVEL",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "BEZIER_VERTEX",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "BLEND",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "BLUE_MASK",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "BLUR",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "BOTTOM",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "BOX",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "BREAK",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "BURN",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "CAPSLK",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "CENTER",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "CLOSE",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "CLOSESHAPE",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "CMYK",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "CODED",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "CONTROL",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "CORNER",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "CORNERS",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "CROSS",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "CURVE_VERTEX",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "CUSTOM",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "DA",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "DARKEST",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "DB",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "DEG_TO_RAD",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "DELETE",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "DG",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "DIAMETER",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "DIFFERENCE",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "DILATE",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "DIRECTIONAL",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "DISABLE_ACCURATE_TEXTURES",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "DISABLE_DEPTH_SORT",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "DISABLE_DEPTH_TEST",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "DISABLE_OPENGL_2X_SMOOTH",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "DISABLE_OPENGL_ERROR_REPORT",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "DODGE",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "DOWN",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "DR",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "DXF",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "EB",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "EDGE",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "EG",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "ELLIPSE",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "ENABLE_ACCURATE_TEXTURES",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "ENABLE_DEPTH_SORT",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "ENABLE_DEPTH_TEST",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "ENABLE_NATIVE_FONTS",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "ENABLE_OPENGL_2X_SMOOTH",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "ENABLE_OPENGL_4X_SMOOTH",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "ENABLE_OPENGL_ERROR_REPORT",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "END",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "ENTER",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "EPSILON",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "ER",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "ERODE",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "ESC",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "EXCLUSION",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "Environment",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "F1",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "F10",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "F11",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "F12",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "F2",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "F3",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "F4",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "F5",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "F6",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "F7",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "F8",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "F9",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "G",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "GEOMETRY",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "GIF",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "GRAY",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "GREEN_MASK",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "GROUP",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "HALF_PI",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "HAND",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "HARD_LIGHT",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "HINT_COUNT",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "HOME",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "HSB",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "IMAGE",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "INSERT",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "INVERT",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "JAVA2D",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "JPEG",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "Keyboard",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "LEFT",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "LIGHTEST",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "LINE",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "LINES",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "LINUX",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "MAXOSX",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "MAX_FLOAT",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "MAX_INT",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "MAX_LIGHTS",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "META",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "MIN_FLOAT",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "MIN_INT",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "MITER",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "MODEL",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "MOVE",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "MULTIPLY",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "Mouse",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "NOCURSOR",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "NORMAL",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "NORMALIZED",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "NORMAL_MODE_AUTO",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "NORMAL_MODE_SHAPE",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "NORMAL_MODE_VERTEX",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "NUMLK",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "NX",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "NY",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "NZ",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "OPAQUE",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "OPEN",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "OPENGL",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "ORTHOGRAPHIC",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "OTHER",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "OVERLAY",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "P2D",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "P3D",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "PATH",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "PDF",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "PERSPECTIVE",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "PFont",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "PGDN",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "PGUP",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "PGraphics",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "PI",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "PImage",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "POINT",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "POINTS",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "POLYGON",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "POSTERIZE",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "PRECISIONB",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "PRECISIONF",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "PREC_ALPHA_SHIFT",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "PREC_MAXVAL",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "PREC_RED_SHIFT",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "PRIMITIVE",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "PROJECT",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "PShapeSVG",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "PVector",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "QUAD",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "QUADS",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "QUAD_STRIP",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "QUARTER_PI",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "R",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "RADIUS",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "RAD_TO_DEG",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "RECT",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "RED_MASK",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "REPLACE",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "RETURN",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "RGB",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "RIGHT",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "ROUND",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "SA",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "SB",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "SCREEN",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "SG",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "SHAPE",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "SHIFT",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "SHINE",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "SINCOS_LENGTH",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "SOFT_LIGHT",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "SPB",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "SPG",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "SPHERE",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "SPOT",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "SPR",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "SQUARE",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "SR",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "SUBTRACT",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "SW",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "Screen",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "TAB",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "TARGA",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "TAU",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "TEXT",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "THIRD_PI",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "THRESHOLD",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "TIFF",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "TOP",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "TRIANGLE",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "TRIANGLES",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "TRIANGLE_FAN",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "TRIANGLE_STRIP",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "TWO_PI",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "TX",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "TY",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "TZ",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "U",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "UP",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "V",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "VERTEX",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "VERTEX_FIELD_COUNT",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "VW",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "VX",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "VY",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "VZ",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "WAIT",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "WEBGL",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "WHITESPACE",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "WINDOWS",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "X",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "Y",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "Z",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__doc__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__loader__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__name__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__package__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__spec__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "alpha",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "ambient",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "ambientLight",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "applyMatrix",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "arc",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "background",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "beginCamera",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "beginShape",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "bezier",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "bezierDetail",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "bezierPoint",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "bezierTangent",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "bezierVertex",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "blend",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "blendColor",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "blue",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "box",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "brightness",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "camera",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "circle",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "color",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "colorMode",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "constrain",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "copy",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "createFont",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "createGraphics",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "createImage",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "cursor",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "curve",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "curveDetail",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "curvePoint",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "curveTangent",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "curveTightness",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "curveVertex",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "day",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "degrees",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "directionalLight",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "dist",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "ellipse",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "ellipseMode",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "emissive",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "endCamera",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "endShape",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "environment",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "exitp",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "fill",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "filter",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "frameRate",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "frustum",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "get",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "green",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "height",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "hint",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "hour",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "hue",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "image",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "imageMode",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "keyboard",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "lerp",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "lerpColor",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "lightFalloff",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "lightSpecular",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "lights",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "line",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "loadBytes",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "loadFont",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "loadImage",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "loadPixels",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "loadShape",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "loadStrings",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "loop",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "mag",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "map",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "millis",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "minute",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "modelX",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "modelY",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "modelZ",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "month",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "mouse",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "mouseX",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "mouseY",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "noCursor",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "noFill",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "noLights",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "noLoop",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "noSmooth",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "noStroke",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "noTint",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "noise",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "noiseDetail",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "noiseSeed",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "norm",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "normal",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "ortho",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "p",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "perspective",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "pmouseX",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "pmouseY",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "point",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "pointLight",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "popMatrix",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "printCamera",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "printMatrix",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "printProjection",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "println",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "processing",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "pushMatrix",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "quad",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "radians",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "random",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "randomSeed",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "rect",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "rectMode",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "red",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "renderMode",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "requestImage",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "resetMatrix",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "rotate",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "rotateX",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "rotateY",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "rotateZ",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "run",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "saturation",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "save",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "saveFrame",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "saveStrings",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "scale",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "screen",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "screenX",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "screenY",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "screenZ",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "second",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "set",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "shape",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "shapeMode",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "shininess",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "size",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "smooth",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "specular",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "sphere",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "sphereDetail",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "spotLight",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "sq",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "status",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "stroke",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "strokeCap",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "strokeJoin",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "strokeWeight",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "text",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "textAlign",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "textAscent",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "textDescent",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "textFont",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "textLeading",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "textMode",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "textSize",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "textWidth",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "texture",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "textureMode",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "tint",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "translate",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "triangle",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "updatePixels",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "vertex",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "width",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "year",
            "documentation": "",
            "type": "",
            "version": 0
        }
    ],
    "random": [
        {
            "acResult": "__doc__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__loader__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__name__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__package__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__spec__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "choice",
            "documentation": "Choose a random element from a non-empty sequence.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "expovariate",
            "documentation": "Exponential distribution.\n\nlambd is 1.0 divided by the desired mean.  It should be\nnonzero.  (The parameter would be called \"lambda\", but that is\na reserved word in Python.)  Returned values range from 0 to\npositive infinity if lambd is positive, and from negative\ninfinity to 0 if lambd is negative.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "gauss",
            "documentation": "Gaussian distribution.\n\nmu is the mean, and sigma is the standard deviation.  This is\nslightly faster than the normalvariate() function.\n\nNot thread-safe without a lock around calls.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "lognormvariate",
            "documentation": "Log normal distribution.\n\nIf you take the natural logarithm of this distribution, you'll get a\nnormal distribution with mean mu and standard deviation sigma.\nmu can have any value, and sigma must be greater than zero.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "normalvariate",
            "documentation": "Normal distribution.\n\nmu is the mean, and sigma is the standard deviation.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "randint",
            "documentation": "Return random integer in range [a, b], including both end points.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "random",
            "documentation": "random() -> x in the interval [0, 1).",
            "type": "",
            "version": 0
        },
        {
            "acResult": "randrange",
            "documentation": "Choose a random item from range(start, stop[, step]).\n\nThis fixes the problem with randint() which includes the\nendpoint; in Python this is usually not what you want.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "sample",
            "documentation": "Chooses k unique random elements from a population sequence or set.\n\nReturns a new list containing elements from the population while\nleaving the original population unchanged.  The resulting list is\nin selection order so that all sub-slices will also be valid random\nsamples.  This allows raffle winners (the sample) to be partitioned\ninto grand prize and second place winners (the subslices).\n\nMembers of the population need not be hashable or unique.  If the\npopulation contains repeats, then each occurrence is a possible\nselection in the sample.\n\nRepeated elements can be specified one at a time or with the optional\ncounts parameter.  For example:\n\n    sample(['red', 'blue'], counts=[4, 2], k=5)\n\nis equivalent to:\n\n    sample(['red', 'red', 'red', 'red', 'blue', 'blue'], k=5)\n\nTo choose a sample from a range of integers, use range() for the\npopulation argument.  This is especially fast and space efficient\nfor sampling from a large population:\n\n    sample(range(10000000), 60)",
            "type": "",
            "version": 0
        },
        {
            "acResult": "seed",
            "documentation": "Initialize internal state from a seed.\n\nThe only supported seed types are None, int, float,\nstr, bytes, and bytearray.\n\nNone or no argument seeds from current time or from an operating\nsystem specific randomness source if available.\n\nIf *a* is an int, all bits are used.\n\nFor version 2 (the default), all of the bits are used if *a* is a str,\nbytes, or bytearray.  For version 1 (provided for reproducing random\nsequences from older versions of Python), the algorithm for str and\nbytes generates a narrower range of seeds.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "shuffle",
            "documentation": "Shuffle list x in place, and return None.\n\nOptional argument random is a 0-argument function returning a\nrandom float in [0.0, 1.0); if it is the default None, the\nstandard random.random will be used.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "triangular",
            "documentation": "Triangular distribution.\n\nContinuous distribution bounded by given lower and upper limits,\nand having a given mode value in-between.\n\nhttp://en.wikipedia.org/wiki/Triangular_distribution",
            "type": "",
            "version": 0
        },
        {
            "acResult": "uniform",
            "documentation": "Get a random number in the range [a, b) or [a, b] depending on rounding.",
            "type": "",
            "version": 0
        }
    ],
    "re": [
        {
            "acResult": "A",
            "documentation": "An enumeration.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "ASCII",
            "documentation": "An enumeration.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "DEBUG",
            "documentation": "An enumeration.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "DOTALL",
            "documentation": "An enumeration.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "I",
            "documentation": "An enumeration.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "IGNORECASE",
            "documentation": "An enumeration.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "L",
            "documentation": "An enumeration.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "LOCALE",
            "documentation": "An enumeration.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "M",
            "documentation": "An enumeration.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "MULTILINE",
            "documentation": "An enumeration.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "Match",
            "documentation": "The result of re.match() and re.search().\nMatch objects always have a boolean value of True.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "Pattern",
            "documentation": "Compiled regular expression object.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "RegexFlag",
            "documentation": "An enumeration.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "S",
            "documentation": "An enumeration.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "T",
            "documentation": "An enumeration.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "TEMPLATE",
            "documentation": "An enumeration.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "U",
            "documentation": "An enumeration.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "UNICODE",
            "documentation": "An enumeration.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "VERBOSE",
            "documentation": "An enumeration.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "X",
            "documentation": "An enumeration.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__all__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__doc__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__loader__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__name__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__package__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__spec__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "compile",
            "documentation": "Compile a regular expression pattern, returning a Pattern object.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "error",
            "documentation": "Exception raised for invalid regular expressions.\n\nAttributes:\n\n    msg: The unformatted error message\n    pattern: The regular expression pattern\n    pos: The index in the pattern where compilation failed (may be None)\n    lineno: The line corresponding to pos (may be None)\n    colno: The column corresponding to pos (may be None)",
            "type": "",
            "version": 0
        },
        {
            "acResult": "escape",
            "documentation": "Escape special characters in a string.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "findall",
            "documentation": "Return a list of all non-overlapping matches in the string.\n\nIf one or more capturing groups are present in the pattern, return\na list of groups; this will be a list of tuples if the pattern\nhas more than one group.\n\nEmpty matches are included in the result.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "finditer",
            "documentation": "Return an iterator over all non-overlapping matches in the\nstring.  For each match, the iterator returns a Match object.\n\nEmpty matches are included in the result.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "fullmatch",
            "documentation": "Try to apply the pattern to all of the string, returning\na Match object, or None if no match was found.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "match",
            "documentation": "Try to apply the pattern at the start of the string, returning\na Match object, or None if no match was found.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "purge",
            "documentation": "Clear the regular expression caches",
            "type": "",
            "version": 0
        },
        {
            "acResult": "search",
            "documentation": "Scan through string looking for a match to the pattern, returning\na Match object, or None if no match was found.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "split",
            "documentation": "Split the source string by the occurrences of the pattern,\nreturning a list containing the resulting substrings.  If\ncapturing parentheses are used in pattern, then the text of all\ngroups in the pattern are also returned as part of the resulting\nlist.  If maxsplit is nonzero, at most maxsplit splits occur,\nand the remainder of the string is returned as the final element\nof the list.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "sub",
            "documentation": "Return the string obtained by replacing the leftmost\nnon-overlapping occurrences of the pattern in string by the\nreplacement repl.  repl can be either a string or a callable;\nif a string, backslash escapes in it are processed.  If it is\na callable, it's passed the Match object and must return\na replacement string to be used.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "subn",
            "documentation": "Return a 2-tuple containing (new_string, number).\nnew_string is the string obtained by replacing the leftmost\nnon-overlapping occurrences of the pattern in the source\nstring by the replacement repl.  number is the number of\nsubstitutions that were made. repl can be either a string or a\ncallable; if a string, backslash escapes in it are processed.\nIf it is a callable, it's passed the Match object and must\nreturn a replacement string to be used.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "template",
            "documentation": "Compile a template pattern, returning a Pattern object",
            "type": "",
            "version": 0
        }
    ],
    "signal": [
        {
            "acResult": "CTRL_BREAK_EVENT",
            "documentation": "An enumeration.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "CTRL_C_EVENT",
            "documentation": "An enumeration.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "NSIG",
            "documentation": "Convert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": "",
            "version": 0
        },
        {
            "acResult": "SIGABRT",
            "documentation": "An enumeration.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "SIGBREAK",
            "documentation": "An enumeration.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "SIGFPE",
            "documentation": "An enumeration.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "SIGHUP",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "SIGILL",
            "documentation": "An enumeration.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "SIGKILL",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "SIGNINT",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "SIGSEGV",
            "documentation": "An enumeration.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "SIGTERM",
            "documentation": "An enumeration.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "SIG_DFL",
            "documentation": "An enumeration.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "SIG_IGN",
            "documentation": "An enumeration.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__doc__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__loader__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__name__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__package__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__spec__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "pause",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "signal",
            "documentation": "Set the action for the given signal.\n\nThe action can be SIG_DFL, SIG_IGN, or a callable Python object.\nThe previous action is returned.  See getsignal() for possible return values.\n\n*** IMPORTANT NOTICE ***\nA signal handler function is called with two arguments:\nthe first is the signal number, the second is the interrupted stack frame.",
            "type": "",
            "version": 0
        }
    ],
    "string": [
        {
            "acResult": "__doc__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__loader__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__name__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__package__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__spec__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "ascii_letters",
            "documentation": "Create a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "ascii_lowercase",
            "documentation": "Create a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "ascii_uppercase",
            "documentation": "Create a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "capitalize",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "capwords",
            "documentation": "Split the argument into words using split, capitalize each\nword using capitalize, and join the capitalized words using\njoin.  If the optional second argument sep is absent or None,\nruns of whitespace characters are replaced by a single space\nand leading and trailing whitespace are removed, otherwise\nsep is used to split and join the words.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "digits",
            "documentation": "Create a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "hexdigits",
            "documentation": "Create a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "join",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "letters",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "lowercase",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "octdigits",
            "documentation": "Create a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "printable",
            "documentation": "Create a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "punctuation",
            "documentation": "Create a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "split",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "uppercase",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "whitespace",
            "documentation": "Create a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.",
            "type": "",
            "version": 0
        }
    ],
    "textwrap": [
        {
            "acResult": "TextWrapper",
            "documentation": "Object for wrapping/filling text.  The public interface consists of\nthe wrap() and fill() methods; the other methods are just there for\nsubclasses to override in order to tweak the default behaviour.\nIf you want to completely replace the main wrapping algorithm,\nyou'll probably have to override _wrap_chunks().\n\nSeveral instance attributes control various aspects of wrapping:\n  width (default: 70)\n    the maximum width of wrapped lines (unless break_long_words\n    is false)\n  initial_indent (default: \"\")\n    string that will be prepended to the first line of wrapped\n    output.  Counts towards the line's width.\n  subsequent_indent (default: \"\")\n    string that will be prepended to all lines save the first\n    of wrapped output; also counts towards each line's width.\n  expand_tabs (default: true)\n    Expand tabs in input text to spaces before further processing.\n    Each tab will become 0 .. 'tabsize' spaces, depending on its position\n    in its line.  If false, each tab is treated as a single character.\n  tabsize (default: 8)\n    Expand tabs in input text to 0 .. 'tabsize' spaces, unless\n    'expand_tabs' is false.\n  replace_whitespace (default: true)\n    Replace all whitespace characters in the input text by spaces\n    after tab expansion.  Note that if expand_tabs is false and\n    replace_whitespace is true, every tab will be converted to a\n    single space!\n  fix_sentence_endings (default: false)\n    Ensure that sentence-ending punctuation is always followed\n    by two spaces.  Off by default because the algorithm is\n    (unavoidably) imperfect.\n  break_long_words (default: true)\n    Break words longer than 'width'.  If false, those words will not\n    be broken, and some lines might be longer than 'width'.\n  break_on_hyphens (default: true)\n    Allow breaking hyphenated words. If true, wrapping will occur\n    preferably on whitespaces and right after hyphens part of\n    compound words.\n  drop_whitespace (default: true)\n    Drop leading and trailing whitespace from lines.\n  max_lines (default: None)\n    Truncate wrapped lines.\n  placeholder (default: ' [...]')\n    Append to the last line of truncated text.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__all__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__doc__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__file__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__loader__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__name__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__package__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__spec__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "_whitespace",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "dedent",
            "documentation": "Remove any common leading whitespace from every line in `text`.\n\nThis can be used to make triple-quoted strings line up with the left\nedge of the display, while still presenting them in the source code\nin indented form.\n\nNote that tabs and spaces are both treated as whitespace, but they\nare not equal: the lines \"  hello\" and \"\\thello\" are\nconsidered to have no common leading whitespace.\n\nEntirely blank lines are normalized to a newline character.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "fill",
            "documentation": "Fill a single paragraph of text, returning a new string.\n\nReformat the single paragraph in 'text' to fit in lines of no more\nthan 'width' columns, and return a new string containing the entire\nwrapped paragraph.  As with wrap(), tabs are expanded and other\nwhitespace characters converted to space.  See TextWrapper class for\navailable keyword args to customize wrapping behaviour.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "indent",
            "documentation": "Adds 'prefix' to the beginning of selected lines in 'text'.\n\nIf 'predicate' is provided, 'prefix' will only be added to the lines\nwhere 'predicate(line)' is True. If 'predicate' is not provided,\nit will default to adding 'prefix' to all non-empty lines that do not\nconsist solely of whitespace characters.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "re",
            "documentation": "Support for regular expressions (RE).\n\nThis module provides regular expression matching operations similar to\nthose found in Perl.  It supports both 8-bit and Unicode strings; both\nthe pattern and the strings being processed can contain null bytes and\ncharacters outside the US ASCII range.\n\nRegular expressions can contain both special and ordinary characters.\nMost ordinary characters, like \"A\", \"a\", or \"0\", are the simplest\nregular expressions; they simply match themselves.  You can\nconcatenate ordinary characters, so last matches the string 'last'.\n\nThe special characters are:\n    \".\"      Matches any character except a newline.\n    \"^\"      Matches the start of the string.\n    \"$\"      Matches the end of the string or just before the newline at\n             the end of the string.\n    \"*\"      Matches 0 or more (greedy) repetitions of the preceding RE.\n             Greedy means that it will match as many repetitions as possible.\n    \"+\"      Matches 1 or more (greedy) repetitions of the preceding RE.\n    \"?\"      Matches 0 or 1 (greedy) of the preceding RE.\n    *?,+?,?? Non-greedy versions of the previous three special characters.\n    {m,n}    Matches from m to n repetitions of the preceding RE.\n    {m,n}?   Non-greedy version of the above.\n    \"\\\\\"     Either escapes special characters or signals a special sequence.\n    []       Indicates a set of characters.\n             A \"^\" as the first character indicates a complementing set.\n    \"|\"      A|B, creates an RE that will match either A or B.\n    (...)    Matches the RE inside the parentheses.\n             The contents can be retrieved or matched later in the string.\n    (?aiLmsux) The letters set the corresponding flags defined below.\n    (?:...)  Non-grouping version of regular parentheses.\n    (?P<name>...) The substring matched by the group is accessible by name.\n    (?P=name)     Matches the text matched earlier by the group named name.\n    (?#...)  A comment; ignored.\n    (?=...)  Matches if ... matches next, but doesn't consume the string.\n    (?!...)  Matches if ... doesn't match next.\n    (?<=...) Matches if preceded by ... (must be fixed length).\n    (?<!...) Matches if not preceded by ... (must be fixed length).\n    (?(id/name)yes|no) Matches yes pattern if the group with id/name matched,\n                       the (optional) no pattern otherwise.\n\nThe special sequences consist of \"\\\\\" and a character from the list\nbelow.  If the ordinary character is not on the list, then the\nresulting RE will match the second character.\n    \\number  Matches the contents of the group of the same number.\n    \\A       Matches only at the start of the string.\n    \\Z       Matches only at the end of the string.\n    \\b       Matches the empty string, but only at the start or end of a word.\n    \\B       Matches the empty string, but not at the start or end of a word.\n    \\d       Matches any decimal digit; equivalent to the set [0-9] in\n             bytes patterns or string patterns with the ASCII flag.\n             In string patterns without the ASCII flag, it will match the whole\n             range of Unicode digits.\n    \\D       Matches any non-digit character; equivalent to [^\\d].\n    \\s       Matches any whitespace character; equivalent to [ \\t\\n\\r\\f\\v] in\n             bytes patterns or string patterns with the ASCII flag.\n             In string patterns without the ASCII flag, it will match the whole\n             range of Unicode whitespace characters.\n    \\S       Matches any non-whitespace character; equivalent to [^\\s].\n    \\w       Matches any alphanumeric character; equivalent to [a-zA-Z0-9_]\n             in bytes patterns or string patterns with the ASCII flag.\n             In string patterns without the ASCII flag, it will match the\n             range of Unicode alphanumeric characters (letters plus digits\n             plus underscore).\n             With LOCALE, it will match the set [0-9_] plus characters defined\n             as letters for the current locale.\n    \\W       Matches the complement of \\w.\n    \\\\       Matches a literal backslash.\n\nThis module exports the following functions:\n    match     Match a regular expression pattern to the beginning of a string.\n    fullmatch Match a regular expression pattern to all of a string.\n    search    Search a string for the presence of a pattern.\n    sub       Substitute occurrences of a pattern found in a string.\n    subn      Same as sub, but also return the number of substitutions made.\n    split     Split a string by the occurrences of a pattern.\n    findall   Find all occurrences of a pattern in a string.\n    finditer  Return an iterator yielding a Match object for each match.\n    compile   Compile a pattern into a Pattern object.\n    purge     Clear the regular expression cache.\n    escape    Backslash all non-alphanumerics in a string.\n\nEach function other than purge and escape can take an optional 'flags' argument\nconsisting of one or more of the following module constants, joined by \"|\".\nA, L, and U are mutually exclusive.\n    A  ASCII       For string patterns, make \\w, \\W, \\b, \\B, \\d, \\D\n                   match the corresponding ASCII character categories\n                   (rather than the whole Unicode categories, which is the\n                   default).\n                   For bytes patterns, this flag is the only available\n                   behaviour and needn't be specified.\n    I  IGNORECASE  Perform case-insensitive matching.\n    L  LOCALE      Make \\w, \\W, \\b, \\B, dependent on the current locale.\n    M  MULTILINE   \"^\" matches the beginning of lines (after a newline)\n                   as well as the string.\n                   \"$\" matches the end of lines (before a newline) as well\n                   as the end of the string.\n    S  DOTALL      \".\" matches any character at all, including the newline.\n    X  VERBOSE     Ignore whitespace and comments for nicer looking RE's.\n    U  UNICODE     For compatibility only. Ignored for string patterns (it\n                   is the default), and forbidden for bytes patterns.\n\nThis module also defines an exception 'error'.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "shorten",
            "documentation": "Collapse and truncate the given text to fit in the given width.\n\nThe text first has its whitespace collapsed.  If it then fits in\nthe *width*, it is returned as is.  Otherwise, as many words\nas possible are joined and then the placeholder is appended::\n\n    >>> textwrap.shorten(\"Hello  world!\", width=12)\n    'Hello world!'\n    >>> textwrap.shorten(\"Hello  world!\", width=11)\n    'Hello [...]'",
            "type": "",
            "version": 0
        },
        {
            "acResult": "string",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "wrap",
            "documentation": "Wrap a single paragraph of text, returning a list of wrapped lines.\n\nReformat the single paragraph in 'text' so it fits in lines of no\nmore than 'width' columns, and return a list of wrapped lines.  By\ndefault, tabs in 'text' are expanded with string.expandtabs(), and\nall other whitespace characters (including newline) are converted to\nspace.  See TextWrapper class for available keyword args to customize\nwrapping behaviour.",
            "type": "",
            "version": 0
        }
    ],
    "time": [
        {
            "acResult": "__doc__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__loader__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__name__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__package__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__spec__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "accept2dyear",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "altzone",
            "documentation": "Convert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": "",
            "version": 0
        },
        {
            "acResult": "asctime",
            "documentation": "Convert a time tuple to a string, e.g. 'Sat Jun 06 16:26:11 1998'.\nWhen the time tuple is not present, current time as returned by localtime()\nis used.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "clock",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "ctime",
            "documentation": "Convert a time in seconds since the Epoch to a string in local time.\nThis is equivalent to asctime(localtime(seconds)). When the time tuple is\nnot present, current time as returned by localtime() is used.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "daylight",
            "documentation": "Convert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": "",
            "version": 0
        },
        {
            "acResult": "gmtime",
            "documentation": "Convert seconds since the Epoch to a time tuple expressing UTC (a.k.a.\nGMT).  When 'seconds' is not passed in, convert the current time instead.\n\nIf the platform supports the tm_gmtoff and tm_zone, they are available as\nattributes only.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "localtime",
            "documentation": "Convert seconds since the Epoch to a time tuple expressing local time.\nWhen 'seconds' is not passed in, convert the current time instead.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "mktime",
            "documentation": "Convert a time tuple in local time to seconds since the Epoch.\nNote that mktime(gmtime(0)) will not generally return zero for most\ntime zones; instead the returned value will either be equal to that\nof the timezone or altzone attributes on the time module.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "sleep",
            "documentation": "Delay execution for a given number of seconds.  The argument may be\na floating point number for subsecond precision.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "strftime",
            "documentation": "Convert a time tuple to a string according to a format specification.\nSee the library reference manual for formatting codes. When the time tuple\nis not present, current time as returned by localtime() is used.\n\nCommonly used format codes:\n\n%Y  Year with century as a decimal number.\n%m  Month as a decimal number [01,12].\n%d  Day of the month as a decimal number [01,31].\n%H  Hour (24-hour clock) as a decimal number [00,23].\n%M  Minute as a decimal number [00,59].\n%S  Second as a decimal number [00,61].\n%z  Time zone offset from UTC.\n%a  Locale's abbreviated weekday name.\n%A  Locale's full weekday name.\n%b  Locale's abbreviated month name.\n%B  Locale's full month name.\n%c  Locale's appropriate date and time representation.\n%I  Hour (12-hour clock) as a decimal number [01,12].\n%p  Locale's equivalent of either AM or PM.\n\nOther codes may be available on your platform.  See documentation for\nthe C library strftime function.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "strptime",
            "documentation": "Parse a string to a time tuple according to a format specification.\nSee the library reference manual for formatting codes (same as\nstrftime()).\n\nCommonly used format codes:\n\n%Y  Year with century as a decimal number.\n%m  Month as a decimal number [01,12].\n%d  Day of the month as a decimal number [01,31].\n%H  Hour (24-hour clock) as a decimal number [00,23].\n%M  Minute as a decimal number [00,59].\n%S  Second as a decimal number [00,61].\n%z  Time zone offset from UTC.\n%a  Locale's abbreviated weekday name.\n%A  Locale's full weekday name.\n%b  Locale's abbreviated month name.\n%B  Locale's full month name.\n%c  Locale's appropriate date and time representation.\n%I  Hour (12-hour clock) as a decimal number [01,12].\n%p  Locale's equivalent of either AM or PM.\n\nOther codes may be available on your platform.  See documentation for\nthe C library strftime function.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "struct_time",
            "documentation": "The time value as returned by gmtime(), localtime(), and strptime(), and\naccepted by asctime(), mktime() and strftime().  May be considered as a\nsequence of 9 integers.\n\nNote that several fields' values are not the same as those defined by\nthe C language standard for struct tm.  For example, the value of the\nfield tm_year is the actual year, not year - 1900.  See individual\nfields' descriptions for details.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "time",
            "documentation": "Return the current time in seconds since the Epoch.\nFractions of a second may be present if the system clock provides them.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "timezone",
            "documentation": "Convert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": "",
            "version": 0
        },
        {
            "acResult": "tzname",
            "documentation": "Built-in immutable sequence.\n\nIf no argument is given, the constructor returns an empty tuple.\nIf iterable is specified the tuple is initialized from iterable's items.\n\nIf the argument is a tuple, the return value is the same object.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "tzset",
            "documentation": "",
            "type": "",
            "version": 0
        }
    ],
    "token": [
        {
            "acResult": "AMPER",
            "documentation": "Convert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": "",
            "version": 0
        },
        {
            "acResult": "AMPEREQUAL",
            "documentation": "Convert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": "",
            "version": 0
        },
        {
            "acResult": "ASYNC",
            "documentation": "Convert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": "",
            "version": 0
        },
        {
            "acResult": "AT",
            "documentation": "Convert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": "",
            "version": 0
        },
        {
            "acResult": "ATEQUAL",
            "documentation": "Convert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": "",
            "version": 0
        },
        {
            "acResult": "AWAIT",
            "documentation": "Convert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": "",
            "version": 0
        },
        {
            "acResult": "CIRCUMFLEX",
            "documentation": "Convert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": "",
            "version": 0
        },
        {
            "acResult": "CIRCUMFLEXEQUAL",
            "documentation": "Convert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": "",
            "version": 0
        },
        {
            "acResult": "COLON",
            "documentation": "Convert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": "",
            "version": 0
        },
        {
            "acResult": "COMMA",
            "documentation": "Convert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": "",
            "version": 0
        },
        {
            "acResult": "COMMENT",
            "documentation": "Convert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": "",
            "version": 0
        },
        {
            "acResult": "DEDENT",
            "documentation": "Convert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": "",
            "version": 0
        },
        {
            "acResult": "DOT",
            "documentation": "Convert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": "",
            "version": 0
        },
        {
            "acResult": "DOUBLESLASH",
            "documentation": "Convert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": "",
            "version": 0
        },
        {
            "acResult": "DOUBLESLASHEQUAL",
            "documentation": "Convert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": "",
            "version": 0
        },
        {
            "acResult": "DOUBLESTAR",
            "documentation": "Convert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": "",
            "version": 0
        },
        {
            "acResult": "DOUBLESTAREQUAL",
            "documentation": "Convert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": "",
            "version": 0
        },
        {
            "acResult": "ELLIPSIS",
            "documentation": "Convert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": "",
            "version": 0
        },
        {
            "acResult": "ENCODING",
            "documentation": "Convert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": "",
            "version": 0
        },
        {
            "acResult": "ENDMARKER",
            "documentation": "Convert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": "",
            "version": 0
        },
        {
            "acResult": "EQEQUAL",
            "documentation": "Convert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": "",
            "version": 0
        },
        {
            "acResult": "EQUAL",
            "documentation": "Convert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": "",
            "version": 0
        },
        {
            "acResult": "ERRORTOKEN",
            "documentation": "Convert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": "",
            "version": 0
        },
        {
            "acResult": "GREATER",
            "documentation": "Convert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": "",
            "version": 0
        },
        {
            "acResult": "GREATEREQUAL",
            "documentation": "Convert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": "",
            "version": 0
        },
        {
            "acResult": "INDENT",
            "documentation": "Convert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": "",
            "version": 0
        },
        {
            "acResult": "ISEOF",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "ISNONTERMINAL",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "ISTERMINAL",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "LBRACE",
            "documentation": "Convert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": "",
            "version": 0
        },
        {
            "acResult": "LEFTSHIFT",
            "documentation": "Convert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": "",
            "version": 0
        },
        {
            "acResult": "LEFTSHIFTEQUAL",
            "documentation": "Convert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": "",
            "version": 0
        },
        {
            "acResult": "LESS",
            "documentation": "Convert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": "",
            "version": 0
        },
        {
            "acResult": "LESSEQUAL",
            "documentation": "Convert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": "",
            "version": 0
        },
        {
            "acResult": "LPAR",
            "documentation": "Convert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": "",
            "version": 0
        },
        {
            "acResult": "LSQB",
            "documentation": "Convert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": "",
            "version": 0
        },
        {
            "acResult": "MINEQUAL",
            "documentation": "Convert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": "",
            "version": 0
        },
        {
            "acResult": "MINUS",
            "documentation": "Convert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": "",
            "version": 0
        },
        {
            "acResult": "NAME",
            "documentation": "Convert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": "",
            "version": 0
        },
        {
            "acResult": "NEWLINE",
            "documentation": "Convert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": "",
            "version": 0
        },
        {
            "acResult": "NL",
            "documentation": "Convert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": "",
            "version": 0
        },
        {
            "acResult": "NOTEQUAL",
            "documentation": "Convert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": "",
            "version": 0
        },
        {
            "acResult": "NT_OFFSET",
            "documentation": "Convert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": "",
            "version": 0
        },
        {
            "acResult": "NUMBER",
            "documentation": "Convert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": "",
            "version": 0
        },
        {
            "acResult": "N_TOKENS",
            "documentation": "Convert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": "",
            "version": 0
        },
        {
            "acResult": "OP",
            "documentation": "Convert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": "",
            "version": 0
        },
        {
            "acResult": "PERCENT",
            "documentation": "Convert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": "",
            "version": 0
        },
        {
            "acResult": "PERCENTEQUAL",
            "documentation": "Convert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": "",
            "version": 0
        },
        {
            "acResult": "PLUS",
            "documentation": "Convert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": "",
            "version": 0
        },
        {
            "acResult": "PLUSEQUAL",
            "documentation": "Convert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": "",
            "version": 0
        },
        {
            "acResult": "RARROW",
            "documentation": "Convert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": "",
            "version": 0
        },
        {
            "acResult": "RBRACE",
            "documentation": "Convert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": "",
            "version": 0
        },
        {
            "acResult": "RIGHTSHIFT",
            "documentation": "Convert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": "",
            "version": 0
        },
        {
            "acResult": "RIGHTSHIFTEQUAL",
            "documentation": "Convert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": "",
            "version": 0
        },
        {
            "acResult": "RPAR",
            "documentation": "Convert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": "",
            "version": 0
        },
        {
            "acResult": "RSQB",
            "documentation": "Convert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": "",
            "version": 0
        },
        {
            "acResult": "SEMI",
            "documentation": "Convert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": "",
            "version": 0
        },
        {
            "acResult": "SLASH",
            "documentation": "Convert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": "",
            "version": 0
        },
        {
            "acResult": "SLASHEQUAL",
            "documentation": "Convert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": "",
            "version": 0
        },
        {
            "acResult": "STAR",
            "documentation": "Convert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": "",
            "version": 0
        },
        {
            "acResult": "STAREQUAL",
            "documentation": "Convert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": "",
            "version": 0
        },
        {
            "acResult": "STRING",
            "documentation": "Convert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": "",
            "version": 0
        },
        {
            "acResult": "TILDE",
            "documentation": "Convert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": "",
            "version": 0
        },
        {
            "acResult": "VBAR",
            "documentation": "Convert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": "",
            "version": 0
        },
        {
            "acResult": "VBAREQUAL",
            "documentation": "Convert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__doc__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__file__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__loader__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__name__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__package__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__spec__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "tok_name",
            "documentation": "dict() -> new empty dictionary\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs\ndict(iterable) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in iterable:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)",
            "type": "",
            "version": 0
        }
    ],
    "tokenize": [
        {
            "acResult": "__doc__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__loader__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__name__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__package__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__spec__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "tokenize",
            "documentation": "The tokenize() generator requires one argument, readline, which\nmust be a callable object which provides the same interface as the\nreadline() method of built-in file objects.  Each call to the function\nshould return one line of input as bytes.  Alternatively, readline\ncan be a callable function terminating with StopIteration:\n    readline = open(myfile, 'rb').__next__  # Example of alternate readline\n\nThe generator produces 5-tuples with these members: the token type; the\ntoken string; a 2-tuple (srow, scol) of ints specifying the row and\ncolumn where the token begins in the source; a 2-tuple (erow, ecol) of\nints specifying the row and column where the token ends in the source;\nand the line on which the token was found.  The line passed is the\nphysical line.\n\nThe first token sequence will always be an ENCODING token\nwhich tells you which encoding was used to decode the bytes stream.",
            "type": "",
            "version": 0
        }
    ],
    "types": [
        {
            "acResult": "BooleanType",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "BufferType",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "BuiltinFunctionType",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "BuiltinMethodType",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "ClassMethodDescriptorType",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "ClassType",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "ComplexType",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "DictType",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "DictionaryType",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "EllipsisType",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "FileType",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "FloatType",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "FunctionType",
            "documentation": "Create a function object.\n\ncode\n  a code object\nglobals\n  the globals dictionary\nname\n  a string that overrides the name from the code object\nargdefs\n  a tuple that specifies the default argument values\nclosure\n  a tuple that supplies the bindings for free variables",
            "type": "",
            "version": 0
        },
        {
            "acResult": "GeneratorType",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "GenericAlias",
            "documentation": "Represent a PEP 585 generic type\n\nE.g. for t = list[int], t.__origin__ is list and t.__args__ is (int,).",
            "type": "",
            "version": 0
        },
        {
            "acResult": "InstanceType",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "IntType",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "LambdaType",
            "documentation": "Create a function object.\n\ncode\n  a code object\nglobals\n  the globals dictionary\nname\n  a string that overrides the name from the code object\nargdefs\n  a tuple that specifies the default argument values\nclosure\n  a tuple that supplies the bindings for free variables",
            "type": "",
            "version": 0
        },
        {
            "acResult": "ListType",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "MappingProxyType",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "MethodDescriptorType",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "MethodType",
            "documentation": "Create a bound instance method object.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "MethodWrapperType",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "ModuleType",
            "documentation": "Create a module object.\n\nThe name must be a string; the optional doc argument can have any type.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "NoneType",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "NotImplementedType",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "ObjectType",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "SliceType",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "StringType",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "StringTypes",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "TupleType",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "TypeType",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "UnboundMethodType",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "WrapperDescriptorType",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__all__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__doc__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__file__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__loader__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__name__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__package__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__spec__",
            "documentation": "",
            "type": "",
            "version": 0
        }
    ],
    "webbrowser": [
        {
            "acResult": "DefaultBrowser",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__doc__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__loader__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__name__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__package__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "__spec__",
            "documentation": "",
            "type": "",
            "version": 0
        },
        {
            "acResult": "get",
            "documentation": "Return a browser launcher instance appropriate for the environment.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "open",
            "documentation": "Display url using the default browser.\n\nIf possible, open url in a location determined by new.\n- 0: the same browser window (the default).\n- 1: a new browser window.\n- 2: a new browser page (\"tab\").\nIf possible, autoraise raises the window (the default) or not.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "open_new",
            "documentation": "Open url in a new window of the default browser.\n\nIf not possible, then open url in the only browser window.",
            "type": "",
            "version": 0
        },
        {
            "acResult": "open_new_tab",
            "documentation": "Open url in a new page (\"tab\") of the default browser.\n\nIf not possible, then the behavior becomes equivalent to open_new().",
            "type": "",
            "version": 0
        }
    ]
}